{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TypeScript","result":{"pageContext":{"currentCategory":"TypeScript","categories":["All","React","개발지식","데이터","TypeScript","Next","최적화","앞으로만"],"edges":[{"node":{"id":"b37107a9-1b4d-50fd-b6b1-cea73ef91378","excerpt":"any any의 사전적인 의미는  입니다. TypeScript에서는 으로 해석할 수 있습니다. 어떤 것이든지 허용하는 는 엄격하게 타입을 검사하고 처리하는 TypeScript에서 치명적 입니다. 개발 당시에는 문제가 없으나 개발 후 예기치 못한 문제가 발생할 가능성이 매우 높다. unknown unknown의 사전적인 의미는  입니다. unknown도 any와 하지만,  함부로 니다. unknown 타입으로 변수를 정의하면 컴파일러에게 변수의 타입이 unknown이라 어떤 값이든 올 수 있다. 그래서 하다. 체크를 해야 되는 코드는 많아지겠지만,  any와 다르게 프로퍼티 또는 연산을 하는 경우 컴파일러가 체크하기 때문에 문제가 되는 코드를 미리 예방할 수 있다. any unknown","fields":{"slug":"/typescript/any-unknown/"},"frontmatter":{"categories":"TypeScript","title":"any와 unknown 차이","date":"December 18, 2022"}},"next":{"fields":{"slug":"/typescript/enum/"}},"previous":{"fields":{"slug":"/data/trigger/"}}},{"node":{"id":"22c73c9a-186d-56bb-926b-c44a32b50ade","excerpt":"enum이란? 열거형 변수로 정수를 하나로 합칠 때 편리한 기능 임의의 숫자나 문자열을 할당할 수 있으며, 하나의 유형으로 사용해서 버그를 줄일 수 있음 TypeScript가 자체적으로 구현하는 기능 JavaScript에서는 사용할 수 없기 때문에 아래와 같이 객체를 사용하는 코드를 작성하게 됨 enum은 편리한 기능이지만 TypeScript가 자체적으로 구현했기 때문에 Tree-shaking이 되지 않는다. 참고링크 TypeScript enum을 사용하지 않는 게 좋은 이유를 Tree-shaking 관점에서 소개합니다. enum이란? 참고링크","fields":{"slug":"/typescript/enum/"},"frontmatter":{"categories":"TypeScript","title":"enum이란?","date":"December 17, 2022"}},"next":{"fields":{"slug":"/next/pages/"}},"previous":{"fields":{"slug":"/typescript/any-unknown/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}