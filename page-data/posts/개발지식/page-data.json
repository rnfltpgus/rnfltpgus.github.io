{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/개발지식","result":{"pageContext":{"currentCategory":"개발지식","categories":["All","개발지식","데이터","최적화","좋은글","React"],"edges":[{"node":{"id":"c68ce03d-c589-5507-b1b2-70e44876e320","excerpt":"SQL(관계형 DB) SQL을 사용하면 RDBMS(관리 시스템)에서 데이터를 저장, 수정, 삭제 및 검색할 수 있음 관계형 데이터베이스의 핵심 특징 데이터는  테이블에 저장된다. 데이터는  여러 테이블에 분산된다. 데이터는 테이블에 레코드로 저장되는데, 각 테이블마다 명확하게 정의된 구조가 있다. 해당 으로 정의된다. 따라서 스키마를 준수하지 않은 레코드는 테이블에 추가할 수 없다. 즉, 스키마를 수정하지 않은 이상 정해진 구조에 맞는 레코드만 추가가 가능한 것이 관계형 데이터베이스의 특징 중 하나다. 또한, 데이터 중복을 피하기 위해 ‘관계’를 이용한다.\n데이터 중복을 피하기 위한 데이터 관계 예시 하나의 테이블에서 중복 없이 하나의 데이터만을 관리하기 때문에 다른 테이블에서 부정확 데이터를 다룰 위험이 없어지는 장점이 있다. NoSQL(비관계형 DB) SQL(관계형 DB)와 반대로 스키마도 없고, 관계도 없다. NOSQL에서는 레코드를 문서(documents)라고 부른다. 여기…","fields":{"slug":"/sql-nosql/"},"frontmatter":{"categories":"개발지식 데이터","title":"SQL과 NOSQL 차이","date":"December 13, 2022"}},"next":{"fields":{"slug":"/local-sesstion/"}},"previous":null},{"node":{"id":"6d54aba7-593a-5292-9590-d919318764a5","excerpt":"HTML5에는 웹의 데이터를 클라이언트에 저장할 수 있는 새로운 자료구조인 WebStorage 스펙이 포함됨(로컬과 세션스토리지로 나뉨) Web Storage API는 브라우저에서 키/값 쌍을 쿠키보다 훨씬 직관적으로 젖아할 수 있는 방법을 제공한다. SessionStorage 각각의 출처에 대해서 독립적인 저장 공간을 페이지 세션이 유지되는 동안(브라우저가 열려있는 동안) 제공한다. 세션에 한정해, 즉 브라우저 또는 탭이 닫힐 때까지만 데이터를 저장한다. 데이터를 절대 서버로 전송하지 않는다. 저장 공간이 쿠키보다 큽다.(최대 5MB) 입력 폼 정보, 비로그인 장바구니 용도로 많이 사용된다. LocalStorage SessionStorage와 비슷하지만, 브라우저를 닫았다 열어도 데이터가 남아있다. 유효기간 없이 데이터를 저장하고, JavaScript를 사용하거나 브라우저 캐시 또는 로컬 저장 데이터를 지워야만 사라진다. 저장 공간이 셋중 제일 크다. 자동 로그인을 유지시킬 때 …","fields":{"slug":"/local-sesstion/"},"frontmatter":{"categories":"개발지식","title":"Web Storage(Local, Session)","date":"December 12, 2022"}},"next":{"fields":{"slug":"/cookies-session-token/"}},"previous":{"fields":{"slug":"/sql-nosql/"}}},{"node":{"id":"ef978d2a-e285-5b72-a07d-fc663067bcde","excerpt":"인증과 인가 정의 전달, 공개하기 위한 방법으로 인증 : (식별가능한 정보로) 서비스에 등록된 유저의 신원을 입증하는 과정 인가 : 인증된 사용자에 대한 자원 접근 권한 확인 HTTP의 특징과 쿠키와 세션을 사용하는 이유 HTTP 프로토콜의 특성이자 약점을 보완하기 위해 을 사용 기본적으로 HTTP 프로토콜 환경은 “connectionless(무연고), stateless(국적없는)” 한 즉, ****을 가지기 때문에 서버는 클라이언트가 누구인지 매번 확인해야되는데, 이를 해결하기 위해서 쿠키와 세션, 그리고 추가적으로 토큰을 사용하게 되었다. 쿠키(Cookie) 쿠키란? 에서 쿠키를 개발하였다. 클라이언트(브라우저) 에 된다. 로 구성되어 있으며, 브라우저 환경마다 다르긴하지만 로 데이터를 보낼 수 있다. 로 구성되어 있으며, 이다. 사용자 인증이 할 수 있으며, 유효 시간이 정해지면 되는 특징이 있다.(날짜를 정해주면 , 안 정해주면  참고) 쿠키는 사용자가 따로 요청하지 않아도…","fields":{"slug":"/cookies-session-token/"},"frontmatter":{"categories":"개발지식","title":"쿠키와 세션 그리고 토큰(인증과 인가)","date":"December 12, 2022"}},"next":{"fields":{"slug":"/png-svg/"}},"previous":{"fields":{"slug":"/local-sesstion/"}}},{"node":{"id":"69f14ed0-f4ec-5c9d-acea-6178b236c7a4","excerpt":"차이점은  파일은 으로 되어 있고,  파일은 로 되어있어 이미지 확대시, 는 이 일어나고 는 가 유지된 채 표현된다. PNG(Portable Network Graphics, PNG) 비손실 그래픽 파일 포맷(픽셀형식) 특허 문제가 얽힌 GIF 포맷의 문제를 해결하고 개선하기위에 고안됨 컬러 팔레트 화상과 그레이스케일 화상, 풀 컬러 화상 방식을 지원함 고해상도를 지원하므로 파일 크기가 큼(이미지를 처리/공유/저장/실행하는데 시간이 걸려 페이지 로딩 시간이 길어짐) SVG(Scalable Vector Graphics, SVG) 2차원 벡터 그래픽을 표현하기 위함 XML 기반의 파일 형식(벡터 그래픽 파일 형식) SVG 형식의 이미지와 그 자동은 XML 텍스트 파일들로 정의 되어 있어 검색화/목록화/스크립트화가 가능하며, 필요하다면 압축도 가능함(검색 엔진이 텍스트를 분석할 수 있어서, 접근성과 SEO(검색 엔진 최적화)측면에서 좋음) 기본적으로 파일 사이즈는 작은 편에 속하지만, 수…","fields":{"slug":"/png-svg/"},"frontmatter":{"categories":"개발지식","title":"PNG와 SVG","date":"December 11, 2022"}},"next":{"fields":{"slug":"/dns-server-img/"}},"previous":{"fields":{"slug":"/cookies-session-token/"}}},{"node":{"id":"7e761a3a-a981-57d0-9ec5-12a08a0682d1","excerpt":"CDN이란? 콘텐츠 전송 네트워크(CDN)는 데이터 사용량이 많은 애플리케이션의 웹 페이지 로드 속도를 높이는 상호 연결된 서버 네트워크 동영상 또는 웹 사이트 이미지와 같은 대용량 파일을 로드하는 경우 시간이 오래 걸릴 수 있는데, 클라이언트와 웹 사이트 서버 간에 를 두어 효율성을 높일 수 있다. CDN 서버를 통해서  를 할 수 있음 이미지 CDN의 URL을 이용하여 최적화 옵션을 나타내는 방법 이미지 CDN에서의 URL에는 이미지에 대한 변환 및 최적화에 대한 중요한 정보를 전달하게 되는데, URL의 형식은 보통 아래와 같다. url 예시 Origin: 도메인(자체 도메인 또는 이미지 CDN의 도메인이 있을 수 있다.) Image: 이미지(일반적으로 필요할 때 기존 위치에서 이미지를 자동으로 검색하도록 구성할 수 있다.) Security key: 이미지의 새 버전마다 고유한 보안 키를 필요로 하게하여, 다른 사람이 이미지의 새 버전을 만드는 것을 방지 Transformati…","fields":{"slug":"/dns-server-img/"},"frontmatter":{"categories":"개발지식 최적화","title":"CDN 서버를 이용한 이미지 최적화","date":"December 11, 2022"}},"next":{"fields":{"slug":"/proxy/"}},"previous":{"fields":{"slug":"/png-svg/"}}},{"node":{"id":"a4b4e6be-14b0-5b9e-93b4-bf07fb74e438","excerpt":"개요 란 클라이언트가 자신을 거쳐 다른 네트워크에 접속할 수 있도록 해주는 서버를 말한다. 서버와 클라이언트 사이에서 대리로 통신을 라고 하고 그 기능을 하는 라 부르게 되는 것이다. 프록시 서버의 원리 프록시 서버는 서버와 클라이언트 사이에서 요청과 응답을 처리해주게 되는 것을 말하는데 클라이언트에서 프록시 서버로 데이터 전송 프록시 서버에서 다시 웹 서버로 웹 응답 웹 서버에서 프록시 서버로 웹 응답 프록시 서버에서 클라이언트로 데이터 전송 프록시 서버의 사용 목적(이유) 캐시 데이터를 사용하기 위함 프록시 서버 중 일부는 프록시 서버에 요청된 내용을 캐시를 사용해 저장해둔다. 그러면 캐시에 저장되어있는 내용에 대한 재요청은 서버에 따로 접속할 필요가 없어 저장된 내용을 그대로 돌려주면 되기 때문에 전송 시간을 절약할 수 있고 외부 트래픽을 줄임으로써 네트워크 병목 현상을 방지할 수 있다. 보안 목적 프론시 서버가 중간에 경유하게 되면 IP를 숨기는 것이 가능하기 때문이다. 또…","fields":{"slug":"/proxy/"},"frontmatter":{"categories":"개발지식","title":"프록시 서버란? 원리와 사용 목적","date":"December 11, 2022"}},"next":{"fields":{"slug":"/things-to-see/"}},"previous":{"fields":{"slug":"/dns-server-img/"}}},{"node":{"id":"e1a15dbf-79ae-577a-94ab-9b31d47a48c3","excerpt":"정의 Object를 사용하여 Object를 생성하면 Object가 반환된다. 이때 라고 부른다. new 연산자를 사용하여 Object를 생성하여 변수에 할당할 수 있으며, 변수에 할당된 Object가 instance인 것이다. ## instance를 사용하는 이유는? instance마다 다른 값을 유지/제어하기 위해서 instance를 생성하는 것이다. 다시말해, 원본의 값을 그대로 사용하면 원본의 데이터가 변경되기 떄문에 instance를 생성하여 원본의 값을 건들지않고 사용하기 위해 instance를 생성하여 사용하는 것이다. 참고링크 object MDN 오브젝트(Object)와 인스턴스(instance),instanceof 정의 참고링크","fields":{"slug":"/object-instance/"},"frontmatter":{"categories":"개발지식","title":"Object와 instance의 차이점?","date":"December 10, 2022"}},"next":{"fields":{"slug":"/react-optimization-plan/"}},"previous":{"fields":{"slug":"/things-to-see/"}}},{"node":{"id":"f04e1f23-bf08-53e0-a879-1bc3114a5af0","excerpt":"면접에서 기술질문으로 아래와 같은 질문을 받게되었다. 나는 위와 같은 질문을 받고 와 관련된 최적화 방안에 대해 질문한 것이라고 생각은 들었지만, 알지못하여서 답변으로는 아래와 같이 말을 하게 되었다. 아직까지는 대규모 프로젝트를 진행해본 경험이 없다. 하지만 2차례의 프로젝트를 진행하면서 최적화 방안으로 사용하거나 학습한 바로는 관심사의 분리나 단일 책임원칙을 적용하여, 컴포넌트가 최대한 한개의 기능을 수행하게 작성하거나 분리를 하고 공통으로 사용되는 코드는 분리하여, 코드의 양을 줄이고 최소화는 방법을 이야기하였다. 그 후 추가적으로 와 , 에 대해 말을 하였지만 면접관의 질문에 대한 답변을 말한 것이 아니여서 이 글을 작성하게 되었다. 지금 드는 생각 단순하게 최적화를 하기위해서는 코드를 적재적소에 사용한다. 라는 생각이 들게 되었는데 이유는 작성한 코드들이 항상 사용되는 것이 아니여서 필요할 경우에만 사용하면 된다 라는 생각이 들었다. 그래서 다음 면접시, 모르는 답안이 나…","fields":{"slug":"/react-optimization-plan/"},"frontmatter":{"categories":"React 개발지식 최적화","title":"React 대규모의 서비스 최적화 방안","date":"December 10, 2022"}},"next":{"fields":{"slug":"/3rd-party/"}},"previous":{"fields":{"slug":"/object-instance/"}}},{"node":{"id":"3a6d07f3-9ba5-58e7-8b6f-175968389bb3","excerpt":"하드웨어 생산자와 소프트웨어 개발자의 관계를 나타낼 때 사용 그 중에서  게임제조사와 소비자를 연결해주는 게임회사(퍼블리싱) 스마일게이트와 같은 회사 개발자 측면에서 보면 퍼스트 파티 개발자 : 하드웨어 생산자가 직접 소프트웨어를 개발하는 경우 세컨드 파티 개발자 : 하드웨어 생산자인 기업과 자사간의 관계(또는 하청업체)에 속한 소프트웨어 개발자 서트 파티 개발자 : 아무 관련없는 제 3자 소프트웨어 개발자 결론 주로 편한 개발을 위해 이나   혹은 \n를 사용하는데, 이처럼 제 3자로 중간다리 역할로 도움을 주는 것이 서드 파티\n로 볼 수 있고, 이런 것을 만드는 개발자가 서드 파티 개발자다. 참고링크 서드 파티 개발자 - 위키백과, 우리 모두의 백과사전 결론 참고링크","fields":{"slug":"/3rd-party/"},"frontmatter":{"categories":"개발지식","title":"써드 파티(3rd party)란?","date":"December 10, 2022"}},"next":{"fields":{"slug":"/cicd/"}},"previous":{"fields":{"slug":"/react-optimization-plan/"}}},{"node":{"id":"f3a2dcb8-b976-5324-9427-468e935a341e","excerpt":"CI란?  자동화 과정 자동화 프로세스인 을 의미하는데, CI를 성공적으로 구현할 경우 애플리케이션에 대한 새로운 코드 변경 사항이 정기적으로 빌드 및 테스트되어 공유 리포지토리에 통합되므로 여러 명의 개발자가 동시에 애플리케이션 개발과 관련된 코드 작업을 할 경우 서로 충돌할 수 있는 문제를 해결할 수 있음  동작을 확인하고 변경으로 인해 문제가 생기는 부분이 없도록 보장 CD란?  자동화 과정 지속적인 서비스 제공(Continuous Delivery) 또는 지속적인 배포(Continuous Deployment)를 의미하며 으로 사용됨 는 테스트 및 배포 단계를 자동화하는 DevOps 방식을 논리적 극한까지 끌어 올림 코드 변경이 파이프라인의 이전 단계를 모두 성공적으로 통과하면 수동 개입 없이 해당 변경 사항이 프로덕션에 자동으로 배포 됨 는 또한 성숙하고 입증된 지속적 통합 및 지속적인 전달 단계를 기반으로 함 간단한 코드 변경이 정기적으로 마스터에 커밋되고, 자동화된 빌드 …","fields":{"slug":"/cicd/"},"frontmatter":{"categories":"개발지식","title":"CI/CD에 대해서","date":"December 09, 2022"}},"next":{"fields":{"slug":"/treeshaing/"}},"previous":{"fields":{"slug":"/3rd-party/"}}},{"node":{"id":"58d79bc3-3b43-5ac6-ac65-8f268e81c801","excerpt":"정의 애플리케이션을 트리의 각 노드들 즉, 일종의 나무와 같이 보고 나무를 흔들면 죽은 잎사귀들이 떨어지는 모습에 착안해 이라고 명명하였다고 한다. 사용하지 않는 코드를 제거하는 기법 방법 import시, 필요한 것만 작성하여 사용 사용하는 모듈로부터 으로  한다. Babel이 ES6 모듈을 commonjs module로 변환하지 않도록 조치(.babelrc 설정) Babel은 대부분의 웹 애플리케이션에서 필수로 사용하는 도구 중 하나 이지만 를 사용중에 있다면 를 자동으로 로 한다. 좋은 기능이지만 트리 쉐이킹 관점에서는 그렇지 못하다고 한다. 에서 로 변환하지 못하도록 설정을 추가해 줘야한다. 또한 위와 같이 설정을 하면 웹팩은 코드를 광범위하게 호환되는 형식으로 변환하므로, 이 프로세스는 호환성 문제를 일으키지 않는다고 한다. 프로젝트의 모듈들이 Tree Shaking시, 해야 한다.(package.json 설정) 예측 가능한 입력을 가지고 동일하게 함수의 스코프 밖에 어떤 …","fields":{"slug":"/treeshaing/"},"frontmatter":{"categories":"개발지식 최적화","title":"트리 쉐이킹(Tree Shaking)","date":"December 09, 2022"}},"next":null,"previous":{"fields":{"slug":"/cicd/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}