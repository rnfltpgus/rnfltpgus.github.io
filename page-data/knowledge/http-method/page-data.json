{"componentChunkName":"component---src-templates-blog-template-js","path":"/knowledge/http-method/","result":{"data":{"cur":{"id":"7766ecfa-6504-5a86-8426-12eaea5d537f","html":"<br/>\n<h3 id=\"먼저-알아두면-좋은-멱등이란-단어\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EB%A9%B1%EB%93%B1%EC%9D%B4%EB%9E%80-%EB%8B%A8%EC%96%B4\" aria-label=\"먼저 알아두면 좋은 멱등이란 단어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저 알아두면 좋은 멱등이란 단어</h3>\n<p><strong>멱등의 사전적 정의는 <code class=\"language-text\">연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질</code>을 의미한다.</strong></p>\n<p><strong><code class=\"language-text\">동일한 요청</code>을 <code class=\"language-text\">한 번 보내는 것</code>과 <code class=\"language-text\">여러 번 연속으로 보내는 것</code>이 <code class=\"language-text\">같은 효과</code>를 지니고, 서버의 상태도 동일하게 남을 때, 해당 HTTP 메서드가 <code class=\"language-text\">멱등성</code>을 가졌다고 말합니다.</strong></p>\n<br/>\n<h2 id=\"각-메소드의-특징\" style=\"position:relative;\"><a href=\"#%EA%B0%81-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"각 메소드의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>각 메소드의 특징</h2>\n<table>\n<thead>\n<tr>\n<th>메소드 명</th>\n<th>메소드 용도</th>\n<th>정의</th>\n<th>메소드 특징</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>데이터 조회</td>\n<td>서버에 전달하고 싶은 데이터를 query(parameter, query string)을 통해 전달</td>\n<td>Query를 BODY에 담아서 조회가능하나 지원하지 않는 곳도 있기 때문에 권장하지 않는다.</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>다양한 요청 처리</td>\n<td>BODY에 리소스 데이터를 전달</td>\n<td>GET 방식 사용시 전달해야할 데이터가 많다면 POST를 사용하여 BODY에 조회할 데이터를 전달할 수 있지만 POST로 조회시 캐싱하기에 어려운 문제가 있기 때문에 권장하지 않는다.(기술적으로 캐싱은 가능하다.)</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>데이터 추가 or 덮어쓰기</td>\n<td>요청한 데이터가 없다면 추가하고 있으면 덮어쓰기</td>\n<td>POST와 PUT은 다르다. POST를 계속 요청하면 데이터가 계속 생성되지만 PUT은 여러번 요청하더라도 결과는 같다.(멱등성)</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>데이터 수정</td>\n<td>전달한 데이터로 수정</td>\n<td><strong>해당 기능을 지원하지 않는 경우도 있기 때문에 권장하는 방식이 아니다.</strong> 수정시에는 POST를 사용한다.</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>데이터 삭제</td>\n<td>특정 리소스의 삭제를 요청하는 데 사용</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h3 id=\"get의-특징\" style=\"position:relative;\"><a href=\"#get%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"get의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET의 특징</h3>\n<ul>\n<li><strong>클라이언트에서 서버로 어떠한 리소스로 부터 정보를 요청하기 위해 사용되는 메서드이다.</strong></li>\n<li><code class=\"language-text\">캐시</code>가 <code class=\"language-text\">가능</code>하다.(GET을 통해 서버에 리소스를 요청할 때 웹 캐시가 요청을 가로채 서버로부터 리소스를 다시 다운로드하는 대신 리소스의 복사본을 반환하며 HTTP 헤더에서 cache-control 헤더를 통해 캐시 옵션을 지정할 수 있다.)</li>\n<li><code class=\"language-text\">길이 제한</code>이 있다.(GET 요청의 길이 제한은 표준이 따로 있는건 아니고 브라우저마다 제한이 다르다고 한다.)</li>\n<li><code class=\"language-text\">중요한 정보</code>를 <code class=\"language-text\">다루면 안된다.</code>(보안, 파라미터에 다 노출되어 버린다.)</li>\n<li>GET을 통한 요청은 URL주소 끝에 파라미터로 포함되어 전송되며, 이 부분을 <code class=\"language-text\">쿼리 스트링(query string)</code>이라고 부른다.</li>\n<li><strong>멱등성을 가진다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"post의-특징\" style=\"position:relative;\"><a href=\"#post%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"post의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POST의 특징</h3>\n<ul>\n<li><strong>클라이언트에서 서버로 리소스를 생성하거나 업데이트하기 위해 데이터를 보낼 때 사용 되는 메서드다.</strong></li>\n<li><code class=\"language-text\">캐시되지 않는다</code>.</li>\n<li>POST는 전송할 데이터를 HTTP 메시지 body 부분에 담아서 서버로 보낸다. (body의 타입은 Content-Type 헤더에 따라 결정 된다.)</li>\n<li>데이터를 전송할때 길이 제한이 따로 없어 용량이 큰 데이터를 보낼 때 사용하거나 GET처럼 데이터가 외부적으로 드러나는건 아니라서 보안이 필요한 부분에 많이 사용된다.(하지만 데이터를 암호화하지 않으면 body의 데이터도 결국 볼 수 있는건 똑같다.)</li>\n<li>POST를 통한 데이터 전송은 보통 HTML form을 통해 서버로 전송된다.</li>\n</ul>\n<br/>\n<h3 id=\"put의-특징\" style=\"position:relative;\"><a href=\"#put%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"put의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PUT의 특징</h3>\n<ul>\n<li>요청한 URI에 이미 리소스가 존재한다면 PUT과 같이 전달된 body는 원본 서버에 수정된 버전으로 변경되어야 한다.</li>\n<li>만일 리소스가 존재하지 않는다면 서버로 요청된 데이터로 새 리소스를 생성할 수 있다.</li>\n<li>새 리소스가 생성된 경우 201(created) 응답을 사용자에게 알려준다.</li>\n<li>기존 리소스가 수정된 경우 200(확인) 혹은 204(내용 없음) 응답을 보내야 한다.</li>\n<li>리소스를 생성할 수 없거나 수정할 수 없는 경우 적절한 오류 응답을 제공해야 한다.</li>\n<li><strong>멱등성을 가진다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"patch의-특징\" style=\"position:relative;\"><a href=\"#patch%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"patch의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PATCH의 특징</h3>\n<ul>\n<li>리소스의 부분만을 수정하는 데 쓰인다.</li>\n</ul>\n<br/>\n<h3 id=\"delete의-특징\" style=\"position:relative;\"><a href=\"#delete%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"delete의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DELETE의 특징</h3>\n<ul>\n<li>데이터 삭제 특정 리소스의 삭제를 요청하는데 사용한다.</li>\n<li><strong>멱등성을 가진다.</strong></li>\n</ul>\n<h3 id=\"그-외-headconnectoptionstrace-추가적으로-한번-찾아서-보자ㄷ\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8-headconnectoptionstrace-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%9C%EB%B2%88-%EC%B0%BE%EC%95%84%EC%84%9C-%EB%B3%B4%EC%9E%90%E3%84%B7\" aria-label=\"그 외 headconnectoptionstrace 추가적으로 한번 찾아서 보자ㄷ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외 HEAD∙CONNECT∙OPTIONS∙TRACE 추가적으로 한번 찾아서 보자ㄷ</h3>\n<br/>\n<h2 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h2>\n<h3 id=\"get과-post의-차이점\" style=\"position:relative;\"><a href=\"#get%EA%B3%BC-post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"get과 post의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>GET과 POST의 차이점</strong></h3>\n<ul>\n<li><strong>사용목적</strong> : <code class=\"language-text\">GET</code>은 서버의 리소스에서 데이터를 요청할 때, <code class=\"language-text\">POST</code>는 서버의 리소스를 새로 생성하거나 업데이트할 때 사용한다.\nDB로 따지면 <code class=\"language-text\">GET</code>은 Select에 가깝고, POST는 Create에 가깝다고 보면 된다.</li>\n<li><strong>요청에 body 유무</strong> : <code class=\"language-text\">GET</code>은 URL 파라미터에 요청하는 데이터를 담아 보내기 때문에 HTTP 메시지에 body가 없다. <code class=\"language-text\">POST</code>는 body 에 데이터를 담아 보내기 때문에 당연히 HTTP 메시지에 body가 존재한다.</li>\n<li><strong>멱등성 (idempotent)</strong> : <code class=\"language-text\">GET</code> 요청은 멱등이며, <code class=\"language-text\">POST</code>는 멱등이 아니다.</li>\n</ul>\n<br/>\n<h3 id=\"post와-put의-차이점\" style=\"position:relative;\"><a href=\"#post%EC%99%80-put%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"post와 put의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>POST와 PUT의 차이점</strong></h3>\n<p><code class=\"language-text\">POST</code>가 두번 실행된다면 리소스는 두개가 생기는 것이고 <code class=\"language-text\">PUT</code>이 두번 실행된다면 리소스가 두번 수정되거나 리소스가 하나 생기고 한번 수정되는 것이다.</p>\n<ul>\n<li><strong>POST는 새 리소스를 생성한다.</strong></li>\n<li><strong>PUT은 리소스를 수정 혹은 생성하는 역할을 한다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"put과-patch의-차이점\" style=\"position:relative;\"><a href=\"#put%EA%B3%BC-patch%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"put과 patch의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>PUT과 PATCH의 차이점</strong></h3>\n<p><code class=\"language-text\">PUT</code>은 요청 페이로드를 사용해 새로운 리소스를 생성하거나, 대상 리소스를 나타내는 데이터를 대체하는 것이고 <code class=\"language-text\">PATCH</code>는 리소스의 부분적인 수정을 할 때에 사용됩니다.</p>\n<p><code class=\"language-text\">PUT</code>은 가지고 있지 않은 리소스를 보내면 새로운 리소스를 생성하지만, <code class=\"language-text\">PATCH</code>는 에러를 유발한다.</p>\n<ul>\n<li><strong>PUT은 리소스의 모든 것을 업데이트 한다.</strong></li>\n<li><strong>POST는 리소스의 일부분을 업데이트 한다.</strong></li>\n</ul>\n<br/>\n<h2 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h2>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Methods\">HTTP 요청 메서드</a></p>\n<p><a href=\"https://velog.io/@yh20studio/CS-Http-Method-%EB%9E%80-GET-POST-PUT-DELETE\">Http Method 란? (GET, POST, PUT, DELETE)</a></p>\n<p><a href=\"https://velog.io/@songyouhyun/Get%EA%B3%BC-Post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%A5%BC-%EC%95%84%EC%8B%9C%EB%82%98%EC%9A%94\">Get과 Post의 차이를 아시나요?</a></p>\n<p><a href=\"https://velog.io/@vagabondms/%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%84%B0%EB%94%94-PUT%EA%B3%BC-PATCH-%EC%B0%A8%EC%9D%B4\">[ 기술 스터디 ] PUT과 PATCH 차이</a></p>\n<p><a href=\"https://atoz-developer.tistory.com/117\">[HTTP통신] HTTP 메소드 및 특징</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EB%A8%BC%EC%A0%80-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EB%A9%B1%EB%93%B1%EC%9D%B4%EB%9E%80-%EB%8B%A8%EC%96%B4\">먼저 알아두면 좋은 멱등이란 단어</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%81-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%ED%8A%B9%EC%A7%95\">각 메소드의 특징</a></p>\n<ul>\n<li><a href=\"#get%EC%9D%98-%ED%8A%B9%EC%A7%95\">GET의 특징</a></li>\n<li><a href=\"#post%EC%9D%98-%ED%8A%B9%EC%A7%95\">POST의 특징</a></li>\n<li><a href=\"#put%EC%9D%98-%ED%8A%B9%EC%A7%95\">PUT의 특징</a></li>\n<li><a href=\"#patch%EC%9D%98-%ED%8A%B9%EC%A7%95\">PATCH의 특징</a></li>\n<li><a href=\"#delete%EC%9D%98-%ED%8A%B9%EC%A7%95\">DELETE의 특징</a></li>\n<li><a href=\"#%EA%B7%B8-%EC%99%B8-headconnectoptionstrace-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%9C%EB%B2%88-%EC%B0%BE%EC%95%84%EC%84%9C-%EB%B3%B4%EC%9E%90%E3%84%B7\">그 외 HEAD∙CONNECT∙OPTIONS∙TRACE 추가적으로 한번 찾아서 보자ㄷ</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></p>\n<ul>\n<li><a href=\"#get%EA%B3%BC-post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><strong>GET과 POST의 차이점</strong></a></li>\n<li><a href=\"#post%EC%99%80-put%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><strong>POST와 PUT의 차이점</strong></a></li>\n<li><a href=\"#put%EA%B3%BC-patch%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><strong>PUT과 PATCH의 차이점</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</div>","excerpt":"먼저 알아두면 좋은 멱등이란 단어 멱등의 사전적 정의는 을 의미한다. 을 과 이 를 지니고, 서버의 상태도 동일하게 남을 때, 해당 HTTP 메서드가 을 가졌다고 말합니다. 각 메소드의 특징 메소드 명 메소드 용도 정의 메소드 특징 GET 데이터 조회 서버에 전달하고 싶은 데이터를 query(parameter, query string)을 통해 전달 Query를 BODY에 담아서 조회가능하나 지원하지 않는 곳도 있기 때문에 권장하지 않는다. POST 다양한 요청 처리 BODY에 리소스 데이터를 전달 GET 방식 사용시 전달해야할 데이터가 많다면 POST를 사용하여 BODY에 조회할 데이터를 전달할 수 있지만 POST로 조회시 캐싱하기에 어려운 문제가 있기 때문에 권장하지 않는다.(기술적으로 캐싱은 가능하다.) PUT 데이터 추가 or 덮어쓰기 요청한 데이터가 없다면 추가하고 있으면 덮어쓰기 POST와 PUT은 다르다. POST를 계속 요청하면 데이터가 계속 생성되지만 PUT은 여러번…","frontmatter":{"date":"December 24, 2022","title":"Http Method 란? (GET과 POST DELETE과 PUT 그리고 PATCH)","categories":"개발지식","author":"JungSany","emoji":"🗄️"},"fields":{"slug":"/knowledge/http-method/"}},"next":{"id":"52d2d564-f8fe-5a2d-ae97-d9419baba822","html":"<p><img src=\"https://velog.velcdn.com/images/gomuzom/post/4d78ca3b-d4ee-4723-b55b-6a12d5566e30/image.png\" alt=\"restful 이미지\"></p>\n<h1 id=\"restful이란\" style=\"position:relative;\"><a href=\"#restful%EC%9D%B4%EB%9E%80\" aria-label=\"restful이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>RESTful이란?</strong></h1>\n<p><strong>두 컴퓨터 시스템이 인터넷을 통해 <code class=\"language-text\">정보를 안전하게 교환</code>하기 위해 사용하는 인터페이스이다.</strong></p>\n<p><strong>대부분의 비즈니스 애플리케이션은 다양한 태스크를 수행하기 위해 다른 내부 애플리케이션 및 <a href=\"https://rnfltpgus.github.io/knowledge/3rd-party/\">서드 파티</a> 애플리케이션과 통신해야 하는데, <code class=\"language-text\">RESTful API</code>는 <code class=\"language-text\">안전하고 신뢰</code>할 수 있으며 <code class=\"language-text\">효율적인 소프트웨어 통신 표준</code>을 따르므로 이러한 <code class=\"language-text\">정보 교환을 지원</code>합니다.</strong></p>\n<br/>\n<h2 id=\"restful을-알아가기-전-알아두어야-할-rest란\" style=\"position:relative;\"><a href=\"#restful%EC%9D%84-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-%EC%A0%84-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-rest%EB%9E%80\" aria-label=\"restful을 알아가기 전 알아두어야 할 rest란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful을 알아가기 전 알아두어야 할 <strong>REST</strong>란?</h2>\n<p><strong><code class=\"language-text\">HTTP URI</code>를 통해 자원을 명시하고, <code class=\"language-text\">HTTP Method(POST, GET, PUT, DELETE)</code>를 통해 해당 자원에 대한 CRUD OPERATION을 적용하는 것을 의미한다.</strong></p>\n<p><strong>즉, <code class=\"language-text\">REST</code>는 <code class=\"language-text\">자원 기반의 구조(ROA: Resource Oriented Architecture) 설계의 중심</code>에 Resource가 있고 <code class=\"language-text\">HTTP Method</code>를 통해\nResource를 처리하도록 설계된 <code class=\"language-text\">아키텍쳐</code>를 의미한다.</strong></p>\n<p><strong>웹의 모든 자원에 고유한 ID인 <code class=\"language-text\">HTTP URI</code>를 부여한다.</strong></p>\n<br/>\n<h3 id=\"rest의-구성\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%EA%B5%AC%EC%84%B1\" aria-label=\"rest의 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 구성</h3>\n<p><strong>1. 자원(Resource) - URI</strong></p>\n<ul>\n<li>모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.</li>\n<li>자원을 구별하는 ID는 <code class=\"language-text\">/Developer/id/sany</code>와 같은 <code class=\"language-text\">HTTP URI</code>이다.</li>\n</ul>\n<p><strong>2. 행위 (Verb) - Http Method</strong></p>\n<ul>\n<li>HTTP 프로토콜의 <code class=\"language-text\">Method</code>를 사용한다.</li>\n<li>HTTP 프로토콜은 GET, POST, PUT, DELETE와 같은 메서드를 제공한다.</li>\n</ul>\n<p><strong>3. 표현 (Representation of Resource)</strong></p>\n<ul>\n<li><code class=\"language-text\">Client</code>가 자원의 상태(정보)에 대한 조작을 <code class=\"language-text\">요청(Request)</code>하면 <code class=\"language-text\">Server</code>는 이에 적절한 <code class=\"language-text\">응답(Representation)</code>을 보낸다.</li>\n<li>REST에서 하나의 자원은 JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타낼 수 있다.</li>\n<li>현재는 <code class=\"language-text\">JSON으로 주고 받는 것이 대부분</code>이다.</li>\n</ul>\n<br/>\n<h3 id=\"rest의-특징\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"rest의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 특징</h3>\n<p><strong>1. Server-Client(서버-클라이언트 구조)</strong></p>\n<p><strong>2. Stateless(무상태)</strong></p>\n<p><strong>3. Cacheable(캐시 처리 가능)</strong></p>\n<p><strong>4. Layered System(계층화)</strong></p>\n<p><strong>5. Uniform Interface(인터페이스 일관성)</strong></p>\n<br/>\n<h3 id=\"rest의-장단점\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"rest의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 장단점</h3>\n<h4 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<ul>\n<li><code class=\"language-text\">HTTP 프로토콜의 인프라를 그대로 사용</code>하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없다.</li>\n<li>HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해 준다.</li>\n<li><code class=\"language-text\">HTTP 표준 프로토콜에 따르는</code> 모든 플랫폼에서 <code class=\"language-text\">사용이 가능</code>하다.</li>\n<li>Hypermedia API의 기본을 충실히 지키면서 <code class=\"language-text\">범용성을 보장</code>한다.</li>\n<li>REST API 메시지가 의도하는 바를 명확하게 나타내므로 <code class=\"language-text\">쉽게 파악</code>할 수 있다.</li>\n<li>여러 가지 서비스 디자인에서 생길 수 있는 <code class=\"language-text\">문제를 최소화</code>한다.</li>\n<li>서버와 클라이언트의 <code class=\"language-text\">역할을 명확하게 분리</code>한다.</li>\n</ul>\n<br/>\n<h4 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h4>\n<ul>\n<li>표준이 자체가 존재하지 않아 <code class=\"language-text\">정의가 필요</code>하다.</li>\n<li>HTTP Method <code class=\"language-text\">형태가 제한적</code>이다.</li>\n<li>브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 정보의 값을 처리해야 하므로 <code class=\"language-text\">전문성이 요구</code>된다.</li>\n<li><code class=\"language-text\">구형 브라우저</code>에서 <code class=\"language-text\">호환이 되지 않아</code> 지원해주지 못하는 동작이 많다.(익스폴로어)</li>\n</ul>\n<br/>\n<h2 id=\"restful의-목적\" style=\"position:relative;\"><a href=\"#restful%EC%9D%98-%EB%AA%A9%EC%A0%81\" aria-label=\"restful의 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful의 목적</h2>\n<ul>\n<li>\n<p><strong>이해하기 쉽고 사용하기 쉬운 REST API를 만드는 것이다.</strong></p>\n</li>\n<li>\n<p><strong>RESTful한 API를 구현하는 근본적인 목적은 <code class=\"language-text\">일관적인 컨벤션을 통한 API의 이해도 및 호환성을 높이는 것</code>이니, 성능이 중요한 상황에서는 굳이 RESTful한 API를 구현할 필요는 없다.</strong></p>\n</li>\n</ul>\n<br/>\n<h2 id=\"restful-하지-못한-경우\" style=\"position:relative;\"><a href=\"#restful-%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-label=\"restful 하지 못한 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful 하지 못한 경우</h2>\n<ul>\n<li>Ex1) CRUD 기능을 모두 POST로만 처리하는 API</li>\n<li>Ex2) route에 resource, id 외의 정보가 들어가는 경우(/students/updateName)</li>\n</ul>\n<br/>\n<h2 id=\"restful-api를-사용하면-어떤-이점이-있나\" style=\"position:relative;\"><a href=\"#restful-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%9D%B4%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%82%98\" aria-label=\"restful api를 사용하면 어떤 이점이 있나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API를 사용하면 어떤 이점이 있나?</h2>\n<h3 id=\"확장성\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장성</h3>\n<p>REST API를 구현하는 시스템은 REST가 클라이언트-서버 <code class=\"language-text\">상호 작용</code>을 <code class=\"language-text\">최적화</code>하기 때문에 <code class=\"language-text\">효율적으로 크기 조정할 수 있다.</code></p>\n<p><code class=\"language-text\">무상태</code>는 서버가 과거 클라이언트 요청 정보를 유지할 필요가 없기 때문에 서버 로드를 제거한다.</p>\n<p>잘 관리된 <code class=\"language-text\">캐싱</code>은 일부 클라이언트-서버 상호 작용을 부분적으로 또는 완전히 제거한다. 이러한 모든 기능은 성능을 저하시키는 <code class=\"language-text\">통신 병목 현상을 일으키지 않</code>으면서 <code class=\"language-text\">확장성을 지원</code>한다.</p>\n<br/>\n<h3 id=\"유연성\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\" aria-label=\"유연성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유연성</h3>\n<p>RESTful 웹 서비스는 완전한 클라이언트-서버 분리를 지원한다.</p>\n<p>각 부분이 독립적으로 발전할 수 있도록 다양한 서버 <code class=\"language-text\">구성 요소</code>를 <code class=\"language-text\">단순화</code>하고 <code class=\"language-text\">분리</code>한다.</p>\n<p>서버 애플리케이션의 플랫폼 또는 기술 변경은 클라이언트 애플리케이션에 영향을 주지 않는다.</p>\n<p>애플리케이션 함수를 <code class=\"language-text\">계층화</code>하는 기능은 <code class=\"language-text\">유연성을 더욱 향상</code>시킨다.(Ex1 개발자는 애플리케이션 로직을 다시 작성하지 않고도 데이터베이스 계층을 변경할 수 있다.)</p>\n<br/>\n<h3 id=\"독립성\" style=\"position:relative;\"><a href=\"#%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-label=\"독립성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>독립성</h3>\n<p>REST API는 사용되는 기술과 독립적이다.</p>\n<p>API 설계에 영향을 주지 않고 다양한 프로그래밍 언어로 클라이언트 및 서버 애플리케이션을 모두 작성할 수 있다.</p>\n<p>또한 통신에 영향을 주지 않고 양쪽의 기본 기술을 변경할 수 있다.</p>\n<br/>\n<h2 id=\"rest-api-설계규칙\" style=\"position:relative;\"><a href=\"#rest-api-%EC%84%A4%EA%B3%84%EA%B7%9C%EC%B9%99\" aria-label=\"rest api 설계규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API 설계규칙</h2>\n<ol>\n<li>URI는 동사보다는 명사를, 대문자보다는 소문자를 사용하여야 한다.</li>\n<li>슬래시( / )로 계층 관계를 표현한다.</li>\n<li>URI의 마지막에는 슬래시( / )를 붙이지 않는다.</li>\n<li>언더바( _ ) 대신 하이폰( - )을 사용한다.</li>\n<li>가독성이 떨어지는 경우 하이픈( - )을 사용한다.</li>\n<li>대문자와 소문자로 URI를 정의하면 기억하기 어려우며 잘못 적을 가능성이 높아진다.</li>\n<li>파일확장자는 URI에 포함하지 않는다</li>\n</ol>\n<br/>\n<h2 id=\"끝말\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EB%A7%90\" aria-label=\"끝말 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝말</h2>\n<p><strong>REST API 설계규칙을 따라 RESTful한 API를 만들수 있도록 추가적으로 실습을 진행해 보는 글을 작성해 보아야 겠다.</strong></p>\n<br/>\n<h2 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h2>\n<p><strong>API</strong>: 다른 소프트웨어 시스템과 통신하기 위해 따라야 하는 규칙</p>\n<p><strong>REST(Representational State Transfer)</strong>: API 작동 방식에 대한 조건을 부과하는 소프트웨어 아키텍처 -> <code class=\"language-text\">REST API</code>와 <code class=\"language-text\">RESTful API</code>는 같은 의미로 사용할 수 있다.</p>\n<p><strong>CRUD Operation</strong>: CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말로 REST에서의 CRUD Operation 동작 예시는 다음과 같다.</p>\n<ul>\n<li>Create : 데이터 생성(POST)</li>\n<li>Read : 데이터 조회(GET)</li>\n<li>Update : 데이터 수정(PUT, PATCH)</li>\n<li>Delete : 데이터 삭제(DELETE)</li>\n<li>HEAD : header 정보 조회(HEAD)</li>\n</ul>\n<p><strong>로드밸런싱</strong>: 서버가 처리해야 할 업무 혹은 요청(Load)을 여러 대의 서버로 나누어(Balancing) 처리하는 것을 의미</p>\n<p><a href=\"https://rnfltpgus.github.io/knowledge/proxy/\"><strong>PROXY 서버</strong></a>: 보안상의 문제로 직접 통신 할 수 없을때 중계 해주는 서버</p>\n<p><strong>게이트웨이</strong>: 한 네트워크(segment)에서 다른 네트워크로 이동하기 위하여 거쳐야 하는 지점, 서로 다른 네트워크(기종이 다른 네트워크)를 연결</p>\n<br/>\n<h2 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h2>\n<p><a href=\"https://aws.amazon.com/ko/what-is/restful-api/\">RESTful API란 무엇입니까?</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\">Day1, 2-2. 그런 REST API로 괜찮은가</a></p>\n<p><a href=\"https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html\">[Network] REST란? REST API란? RESTful이란?</a></p>\n<p><a href=\"https://velog.io/@gomuzom/RESTful-Api\">RESTful Api란</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#restful%EC%9D%84-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-%EC%A0%84-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-rest%EB%9E%80\">RESTful을 알아가기 전 알아두어야 할 <strong>REST</strong>란?</a></p>\n<ul>\n<li>\n<p><a href=\"#rest%EC%9D%98-%EA%B5%AC%EC%84%B1\">REST의 구성</a></p>\n</li>\n<li>\n<p><a href=\"#rest%EC%9D%98-%ED%8A%B9%EC%A7%95\">REST의 특징</a></p>\n</li>\n<li>\n<p><a href=\"#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">REST의 장단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#restful%EC%9D%98-%EB%AA%A9%EC%A0%81\">RESTful의 목적</a></p>\n</li>\n<li>\n<p><a href=\"#restful-%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%BD%EC%9A%B0\">RESTful 하지 못한 경우</a></p>\n</li>\n<li>\n<p><a href=\"#restful-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%9D%B4%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%82%98\">RESTful API를 사용하면 어떤 이점이 있나?</a></p>\n<ul>\n<li><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\">확장성</a></li>\n<li><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\">유연성</a></li>\n<li><a href=\"#%EB%8F%85%EB%A6%BD%EC%84%B1\">독립성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#rest-api-%EC%84%A4%EA%B3%84%EA%B7%9C%EC%B9%99\">REST API 설계규칙</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%81%9D%EB%A7%90\">끝말</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 24, 2022","title":"RESTful API란?","categories":"개발지식","author":"JungSany","emoji":"🪄"},"fields":{"slug":"/knowledge/restful-api/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/knowledge/http-method/","nextSlug":"/knowledge/restful-api/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}