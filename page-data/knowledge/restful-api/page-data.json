{"componentChunkName":"component---src-templates-blog-template-js","path":"/knowledge/restful-api/","result":{"data":{"cur":{"id":"52d2d564-f8fe-5a2d-ae97-d9419baba822","html":"<p><img src=\"https://velog.velcdn.com/images/gomuzom/post/4d78ca3b-d4ee-4723-b55b-6a12d5566e30/image.png\" alt=\"restful 이미지\"></p>\n<h1 id=\"restful이란\" style=\"position:relative;\"><a href=\"#restful%EC%9D%B4%EB%9E%80\" aria-label=\"restful이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>RESTful이란?</strong></h1>\n<p><strong>두 컴퓨터 시스템이 인터넷을 통해 <code class=\"language-text\">정보를 안전하게 교환</code>하기 위해 사용하는 인터페이스이다.</strong></p>\n<p><strong>대부분의 비즈니스 애플리케이션은 다양한 태스크를 수행하기 위해 다른 내부 애플리케이션 및 <a href=\"https://rnfltpgus.github.io/knowledge/3rd-party/\">서드 파티</a> 애플리케이션과 통신해야 하는데, <code class=\"language-text\">RESTful API</code>는 <code class=\"language-text\">안전하고 신뢰</code>할 수 있으며 <code class=\"language-text\">효율적인 소프트웨어 통신 표준</code>을 따르므로 이러한 <code class=\"language-text\">정보 교환을 지원</code>합니다.</strong></p>\n<br/>\n<h2 id=\"restful을-알아가기-전-알아두어야-할-rest란\" style=\"position:relative;\"><a href=\"#restful%EC%9D%84-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-%EC%A0%84-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-rest%EB%9E%80\" aria-label=\"restful을 알아가기 전 알아두어야 할 rest란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful을 알아가기 전 알아두어야 할 <strong>REST</strong>란?</h2>\n<p><strong><code class=\"language-text\">HTTP URI</code>를 통해 자원을 명시하고, <code class=\"language-text\">HTTP Method(POST, GET, PUT, DELETE)</code>를 통해 해당 자원에 대한 CRUD OPERATION을 적용하는 것을 의미한다.</strong></p>\n<p><strong>즉, <code class=\"language-text\">REST</code>는 <code class=\"language-text\">자원 기반의 구조(ROA: Resource Oriented Architecture) 설계의 중심</code>에 Resource가 있고 <code class=\"language-text\">HTTP Method</code>를 통해\nResource를 처리하도록 설계된 <code class=\"language-text\">아키텍쳐</code>를 의미한다.</strong></p>\n<p><strong>웹의 모든 자원에 고유한 ID인 <code class=\"language-text\">HTTP URI</code>를 부여한다.</strong></p>\n<br/>\n<h3 id=\"rest의-구성\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%EA%B5%AC%EC%84%B1\" aria-label=\"rest의 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 구성</h3>\n<p><strong>1. 자원(Resource) - URI</strong></p>\n<ul>\n<li>모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.</li>\n<li>자원을 구별하는 ID는 <code class=\"language-text\">/Developer/id/sany</code>와 같은 <code class=\"language-text\">HTTP URI</code>이다.</li>\n</ul>\n<p><strong>2. 행위 (Verb) - Http Method</strong></p>\n<ul>\n<li>HTTP 프로토콜의 Method를 사용한다.</li>\n<li>HTTP 프로토콜은 GET, POST, PUT, DELETE와 같은 메서드를 제공한다.</li>\n</ul>\n<p><strong>3. 표현 (Representation of Resource)</strong></p>\n<ul>\n<li><code class=\"language-text\">Client</code>가 자원의 상태(정보)에 대한 조작을 <code class=\"language-text\">요청(Request)</code>하면 <code class=\"language-text\">Server</code>는 이에 적절한 <code class=\"language-text\">응답(Representation)</code>을 보낸다.</li>\n<li>REST에서 하나의 자원은 JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타낼 수 있다.</li>\n<li>현재는 <code class=\"language-text\">JSON으로 주고 받는 것이 대부분</code>이다.</li>\n</ul>\n<br/>\n<h3 id=\"rest의-특징\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"rest의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 특징</h3>\n<p><strong>1. Server-Client(서버-클라이언트 구조)</strong></p>\n<p><strong>2. Stateless(무상태)</strong></p>\n<p><strong>3. Cacheable(캐시 처리 가능)</strong></p>\n<p><strong>4. Layered System(계층화)</strong></p>\n<p><strong>5. Uniform Interface(인터페이스 일관성)</strong></p>\n<br/>\n<h3 id=\"rest의-장단점\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"rest의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 장단점</h3>\n<h4 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<ul>\n<li><code class=\"language-text\">HTTP 프로토콜의 인프라를 그대로 사용</code>하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없다.</li>\n<li>HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해 준다.</li>\n<li><code class=\"language-text\">HTTP 표준 프로토콜에 따르는</code> 모든 플랫폼에서 <code class=\"language-text\">사용이 가능</code>하다.</li>\n<li>Hypermedia API의 기본을 충실히 지키면서 <code class=\"language-text\">범용성을 보장</code>한다.</li>\n<li>REST API 메시지가 의도하는 바를 명확하게 나타내므로 <code class=\"language-text\">쉽게 파악</code>할 수 있다.</li>\n<li>여러 가지 서비스 디자인에서 생길 수 있는 <code class=\"language-text\">문제를 최소화</code>한다.</li>\n<li>서버와 클라이언트의 <code class=\"language-text\">역할을 명확하게 분리</code>한다.</li>\n</ul>\n<br/>\n<h4 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h4>\n<ul>\n<li>표준이 자체가 존재하지 않아 <code class=\"language-text\">정의가 필요</code>하다.</li>\n<li>HTTP Method <code class=\"language-text\">형태가 제한적</code>이다.</li>\n<li>브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 정보의 값을 처리해야 하므로 <code class=\"language-text\">전문성이 요구</code>된다.</li>\n<li><code class=\"language-text\">구형 브라우저</code>에서 <code class=\"language-text\">호환이 되지 않아</code> 지원해주지 못하는 동작이 많다.(익스폴로어)</li>\n</ul>\n<br/>\n<h2 id=\"restful의-목적\" style=\"position:relative;\"><a href=\"#restful%EC%9D%98-%EB%AA%A9%EC%A0%81\" aria-label=\"restful의 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful의 목적</h2>\n<ul>\n<li>\n<p><strong>이해하기 쉽고 사용하기 쉬운 REST API를 만드는 것이다.</strong></p>\n</li>\n<li>\n<p><strong>RESTful한 API를 구현하는 근본적인 목적은 <code class=\"language-text\">일관적인 컨벤션을 통한 API의 이해도 및 호환성을 높이는 것</code>이니, 성능이 중요한 상황에서는 굳이 RESTful한 API를 구현할 필요는 없다.</strong></p>\n</li>\n</ul>\n<br/>\n<h2 id=\"restful-하지-못한-경우\" style=\"position:relative;\"><a href=\"#restful-%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-label=\"restful 하지 못한 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful 하지 못한 경우</h2>\n<ul>\n<li>Ex1) CRUD 기능을 모두 POST로만 처리하는 API</li>\n<li>Ex2) route에 resource, id 외의 정보가 들어가는 경우(/students/updateName)</li>\n</ul>\n<br/>\n<h2 id=\"restful-api를-사용하면-어떤-이점이-있나\" style=\"position:relative;\"><a href=\"#restful-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%9D%B4%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%82%98\" aria-label=\"restful api를 사용하면 어떤 이점이 있나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API를 사용하면 어떤 이점이 있나?</h2>\n<h3 id=\"확장성\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장성</h3>\n<p>REST API를 구현하는 시스템은 REST가 클라이언트-서버 <code class=\"language-text\">상호 작용</code>을 <code class=\"language-text\">최적화</code>하기 때문에 <code class=\"language-text\">효율적으로 크기 조정할 수 있다.</code></p>\n<p><code class=\"language-text\">무상태</code>는 서버가 과거 클라이언트 요청 정보를 유지할 필요가 없기 때문에 서버 로드를 제거한다.</p>\n<p>잘 관리된 <code class=\"language-text\">캐싱</code>은 일부 클라이언트-서버 상호 작용을 부분적으로 또는 완전히 제거한다. 이러한 모든 기능은 성능을 저하시키는 <code class=\"language-text\">통신 병목 현상을 일으키지 않</code>으면서 <code class=\"language-text\">확장성을 지원</code>한다.</p>\n<br/>\n<h3 id=\"유연성\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\" aria-label=\"유연성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유연성</h3>\n<p>RESTful 웹 서비스는 완전한 클라이언트-서버 분리를 지원한다.</p>\n<p>각 부분이 독립적으로 발전할 수 있도록 다양한 서버 <code class=\"language-text\">구성 요소</code>를 <code class=\"language-text\">단순화</code>하고 <code class=\"language-text\">분리</code>한다.</p>\n<p>서버 애플리케이션의 플랫폼 또는 기술 변경은 클라이언트 애플리케이션에 영향을 주지 않는다.</p>\n<p>애플리케이션 함수를 <code class=\"language-text\">계층화</code>하는 기능은 <code class=\"language-text\">유연성을 더욱 향상</code>시킨다.(Ex1 개발자는 애플리케이션 로직을 다시 작성하지 않고도 데이터베이스 계층을 변경할 수 있다.)</p>\n<br/>\n<h3 id=\"독립성\" style=\"position:relative;\"><a href=\"#%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-label=\"독립성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>독립성</h3>\n<p>REST API는 사용되는 기술과 독립적이다.</p>\n<p>API 설계에 영향을 주지 않고 다양한 프로그래밍 언어로 클라이언트 및 서버 애플리케이션을 모두 작성할 수 있다.</p>\n<p>또한 통신에 영향을 주지 않고 양쪽의 기본 기술을 변경할 수 있다.</p>\n<br/>\n<h2 id=\"rest-api-설계규칙\" style=\"position:relative;\"><a href=\"#rest-api-%EC%84%A4%EA%B3%84%EA%B7%9C%EC%B9%99\" aria-label=\"rest api 설계규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API 설계규칙</h2>\n<ol>\n<li>URI는 동사보다는 명사를, 대문자보다는 소문자를 사용하여야 한다.</li>\n<li>슬래시( / )로 계층 관계를 표현한다.</li>\n<li>URI의 마지막에는 슬래시( / )를 붙이지 않는다.</li>\n<li>언더바( _ ) 대신 하이폰( - )을 사용한다.</li>\n<li>가독성이 떨어지는 경우 하이픈( - )을 사용한다.</li>\n<li>대문자와 소문자로 URI를 정의하면 기억하기 어려우며 잘못 적을 가능성이 높아진다.</li>\n<li>파일확장자는 URI에 포함하지 않는다</li>\n</ol>\n<br/>\n<h2 id=\"끝말\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EB%A7%90\" aria-label=\"끝말 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝말</h2>\n<p><strong>REST API 설계규칙을 따라 RESTful한 API를 만들수 있도록 추가적으로 실습을 진행해 보는 글을 작성해 보아야 겠다.</strong></p>\n<br/>\n<h2 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h2>\n<p><strong>API</strong>: 다른 소프트웨어 시스템과 통신하기 위해 따라야 하는 규칙</p>\n<p><strong>REST(Representational State Transfer)</strong>: API 작동 방식에 대한 조건을 부과하는 소프트웨어 아키텍처 -> <code class=\"language-text\">REST API</code>와 <code class=\"language-text\">RESTful API</code>는 같은 의미로 사용할 수 있다.</p>\n<p><strong>CRUD Operation</strong>: CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말로 REST에서의 CRUD Operation 동작 예시는 다음과 같다.</p>\n<ul>\n<li>Create : 데이터 생성(POST)</li>\n<li>Read : 데이터 조회(GET)</li>\n<li>Update : 데이터 수정(PUT, PATCH)</li>\n<li>Delete : 데이터 삭제(DELETE)</li>\n<li>HEAD : header 정보 조회(HEAD)</li>\n</ul>\n<p><strong>로드밸런싱</strong>: 서버가 처리해야 할 업무 혹은 요청(Load)을 여러 대의 서버로 나누어(Balancing) 처리하는 것을 의미</p>\n<p><a href=\"https://rnfltpgus.github.io/knowledge/proxy/\"><strong>PROXY 서버</strong></a>: 보안상의 문제로 직접 통신 할 수 없을때 중계 해주는 서버</p>\n<p><strong>게이트웨이</strong>: 한 네트워크(segment)에서 다른 네트워크로 이동하기 위하여 거쳐야 하는 지점, 서로 다른 네트워크(기종이 다른 네트워크)를 연결</p>\n<br/>\n<h2 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h2>\n<p><a href=\"https://aws.amazon.com/ko/what-is/restful-api/\">RESTful API란 무엇입니까?</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\">Day1, 2-2. 그런 REST API로 괜찮은가</a></p>\n<p><a href=\"https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html\">[Network] REST란? REST API란? RESTful이란?</a></p>\n<p><a href=\"https://velog.io/@gomuzom/RESTful-Api\">RESTful Api란</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#restful%EC%9D%84-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-%EC%A0%84-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-rest%EB%9E%80\">RESTful을 알아가기 전 알아두어야 할 <strong>REST</strong>란?</a></p>\n<ul>\n<li>\n<p><a href=\"#rest%EC%9D%98-%EA%B5%AC%EC%84%B1\">REST의 구성</a></p>\n</li>\n<li>\n<p><a href=\"#rest%EC%9D%98-%ED%8A%B9%EC%A7%95\">REST의 특징</a></p>\n</li>\n<li>\n<p><a href=\"#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">REST의 장단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#restful%EC%9D%98-%EB%AA%A9%EC%A0%81\">RESTful의 목적</a></p>\n</li>\n<li>\n<p><a href=\"#restful-%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%BD%EC%9A%B0\">RESTful 하지 못한 경우</a></p>\n</li>\n<li>\n<p><a href=\"#restful-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%9D%B4%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%82%98\">RESTful API를 사용하면 어떤 이점이 있나?</a></p>\n<ul>\n<li><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\">확장성</a></li>\n<li><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\">유연성</a></li>\n<li><a href=\"#%EB%8F%85%EB%A6%BD%EC%84%B1\">독립성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#rest-api-%EC%84%A4%EA%B3%84%EA%B7%9C%EC%B9%99\">REST API 설계규칙</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%81%9D%EB%A7%90\">끝말</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</div>","excerpt":"restful 이미지 RESTful이란? 두 컴퓨터 시스템이 인터넷을 통해 하기 위해 사용하는 인터페이스이다. 대부분의 비즈니스 애플리케이션은 다양한 태스크를 수행하기 위해 다른 내부 애플리케이션 및 서드 파티 애플리케이션과 통신해야 하는데, 는 할 수 있으며 을 따르므로 이러한 합니다. RESTful을 알아가기 전 알아두어야 할 REST란? 를 통해 자원을 명시하고, 를 통해 해당 자원에 대한 CRUD OPERATION을 적용하는 것을 의미한다. 즉, 는 에 Resource가 있고 를 통해\nResource를 처리하도록 설계된 를 의미한다. 웹의 모든 자원에 고유한 ID인 를 부여한다. REST의 구성 1. 자원(Resource) - URI 모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다. 자원을 구별하는 ID는 와 같은 이다. 2. 행위 (Verb) - Http Method HTTP 프로토콜의 Method를 사용한다. HTTP 프로토콜은 GET, POST,…","frontmatter":{"date":"December 24, 2022","title":"RESTful API란?","categories":"개발지식","author":"JungSany","emoji":"🪄"},"fields":{"slug":"/knowledge/restful-api/"}},"next":{"id":"37154387-4de6-52eb-b31d-745c71324f9b","html":"<h2 id=\"이벤트-위임이란\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84%EC%9D%B4%EB%9E%80\" aria-label=\"이벤트 위임이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 위임이란?</h2>\n<p><strong>상위 요소에서 하위 요소의 이벤트를 제어하는 방식</strong></p>\n<ul>\n<li><code class=\"language-text\">캡처링과 버블링</code>을 <code class=\"language-text\">활용</code>하면 강력한 이벤트 핸들링 패턴인 <code class=\"language-text\">이벤트 위임(event delegation)</code>을 <code class=\"language-text\">구현할 수 있다.</code></li>\n<li><code class=\"language-text\">비슷한 방식의 여러 하위 요소를 다루어야할 때</code> 이벤트 위임을 이용해 요소마다 핸들러를 할당하지 않고, <code class=\"language-text\">요소의 공통 조상(부모)</code>에 이벤트 핸들러를 <code class=\"language-text\">단 하나만 할당해 여러요소를 다룰수 있다.</code></li>\n<li>공통 조상에 할당한 핸들러에서 <code class=\"language-text\">event.target을 이용</code>하면 <code class=\"language-text\">실제 어디서 이벤트가 발생했는지 알 수 있다.</code></li>\n<li>사용자의 인터랙션을 통해 추가되는, 아직 만들어지지 않은 요소에 이벤트 핸들러를 할당해야 하는 경우 사용한다.</li>\n</ul>\n<br/>\n<h2 id=\"장점과-단점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90\" aria-label=\"장점과 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점과 단점</h2>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>많은 핸들러를 할당하지 않아도 되기 때문에 초기화가 단순해지고 메모리가 절약된다.</li>\n<li>요소를 추가하거나 제거할 때 해당 요소에 할당된 핸들러를 추가하거나 제거할 필요가 없기 때문에 코드가 짧아진다.</li>\n<li><code class=\"language-text\">innerHTML</code>이나 유사한 기능을 하는 스크립트로 요소 덩어리를 더하거나 뺄 수 있기 때문에 DOM 수정이 쉬워진다.</li>\n</ul>\n<br/>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>이벤트 위임을 사용하려면 이벤트가 반드시 버블링 되어야 합니다. 하지만 몇몇 이벤트는 버블링 되지 않습니다. 그리고 낮은 레벨에 할당한 핸들러엔 <code class=\"language-text\">event.stopPropagation()</code>를 쓸 수 없다.</li>\n<li>컨테이너 수준에 할당된 핸들러가 응답할 필요가 있는 이벤트이든 아니든 상관없이 모든 하위 컨테이너에서 발생하는 이벤트에 응답해야 하므로 CPU 작업 부하가 늘어날 수 있다. 그런데 이런 부하는 무시할만한 수준이므로 실제로는 잘 고려하지 않는다.</li>\n</ul>\n<br/>\n<h2 id=\"버블링bubbling과-캡처링capturing\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling%EA%B3%BC-%EC%BA%A1%EC%B2%98%EB%A7%81capturing\" aria-label=\"버블링bubbling과 캡처링capturing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블링(Bubbling)과 캡처링(Capturing)</h2>\n<p><img src=\"https://ko.javascript.info/article/bubbling-and-capturing/eventflow.svg\" alt=\"버블링과 캡처링\"></p>\n<h3 id=\"버블링bubbling\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling\" aria-label=\"버블링bubbling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블링(Bubbling)</h3>\n<ul>\n<li>특정 화면 요소에서 이벤트가 발생했을 때, 해당 <strong>이벤트가 더 상위의 화면 요소들로 전달</strong>되는 특징</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.html</span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"three\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndivs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">div</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> logEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>결과 : three → two → one</strong> 순으로 콘솔이 찍힘</p>\n<br/>\n<h3 id=\"캡쳐링capturing\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%B3%90%EB%A7%81capturing\" aria-label=\"캡쳐링capturing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡쳐링(Capturing)</h3>\n<ul>\n<li>버블링과 반대로 <strong>이벤트가 상위에서 하위 방향으로 전달</strong>되는 특징</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.html</span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"three\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndivs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">div</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> logEvent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">capture</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// -> 캡쳐링 (default 값은 false)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>결과 : one → two → three</strong> 순으로 콘솔이 찍힘</p>\n<br/>\n<h3 id=\"각-핸들러가-접근할-수-있는-event-객체의-프로퍼티\" style=\"position:relative;\"><a href=\"#%EA%B0%81-%ED%95%B8%EB%93%A4%EB%9F%AC%EA%B0%80-%EC%A0%91%EA%B7%BC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-event-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"각 핸들러가 접근할 수 있는 event 객체의 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>각 핸들러가 접근할 수 있는 Event 객체의 프로퍼티</h3>\n<ul>\n<li>event.target – 이벤트가 발생한 가장 안쪽의 요소</li>\n<li>event.currentTarget (=this) – 이벤트를 핸들링 하는 현재 요소 (핸들러가 실제 할당된 요소)</li>\n<li>event.eventPhase – 현재 이벤트 흐름 단계(캡처링=1, 타깃=2, 버블링=3)</li>\n</ul>\n<br/>\n<h3 id=\"적용-경험\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9-%EA%B2%BD%ED%97%98\" aria-label=\"적용 경험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 경험</h3>\n<ul>\n<li>간단한 적용 경험으로 TODO 리스트를 만들 때, 새로 리스트를 만들면 클릭 이벤트가 발생하지 않아 최상위 태그인 ul 태그에 이벤트 리스너를 적용하여 새로운 리스트(하위)에서 발생한 클릭 이벤트를 감지(버블링)할 수 있다.</li>\n</ul>\n<br/>\n<h3 id=\"stoppropagation와-eventpreventdefault의-차이\" style=\"position:relative;\"><a href=\"#stoppropagation%EC%99%80-eventpreventdefault%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"stoppropagation와 eventpreventdefault의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stopPropagation()와 event.preventDefault()의 차이</h3>\n<p>두개의 이벤트 메소드는 <code class=\"language-text\">이벤트 관련 동작에서 많이 사용</code>되는 코드이며, 알 필요가 있다.</p>\n<br/>\n<h4 id=\"eventstoppropagation\" style=\"position:relative;\"><a href=\"#eventstoppropagation\" aria-label=\"eventstoppropagation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event.stopPropagation()</h4>\n<ul>\n<li>복잡한 코드에서는 이벤트 전달 방식을 파악하기 다소 어려울 수 있다.</li>\n<li>이럴 경우, <code class=\"language-text\">event.stopPropagation()</code>을 사용하면 해당 이벤트가 <strong>상위 엘리먼트에 전달되지 않게 전달되는 것을 막는다.</strong></li>\n<li><strong>버블링</strong> → 클릭한 요소의 이벤트만 발생시키고 상위 요소로 영향 ❌</li>\n<li><strong>캡쳐링</strong> → 클릭한 요소의 최상위 요소만 이벤트를 발생시키고 하위 요소로 영향 ❌</li>\n</ul>\n<br/>\n<h4 id=\"eventpreventdefault\" style=\"position:relative;\"><a href=\"#eventpreventdefault\" aria-label=\"eventpreventdefault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event.preventDefault()</h4>\n<ul>\n<li>html에서 a 태그나 submit 태그는 고유의 동작이 있다. 페이지를 이동시킨다거나 form 안에 있는 input 등을 전송한다던가 그러한 동작이 있는데, <code class=\"language-text\">event.preventDefault()</code>는 그런 고유의 동작이 있는 태크의 <strong>고유 동작을 중단시킨다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.javascript.info/event-delegation\">이벤트 위임</a></p>\n<p><a href=\"https://ko.javascript.info/bubbling-and-capturing\">버블링과 캡처링</a></p>\n<p><a href=\"https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/\">캡틴판교 - 이벤트 버블링, 이벤트 캡처 그리고 이벤트 위임까지</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84%EC%9D%B4%EB%9E%80\">이벤트 위임이란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90\">장점과 단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling%EA%B3%BC-%EC%BA%A1%EC%B2%98%EB%A7%81capturing\">버블링(Bubbling)과 캡처링(Capturing)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling\">버블링(Bubbling)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BA%A1%EC%B3%90%EB%A7%81capturing\">캡쳐링(Capturing)</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%81-%ED%95%B8%EB%93%A4%EB%9F%AC%EA%B0%80-%EC%A0%91%EA%B7%BC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-event-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">각 핸들러가 접근할 수 있는 Event 객체의 프로퍼티</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%81%EC%9A%A9-%EA%B2%BD%ED%97%98\">적용 경험</a></p>\n</li>\n<li>\n<p><a href=\"#stoppropagation%EC%99%80-eventpreventdefault%EC%9D%98-%EC%B0%A8%EC%9D%B4\">stopPropagation()와 event.preventDefault()의 차이</a></p>\n<ul>\n<li><a href=\"#eventstoppropagation\">event.stopPropagation()</a></li>\n<li><a href=\"#eventpreventdefault\">event.preventDefault()</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 24, 2022","title":"이벤트 위임(버블링, 캡쳐링의 차이)이 무엇인지, 적용 경험 & 적용 이유","categories":"React JavaScript 개발지식","author":"JungSany","emoji":"🏂"},"fields":{"slug":"/javascript/event-delegation/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/knowledge/restful-api/","nextSlug":"/javascript/event-delegation/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}