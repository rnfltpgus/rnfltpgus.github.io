{"componentChunkName":"component---src-templates-blog-template-js","path":"/knowledge/require-import/","result":{"data":{"cur":{"id":"aa086476-e7d3-57b3-96c4-8998d1a4da1d","html":"<h2 id=\"둘다-외부의-파일이나-라이브러리의-코드를-불러온다는-목적을-가지고-있다\" style=\"position:relative;\"><a href=\"#%EB%91%98%EB%8B%A4-%EC%99%B8%EB%B6%80%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%B4%EB%82%98-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9D%98-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%B6%88%EB%9F%AC%EC%98%A8%EB%8B%A4%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EB%8B%A4\" aria-label=\"둘다 외부의 파일이나 라이브러리의 코드를 불러온다는 목적을 가지고 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>둘다 외부의 파일이나 라이브러리의 코드를 불러온다는 목적을 가지고 있다.</h2>\n<br/>\n<h3 id=\"require--exports\" style=\"position:relative;\"><a href=\"#require--exports\" aria-label=\"require  exports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>require / exports</h3>\n<ul>\n<li><code class=\"language-text\">NodeJS</code>에서 사용되고 있는 <code class=\"language-text\">CommonJS</code> 키워드이고 Ruby 언어 스타일과 비슷하다고 볼수 있다.</li>\n<li>모듈을 내보낼때는 ES6처럼 명시적으로 선언하는 것이 아니라 특정 변수나 그 변수의 속성으로 <code class=\"language-text\">내보낼 객체를 세팅</code>해 줘야 한다.</li>\n<li>특히, 유사해 보이는 export 변수와 module.exports 변수를 상황에 맞게 잘 사용해야 한다.</li>\n<li>기본적으로 2가지 규칙만 기억하면 된다.\n<ul>\n<li>여러개의 객체를 내보낼 경우 → <code class=\"language-text\">export.변수</code> 의 개별 속성으로 할당</li>\n<li>딱 하나의 객체를 내보낼 경우 → <code class=\"language-text\">module.exports = 객체</code> 자체에 할당</li>\n</ul>\n</li>\n<li>노드 프로젝트에서 import를 사용하기 위해서는 <code class=\"language-text\">JSON 속성에 \"type\": \"module\"</code>\n 을 추가해주면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./module.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"import--export\" style=\"position:relative;\"><a href=\"#import--export\" aria-label=\"import  export permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>import / export</h3>\n<ul>\n<li><code class=\"language-text\">ES6(ES2015)</code>에서 새롭게 도입된 키워드로서 Java나 Python 언어 방식과 비슷하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> name <span class=\"token keyword\">from</span> <span class=\"token string\">'./module.js'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"es6-와-commonjs-의-export내보내기-차이점\" style=\"position:relative;\"><a href=\"#es6-%EC%99%80-commonjs-%EC%9D%98-export%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"es6 와 commonjs 의 export내보내기 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>ES6 와 CommonJS 의 export(내보내기) 차이점</strong></h3>\n<ul>\n<li>CommonJS와 ES6라는 모듈 시스템에서는 <code class=\"language-text\">exports</code> 객체라는 개념이 존재한다.</li>\n<li><code class=\"language-text\">exports</code>는 모듈로부터 내보내지는 데이터들을 담고 있는 하나의 객체이다.</li>\n<li><code class=\"language-text\">NodeJS</code>프로젝트를 진행할때 <code class=\"language-text\">module.exports =</code>라는 모듈 내보내기 구문을 사용했을 것이다.</li>\n<li><code class=\"language-text\">ES6의 export default</code> 구문이 CommonJS의 module.exports 구문 동작을 대체하기 위한 문법이라고 보면 된다.</li>\n</ul>\n<br/>\n<h3 id=\"require와-import의-주요-차이점\" style=\"position:relative;\"><a href=\"#require%EC%99%80-import%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"require와 import의 주요 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>require와 import의 주요 차이점</h3>\n<ul>\n<li><code class=\"language-text\">require()</code>는 CommonJS를 사용하는 node.js문이지만 <code class=\"language-text\">import()</code>는 ES6에서만 사용한다.</li>\n<li><code class=\"language-text\">require()</code>는 파일 (어휘가 아님)에 들어있는 곳에 남아 있으며 <code class=\"language-text\">import()</code>는 항상 맨 위로 이동한다.</li>\n<li><code class=\"language-text\">require()</code>는 프로그램의 어느 지점에서나 호출 할 수 있지만 <code class=\"language-text\">import()</code>는 <code class=\"language-text\">파일의 시작 부분에서만</code> 실행할 수 있다. (그렇지만 import 전용 비동기 문법으로 파일 중간에 모듈 불러오기를 할 수 있다.)</li>\n<li>하나의 프로그램에서 두 키워드를 동시에 사용할 수 없다.</li>\n<li>일반적으로 <code class=\"language-text\">import()</code>는 사용자가 <code class=\"language-text\">필요한 모듈 부분 만 선택</code>하고 로드 할 수 있기 때문에 더 선호된다. 또한 <code class=\"language-text\">require()</code>보다 성능이 우수하며 메모리를 절약한다.</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://inpa.tistory.com/entry/NODE-%F0%9F%93%9A-require-%E2%9A%94%EF%B8%8F-import-CommonJs%EC%99%80-ES6-%EC%B0%A8%EC%9D%B4-1\">[NODE] 📚 require vs import 문법 비교 (CommonJS vs ES6)</a></p>\n<p><a href=\"https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-import-export-%EC%A0%95%EB%A6%AC?category=889099#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80(HTML)%EC%97%90%EC%84%9C_%EB%AA%A8%EB%93%88_%EC%82%AC%EC%9A%A9_%ED%95%98%EA%B8%B0\">[JS] 📚 모듈 사용하기 import / export 완벽 💯 정리</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%91%98%EB%8B%A4-%EC%99%B8%EB%B6%80%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%B4%EB%82%98-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9D%98-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%B6%88%EB%9F%AC%EC%98%A8%EB%8B%A4%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EB%8B%A4\">둘다 외부의 파일이나 라이브러리의 코드를 불러온다는 목적을 가지고 있다.</a></p>\n<ul>\n<li><a href=\"#require--exports\">require / exports</a></li>\n<li><a href=\"#import--export\">import / export</a></li>\n<li><a href=\"#es6-%EC%99%80-commonjs-%EC%9D%98-export%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><strong>ES6 와 CommonJS 의 export(내보내기) 차이점</strong></a></li>\n<li><a href=\"#require%EC%99%80-import%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%B0%A8%EC%9D%B4%EC%A0%90\">require와 import의 주요 차이점</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"둘다 외부의 파일이나 라이브러리의 코드를 불러온다는 목적을 가지고 있다. require / exports 에서 사용되고 있는  키워드이고 Ruby 언어 스타일과 비슷하다고 볼수 있다. 모듈을 내보낼때는 ES6처럼 명시적으로 선언하는 것이 아니라 특정 변수나 그 변수의 속성으로 해 줘야 한다. 특히, 유사해 보이는 export 변수와 module.exports 변수를 상황에 맞게 잘 사용해야 한다. 기본적으로 2가지 규칙만 기억하면 된다. 여러개의 객체를 내보낼 경우 →  의 개별 속성으로 할당 딱 하나의 객체를 내보낼 경우 →  자체에 할당 노드 프로젝트에서 import를 사용하기 위해서는 \n 을 추가해주면 된다. import / export 에서 새롭게 도입된 키워드로서 Java나 Python 언어 방식과 비슷하다. ES6 와 CommonJS 의 export(내보내기) 차이점 CommonJS와 ES6라는 모듈 시스템에서는  객체라는 개념이 존재한다. 는 모듈로부터 내보내지는 데이…","frontmatter":{"date":"December 22, 2022","title":"require VS import 문법 비교","categories":"개발지식","author":"JungSany","emoji":"⚖️"},"fields":{"slug":"/knowledge/require-import/"}},"next":{"id":"fde338e5-fd17-5eef-b2a4-dc90a91e684f","html":"<p><img src=\"https://t1.daumcdn.net/cfile/tistory/2633363B52F0AAA917\" alt=\"각각의 브라우저 이미지\"></p>\n<h2 id=\"브라우저란-무엇인가\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"브라우저란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저란 무엇인가?</h2>\n<ul>\n<li><strong>브라우저의 주요 기능은 사용자가 선택한 자원을 서버에 요청하고 브라우저에 표시하는 것이다.</strong></li>\n<li><strong><code class=\"language-text\">자원</code>은 보통 HTMl 문서지만 PDF나 이미지 또는 다른 형태일 수 있다.</strong></li>\n<li><strong><code class=\"language-text\">브라우저</code>는 HTMl과 CSS 명세에 따라 HTML 파일을 해석해서 표시한다. → 명세는 웹 표준화 기구인 W3C에서 정한다.</strong></li>\n</ul>\n<br/>\n<h2 id=\"브라우저의-기본-구조\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"브라우저의 기본 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저의 기본 구조</h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/99dKj/btqIl9g441B/2zBd7Ya63bkgHiSdM8Vm4k/img.png\" alt=\"브라우저의 기본 구조\"></p>\n<br/>\n<h2 id=\"브라우저에-url-입력-후-일어나는-전체적인-과정네트워크-상에서의-전체적인-흐름\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-url-%EC%9E%85%EB%A0%A5-%ED%9B%84-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%EA%B3%BC%EC%A0%95%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%83%81%EC%97%90%EC%84%9C%EC%9D%98-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%ED%9D%90%EB%A6%84\" aria-label=\"브라우저에 url 입력 후 일어나는 전체적인 과정네트워크 상에서의 전체적인 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저에 URL 입력 후 일어나는 전체적인 과정(네트워크 상에서의 전체적인 흐름)</h2>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F993D344D5C2347F62E\" alt=\"url 입력 후 일어나는 네트워크 상에서의 전체적인 흐름 이미지\"></p>\n<ol>\n<li>\n<p>DNS 서버가 <a href=\"http://www.google.com%EB%A5%BC\">www.google.com를</a> 호스팅하는 서버의 IP 주소를 찾는다.</p>\n</li>\n<li>\n<p>찾은 ip 주소와 url 내부의 port 정보를 바탕으로 <strong>HTTP 요청 메세지</strong>를 생성합니다.</p>\n<p><code class=\"language-text\">HTTP Method</code> + <code class=\"language-text\">path부터 url 정보</code> + <code class=\"language-text\">HTTP 버전 정보</code> + <code class=\"language-text\">Host 정보</code> (HTTP 요청 메시지 구성)</p>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a0b0e375-1b42-4034-a525-583fb1498d73/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-10-23_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.29.44.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20221222T065622Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=b9e2a185ce9a482d790e9282827082109ba6ce049fa73b002a31564ea8b1e0ce&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%3D%22%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA%25202022-10-23%2520%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE%25204.29.44.png%22&#x26;x-id=GetObject\" alt=\"HTTP GET 요청 메시지 이미지\"></p>\n</li>\n<li>\n<p>생성된 HTTP 요청 메시지는 소켓 라이브러리를 통해 TCP / IP로 전달되는데, 데이터를 전달하기 이전에 3-way-handshake 방식으로 TCP / IP를 연결한 뒤에 메시지를 전달한다.</p>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/4220179e-94b5-4b3f-b555-7dc1663b3e23/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-10-23_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.33.11.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20221222T065640Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=05704c68dd449d6599f4de43a97102785274271845afcda0b3c65f365a67f25f&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%3D%22%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA%25202022-10-23%2520%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE%25204.33.11.png%22&#x26;x-id=GetObject\" alt=\"3-way-handshake 방식 이미지\"></p>\n</li>\n<li>\n<p>TCP / IP 에서 HTTP 요청 메시지를 포함하는 TCP / IP 패킷을 생성한다.</p>\n</li>\n<li>\n<p>네트워크 라우팅을 통해 목적지 서버로 요청 패킷이 도달한다.</p>\n</li>\n<li>\n<p>TCP / IP 패킷 내부의 HTTP 요청 메시지를 해석한 뒤, 이에 맞는 HTTP 응답 메시지를 만들어 낸다.</p>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/602b6b33-9c71-4d04-804a-85caffe036bc/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-10-23_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.35.26.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20221222T065722Z&#x26;X-Amz-Expires=86400&#x26;X-Amz-Signature=875bd1267d4fb530b32752f4398d0ea3ed8cb26fd8fd949cdec393e0704a2a9e&#x26;X-Amz-SignedHeaders=host&#x26;response-content-disposition=filename%3D%22%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA%25202022-10-23%2520%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE%25204.35.26.png%22&#x26;x-id=GetObject\" alt=\"HTTP POST 응답 메시지 이미지\"></p>\n<p><code class=\"language-text\">HTTP 버전</code> + <code class=\"language-text\">상태코드</code> + <code class=\"language-text\">Content-Type(응답 데이터 형식)</code> + <code class=\"language-text\">Content-Length(응답 데이터의 길이)</code> + <code class=\"language-text\">데이터</code></p>\n</li>\n<li>\n<p>서버가 클라이언트로 동일한 방식으로 응답 메시지를 전송하면, 클라이언트가 응답 데이터 HTML을 <code class=\"language-text\">렌더링</code>하여 사용자에게 보여준다.</p>\n</li>\n</ol>\n<br/>\n<h2 id=\"렌더링-엔진이란\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84%EC%9D%B4%EB%9E%80\" aria-label=\"렌더링 엔진이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 엔진이란?</h2>\n<p><img src=\"https://velog.velcdn.com/images/soopy368/post/485f811b-3601-4248-aff3-d773d54af9a1/image.png\" alt=\"렌더링 동작 과정\"></p>\n<ul>\n<li>\n<p><code class=\"language-text\">렌더링 엔진</code>은 <strong>요청 받은 내용을 브라우저 화면에 표시하는 역할</strong>을 한다.</p>\n</li>\n<li>\n<p>브라우저마다 사용하는 렌더링 엔진이 다르므로 크로스 브라우징 이슈가 종종 발생하곤 한다.</p>\n</li>\n<li>\n<p>보통 통신으로부터 요청한 문서의 내용을 얻는 것부터 시작한다.</p>\n<ul>\n<li>이때 브라우저는 HTML과 CSS를 나누어서 읽는다.</li>\n<li>렌더링 엔진은 HTM과 CSS 파싱이 끝나기 전에 이후의 과정을 수행하여 미리 사용자에게 보여줄 수 있는 내용들을 출력하기 위해 계속 통신을 하면서 전송된 내용에 대한 배치와 그리기 과정을 진행한다.</li>\n<li>자세한 내용은 아래를 통해 설명하겠다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"렌더링-동작-과정\" style=\"position:relative;\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"렌더링 동작 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 동작 과정</h3>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FLCnaB%2FbtqIwDAOpap%2FsFlMNr2w37fPe5hd6gfEXk%2Fimg.png\" alt=\"렌더링 동작 과정 약식\"></p>\n<ol>\n<li>\n<p><strong>DOM 트리 구축을 위한 HTML 파싱</strong></p>\n<p>→ <code class=\"language-text\">브라우저는 서버로부터 HTML 문서를 모두 전달받는다.</code> 이후 <code class=\"language-text\">렌더링 엔진</code>은 전달받은 <code class=\"language-text\">HTML 문서</code>와 <code class=\"language-text\">외부 CSS 파일과 스타일 요소</code>를 파싱해서 <code class=\"language-text\">DOM 트리와 CSSOM 트리</code>를 구축한다.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">렌더 트리 구축</code></strong> : DOM(Document Object Model) 트리와 CSSOM 트리의 <code class=\"language-text\">정보를 조합</code></p>\n</li>\n<li>\n<p><strong>렌더 트리 배치</strong> : <code class=\"language-text\">렌더 트리의 각 노드에 대해서 화면 상에서 어디에 배치할지 위치와 크기를 결정</code></p>\n</li>\n<li>\n<p><strong>렌더 트리 그리기</strong> : UI 백엔드에서 <code class=\"language-text\">렌더 트리를 그리고, 화면에 출력(프린트)됨</code></p>\n</li>\n</ol>\n<br/>\n<h2 id=\"용어사전\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%82%AC%EC%A0%84\" aria-label=\"용어사전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어사전</h2>\n<ol>\n<li>사용자 인터페이스 - 주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등 페이지 뷰 이외의 다른 모든 부분</li>\n<li>브라우저 엔진 - 사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어</li>\n<li>렌더링 엔진 - HTML, CSS를 파싱해 요청한 콘텐츠를 표시</li>\n<li>통신 - HTTP 요청과 같은 네트워크 호출에 사용됨</li>\n<li>UI 백엔드 - 기본적인 위젯(콤보 박스 등)을 그림</li>\n<li>자바스크립트 엔진 - 자바스크립트 코드를 해석하고 실행.</li>\n<li>자료 저장소 - 자료를 저장하는 계층으로 쿠키 등을 저장하는 웹 데이터베이스</li>\n<li><strong>파서</strong> - 파싱을 수행하는 프로그램</li>\n<li><strong>파싱</strong> - 코드를 브라우저가 이해하고 사용할 수 있는 구조로 변환</li>\n<li>어태치먼트 - 렌더 트리를 생성하기 위해 DOM 노드와 시각 정보를 연결하는 과정 ( 렌더러를 만드는 과정)</li>\n<li>렌더러 - 자신과 자식요소를 어떻게 배치하고 그려내야하는지 알고 있다</li>\n<li>렌더트리 - CSS파일과 스타일요소를 함께 파싱해 스타일 정보와 HTML표시 규칙을 포함한 트리</li>\n<li>배치 - 각각의 노드가 화면 안에서 정확한 위치에 표시되는 것을 의미</li>\n<li>그리기 -  UI 백엔드에서 랜더 트리의 각 노드를 가로지르며 형상을 만들어내는것</li>\n<li><a href=\"https://aws.amazon.com/ko/route53/what-is-dns/\">DNS 서버</a> - 이름을 IP 주소로 변환(사람이 읽을 수 있는 도메인 이름(예: <a href=\"http://www.amazon.com)%EC%9D%84\">www.amazon.com)을</a> 머신이 읽을 수 있는 IP 주소(예: 192.0.2.44)로 변환 한다.)<strong>하여 도메인 이름을 웹 브라우저에 입력할 때 최종 사용자는 어떤 서버에 연결할 것인지를 제어</strong>(웹 사이트의 IP 주소와 도메인 주소를 이어주는 환경 또는 시스템,)</li>\n<li>TCP (전송 제어 프로토콜) : 두개의 호스트를 연결하고 데이터 스트림을 교환하게 해주는 중요한 네트워크 프로토콜 이다.</li>\n<li><a href=\"https://mindnet.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-22%ED%8E%B8-TCP-3-WayHandshake-4-WayHandshake\">3-way-handshake</a> - TCP / IP 프로토콜을 이용해서 통신을 하는 응용프로그램이 데이터를 전송하기 전에 먼저 정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에 세션을 수립하는 과정을 의미</li>\n</ol>\n<br/>\n<h2 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h2>\n<p><a href=\"https://velog.io/@wiostz98kr/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95%EA%B3%BC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95\">브라우저 렌더링 과정과 최적화 방법</a></p>\n<p><a href=\"https://velog.io/@soopy368/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%9B%90%EB%A6%AC\">브라우저 렌더링 원리</a></p>\n<p><a href=\"https://velog.io/@minbr0ther/React.js-Virtual-DOM-%EA%B0%80%EC%83%81-%EB%8F%94\">[React.js] Virtual DOM 가상 돔</a></p>\n<p><a href=\"https://deveric.tistory.com/97\">브라우저에 URL을 입력했을 때 발생하는 일들</a></p>\n<p><a href=\"https://velog.io/@sewonkim/%EC%9B%B9-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-url%EC%9D%84-%EC%B3%A4%EC%9D%84-%EB%95%8C-%EC%96%B4%EB%96%A4-%EC%9D%BC%EC%9D%B4-%EC%9D%BC%EC%96%B4%EB%82%A0%EA%B9%8C-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84\">[웹] 웹 브라우저에 url을 쳤을 때 어떤 일이 일어날까? (웹 브라우저 요청 흐름)</a></p>\n<p><a href=\"https://velog.io/@younoah/browser-rendering-path#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\">브라우저의 렌더링 과정</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">브라우저란 무엇인가?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0\">브라우저의 기본 구조</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-url-%EC%9E%85%EB%A0%A5-%ED%9B%84-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%EA%B3%BC%EC%A0%95%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%83%81%EC%97%90%EC%84%9C%EC%9D%98-%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%ED%9D%90%EB%A6%84\">브라우저에 URL 입력 후 일어나는 전체적인 과정(네트워크 상에서의 전체적인 흐름)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%97%94%EC%A7%84%EC%9D%B4%EB%9E%80\">렌더링 엔진이란?</a></p>\n<ul>\n<li><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\">렌더링 동작 과정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EC%96%B4%EC%82%AC%EC%A0%84\">용어사전</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 22, 2022","title":"브라우저 동작 원리 및 요청 흐름","categories":"개발지식","author":"JungSany","emoji":"🌎"},"fields":{"slug":"/knowledge/browser-works/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/knowledge/require-import/","nextSlug":"/knowledge/browser-works/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}