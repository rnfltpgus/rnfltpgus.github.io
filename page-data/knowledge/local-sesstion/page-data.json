{"componentChunkName":"component---src-templates-blog-template-js","path":"/knowledge/local-sesstion/","result":{"data":{"cur":{"id":"3ad4bf2d-f4c4-54d0-83e9-3f7c9efb5f2f","html":"<ul>\n<li>HTML5에는 웹의 데이터를 클라이언트에 저장할 수 있는 새로운 자료구조인 WebStorage 스펙이 포함됨(로컬과 세션스토리지로 나뉨)</li>\n<li>Web Storage API는 브라우저에서 키/값 쌍을 쿠키보다 훨씬 직관적으로 젖아할 수 있는 방법을 제공한다.</li>\n</ul>\n<br/>\n<h3 id=\"sessionstorage\" style=\"position:relative;\"><a href=\"#sessionstorage\" aria-label=\"sessionstorage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SessionStorage</h3>\n<ul>\n<li>각각의 <a href=\"https://developer.mozilla.org/ko/docs/Glossary/Origin\">출처</a>에 대해서 독립적인 저장 공간을 페이지 세션이 유지되는 동안(브라우저가 열려있는 동안) 제공한다.\n<ul>\n<li>세션에 한정해, 즉 브라우저 또는 탭이 닫힐 때까지만 데이터를 저장한다.</li>\n<li>데이터를 절대 서버로 전송하지 않는다.</li>\n<li>저장 공간이 쿠키보다 큽다.(최대 5MB)</li>\n</ul>\n</li>\n<li>입력 폼 정보, 비로그인 장바구니 용도로 많이 사용된다.</li>\n</ul>\n<br/>\n<h3 id=\"localstorage\" style=\"position:relative;\"><a href=\"#localstorage\" aria-label=\"localstorage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LocalStorage</h3>\n<ul>\n<li>SessionStorage와 비슷하지만, 브라우저를 닫았다 열어도 데이터가 남아있다.\n<ul>\n<li>유효기간 없이 데이터를 저장하고, JavaScript를 사용하거나 브라우저 캐시 또는 로컬 저장 데이터를 지워야만 사라진다.</li>\n<li>저장 공간이 셋중 제일 크다.</li>\n</ul>\n</li>\n<li>자동 로그인을 유지시킬 때 많이 사용한다.</li>\n</ul>\n<br/>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<p><strong>공통점</strong></p>\n<ul>\n<li><code class=\"language-text\">key / value</code> 쌍으로 데이터를 저장하고 키를 기반으로 데이터 조회 가능하다.</li>\n<li>단순 문자열을 넘어 객체정보도 저장할 수 있다.</li>\n<li>iterable이 아니라서 key와 value 전체를 얻으려면 일반적인 for문을 사용해서 다루어야 한다.\n<ul>\n<li>(for…of, for…in 사용 불가능) iterable/iterator 조사가 필요함</li>\n</ul>\n</li>\n</ul>\n<p><strong>장단점</strong></p>\n<ul>\n<li>서버에 불필요한 데이터를 저장하지 않는다.</li>\n<li>쿠키보다 저장할 수 있는 용량이 크다.(브라우저마다 다르나 대략 5MB)</li>\n<li>HTML5를 지원하지 않는 브라우저의 경우 사용이 불가하다.</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Web_Storage_API\">Web Storage API - Web API | MDN</a></p>\n<p><a href=\"https://javascript.info/localstorage#sessionstorage\">LocalStorage, sessionStorage</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Origin\">출처 - 용어 사전 | MDN</a></p>\n<p><a href=\"https://velog.io/@dorazi/%EC%BF%A0%ED%82%A4-%EC%9B%B9-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EB%A1%9C%EC%BB%AC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%B8%EC%85%98-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80\">쿠키, 웹 스토리지 (로컬 스토리지, 세션 스토리지)</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#sessionstorage\">SessionStorage</a></li>\n<li><a href=\"#localstorage\">LocalStorage</a></li>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","excerpt":"HTML5에는 웹의 데이터를 클라이언트에 저장할 수 있는 새로운 자료구조인 WebStorage 스펙이 포함됨(로컬과 세션스토리지로 나뉨) Web Storage API는 브라우저에서 키/값 쌍을 쿠키보다 훨씬 직관적으로 젖아할 수 있는 방법을 제공한다. SessionStorage 각각의 출처에 대해서 독립적인 저장 공간을 페이지 세션이 유지되는 동안(브라우저가 열려있는 동안) 제공한다. 세션에 한정해, 즉 브라우저 또는 탭이 닫힐 때까지만 데이터를 저장한다. 데이터를 절대 서버로 전송하지 않는다. 저장 공간이 쿠키보다 큽다.(최대 5MB) 입력 폼 정보, 비로그인 장바구니 용도로 많이 사용된다. LocalStorage SessionStorage와 비슷하지만, 브라우저를 닫았다 열어도 데이터가 남아있다. 유효기간 없이 데이터를 저장하고, JavaScript를 사용하거나 브라우저 캐시 또는 로컬 저장 데이터를 지워야만 사라진다. 저장 공간이 셋중 제일 크다. 자동 로그인을 유지시킬 때 …","frontmatter":{"date":"December 12, 2022","title":"Web Storage(Local, Session)","categories":"개발지식","author":"JungSany","emoji":"💾"},"fields":{"slug":"/knowledge/local-sesstion/"}},"next":{"id":"059e80f1-5d8d-5be7-aab5-e8d42dd65503","html":"<h3 id=\"인증과-인가-정의\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EC%9D%B8%EA%B0%80-%EC%A0%95%EC%9D%98\" aria-label=\"인증과 인가 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증과 인가 정의</h3>\n<ul>\n<li><strong>전달, 공개하기 위한 방법으로</strong>\n<ul>\n<li><strong>인증 :</strong> (식별가능한 정보로) 서비스에 등록된 유저의 신원을 입증하는 과정</li>\n<li><strong>인가 :</strong> 인증된 사용자에 대한 자원 접근 권한 확인</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"http의-특징과-쿠키와-세션을-사용하는-이유\" style=\"position:relative;\"><a href=\"#http%EC%9D%98-%ED%8A%B9%EC%A7%95%EA%B3%BC-%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"http의 특징과 쿠키와 세션을 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP의 특징과 쿠키와 세션을 사용하는 이유</h3>\n<ul>\n<li>HTTP 프로토콜의 특성이자 약점을 보완하기 위해 <code class=\"language-text\">쿠키와 세션</code>을 사용</li>\n<li><strong>기본적으로</strong> HTTP 프로토콜 환경은 “connectionless(무연고), stateless(국적없는)” 한 즉, **<code class=\"language-text\">무상태성의 특성</code>**을 가지기 때문에 서버는 클라이언트가 누구인지 매번 확인해야되는데, 이를 해결하기 위해서 쿠키와 세션, 그리고 추가적으로 토큰을 사용하게 되었다.</li>\n</ul>\n<br/>\n<h3 id=\"쿠키cookie\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4cookie\" aria-label=\"쿠키cookie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키(Cookie)</h3>\n<ul>\n<li><strong>쿠키란?</strong>\n<ul>\n<li><code class=\"language-text\">넥스케이프</code>에서 쿠키를 개발하였다.</li>\n<li>클라이언트(브라우저) <code class=\"language-text\">로컬 PC</code>에 <code class=\"language-text\">저장</code>된다.</li>\n<li><code class=\"language-text\">작은 데이터 파일</code>로 구성되어 있으며, 브라우저 환경마다 다르긴하지만 <code class=\"language-text\">4KB 이하</code>로 데이터를 보낼 수 있다.</li>\n<li><code class=\"language-text\">키와 벨류의 형태</code>로 구성되어 있으며, <code class=\"language-text\">string 형식</code>이다.</li>\n<li>사용자 인증이 <code class=\"language-text\">유효한 시간을 명시</code>할 수 있으며, 유효 시간이 정해지면 <code class=\"language-text\">브라우저가 종료되어도 인증이 유지</code>되는 특징이 있다.(날짜를 정해주면 <code class=\"language-text\">지속쿠키</code>, 안 정해주면 <code class=\"language-text\">세션쿠키</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#:~:text=If%20unspecified%2C%20the%20cookie%20becomes%20a%20session%20cookie.%20A%20session%20finishes%20when%20the%20client%20shuts%20down%2C%20after%20which%20the%20session%20cookie%20is%20removed\">참고</a>)</li>\n<li>쿠키는 사용자가 따로 요청하지 않아도 브라우저가 <code class=\"language-text\">Request시에 RequestHeader를 넣어서 자동으로 서버에 전송</code>합니다.</li>\n<li>세션보다 요청 속도가 빠름</li>\n</ul>\n</li>\n<li><strong>쿠키의 동작 방식</strong>\n<ol>\n<li>클라이언트가 페이지를 요청</li>\n<li>서버에서 쿠키를 생성</li>\n<li>HTTP 헤더에 쿠키를 포함 시켜 응답</li>\n<li>브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있음</li>\n<li>같은 요청을 할 경우 HTTP 헤더에 쿠키를 함께 보냄</li>\n<li>서버에서 쿠키를 읽어 이전 상태 정보를 변경 할 필요가 있을 때 쿠키를 업데이트 하여 변경된 쿠키를 HTTP 헤더에 포함시켜 응답</li>\n</ol>\n</li>\n<li><strong>사용 예시</strong>\n<ul>\n<li><strong>방문 사이트에서 로그인 시</strong>, “아이디와 비밀번호를 저장하시겠습니까?” - <strong>지속쿠키</strong></li>\n<li><strong>쇼핑몰의 장바구니 기능 - 세션쿠키</strong></li>\n<li><strong>자동로그인, 팝업에서</strong> “오늘 더 이상 이 창을 보지 않음” 체크, 쇼핑몰의 장바구니 - <strong>지속쿠키</strong></li>\n</ul>\n</li>\n<li><strong>쿠키의 한계</strong>\n<ul>\n<li>민감한 정보를 그대로 HTTP 통신에 노출하는 경우 탈취당할 수 있다.</li>\n<li>아이디와 패스워드를 쿠키에 넣어서 모든 요청마다 인증 정보를 포함하게 할 수 있는데, 통신 과정에서 패킷을 가로채가면 패스워드가 유출될 수 있다.</li>\n<li><strong>쿠키의 보안 취약점을 보완</strong>하기 위해 <code class=\"language-text\">세션</code>이 등장하였다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"세션session\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98session\" aria-label=\"세션session permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션(Session)</h3>\n<ul>\n<li><strong>세션이란?</strong>\n<ul>\n<li><code class=\"language-text\">세션은 쿠키를 기반</code>으로 하고 있다. (하지만 사용자 정보 파일을 브라우저에 저장하는 쿠키와는 다르게 <code class=\"language-text\">서버 측에서 관리</code>한다.)</li>\n<li>서버에서는 클라이언트를 구분하기 위해 <code class=\"language-text\">세션ID</code>를 부여하며 <code class=\"language-text\">웹 브라우저</code>가 서버 접속해서 브라우저를 <code class=\"language-text\">종료할 때까지 인증상태를 유지</code>한다.</li>\n<li><code class=\"language-text\">접속 시간</code>에 <code class=\"language-text\">제한</code>을 두어 일정 시간 응답이 없다면 <code class=\"language-text\">정보가 유지</code>되지 않게 <code class=\"language-text\">설정이 가능</code>하다.</li>\n<li>사용자에 대한 <code class=\"language-text\">정보를 서버에 두기</code> 때문에 쿠키보다 <code class=\"language-text\">보안상 좋지만</code>, <code class=\"language-text\">사용자가 많을 경우</code> 메모리를 많이 차지하게 되어 <code class=\"language-text\">서버과부하나 성능 저하의 요인이 되기도 한다.</code></li>\n<li>클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 <code class=\"language-text\">세션ID</code>이다.</li>\n<li><strong>세션의 핵심은 HTTP 통신 상에서는 <code class=\"language-text\">어떠한 민감한 정보도 오가지 않는다는 것</code>이다.</strong>\n<ul>\n<li>민감한 정보는 <code class=\"language-text\">오직 서버와 세션 스토리지에서만</code> 다뤄지고 외부로 노출되지 않는다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>세션의 동작 방식</strong>\n<ol>\n<li>클라이언트가 서버에 접속 시, 세션 ID를 발급 받음</li>\n<li>클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있음</li>\n<li>클라리언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 같이 서버에 전달해서 요청</li>\n<li>서버는 세션 ID를 전달 받아서 별다른 작업없이 세션 ID로 세션에 있는 클라언트 정보를 가져와서 사용</li>\n<li>클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답</li>\n</ol>\n</li>\n<li><strong>세션의 특징</strong>\n<ul>\n<li>각 클라이언트에게 <code class=\"language-text\">고유 ID</code>를 부여</li>\n<li>세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공</li>\n<li><code class=\"language-text\">보안 면에서 쿠키보다 우수</code></li>\n<li>사용자가 많아질수록 서버 메모리를 많이 차지하게 됨</li>\n</ul>\n</li>\n<li><strong>사용 예시</strong>\n<ul>\n<li><strong>로그인 같이 보안상 중요한 작업을 수행할 때</strong> 사용</li>\n</ul>\n</li>\n<li><strong>세션의 한계</strong>\n<ul>\n<li>쿠키에 담긴 정보가 있는 그대로 의미 없지만, 탈취한 쿠키를 이용해 서버에 요청을 보내면 정보가 유출될 수 있다.(세션 하이재킹)</li>\n<li>서버에 정보를 저장해야 하기 때문에 메모리 공간을 차지한다.</li>\n<li>쿠키로부터 받은 세션 ID로 세션 스토리지를 탐색해야 하는 시간이 든다.</li>\n<li>동시 접속자가 많은 서비스의 경우 서버 과부하의 원인이 된다. 이후 서버에 정보를 저장하지 않는 토큰이 등장 하였다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"쿠키와-세션의-차이\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"쿠키와 세션의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키와 세션의 차이</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>쿠키(Cookie)</th>\n<th>세션(Session)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>저장 위치</td>\n<td>클라이언트(=접속자 PC)</td>\n<td>웹 서버</td>\n</tr>\n<tr>\n<td>저장 형식</td>\n<td>String(text)</td>\n<td>Object</td>\n</tr>\n<tr>\n<td>만료 시점(라이프 사이클)</td>\n<td>쿠키 저장시 설정 (브라우저가 종료되도, 만료시점이 지나지 않으면 자동삭제 되지 않음)</td>\n<td>브라우저 종료시 삭제 (만료시점 지정이 가능하지만 브라우저가 종료되면 지정시간과 상관없이 삭제됨)</td>\n</tr>\n<tr>\n<td>사용하는 자원(리소스)</td>\n<td>클라이언트 리소스</td>\n<td>웹 서버 리소스</td>\n</tr>\n<tr>\n<td>용량 제한</td>\n<td>총 300개 ,하나의 토메인 당 20개,하나의 쿠키 당 4KB(3096byte)</td>\n<td>서버가 혀용하는 한 용량제한 없음</td>\n</tr>\n<tr>\n<td>속도</td>\n<td>세션보다 빠름</td>\n<td>쿠키보다 느림</td>\n</tr>\n<tr>\n<td>보안</td>\n<td>세션보다 안좋음</td>\n<td>쿠키보다 좋음</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h3 id=\"token\" style=\"position:relative;\"><a href=\"#token\" aria-label=\"token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Token</h3>\n<p><code class=\"language-text\">서버</code>는 인증에 필요한 정보들을 암호화시켜 토큰을 발행하고, <code class=\"language-text\">클라이언트</code>는 발행받은 토큰을 HTTP 헤더에 계속 넣어서 요청을 보내는 방식</p>\n<p><img src=\"https://tech.lawandgood.com/images/2021/10/04/Untitled%2012.png\" alt=\"토큰작동방식\"></p>\n<ul>\n<li><strong>클라이언트의 인증 Request</strong>\n<ul>\n<li>클라이언트는 아이디, 패스워드 등의 인증정보를 HTTP 요청에 담아서 서버에 전달</li>\n</ul>\n</li>\n<li><strong>서버의 인증 정보 확인 및 Response + Token</strong>\n<ul>\n<li>서버는 클라이언트로부터 받은 인증 정보가 유효한지 확인하고, 토큰을 HTTP 응답에 담아서 전달</li>\n<li>토큰은 Secret Key로 암호화되어 있고, 유효기간이 설정되어 있다.</li>\n</ul>\n</li>\n<li><strong>HTTP with Token</strong>\n<ul>\n<li>클라이언트는 서버로부터 발급받은 토큰을 HTTP 헤더에 담아서 요청을 보내고, 서버는 토큰이 유효한지 검사하여 인증 여부를 판별한다.</li>\n<li>토큰은 <code class=\"language-text\">Seecret Key</code>로 복호화하여 유효한지 아닌지 판별할 수 있기 때문에 <code class=\"language-text\">별도의 저장 공간이 필요하지 않다.</code> 따라서 <strong>세션 방식의 단점인 서버 과부하</strong>를 줄여줄 수 있다.</li>\n</ul>\n</li>\n<li><strong>토큰의 한계</strong>\n<ul>\n<li>이미 발급된 토큰은 유효기간이 만료되기 전까지 계속 사용할 수 있기 때문에, 악의적으로 이용될 수 있다. 따라서 토큰 유효기간을 짧게 하고 <code class=\"language-text\">Refresh Token</code>을 새로 발급해야 한다.</li>\n<li><code class=\"language-text\">토큰의 길이</code>가 쿠키, 세션에 비해 <code class=\"language-text\">길어서</code> 인증이 필요한 요청이 많을 때 <code class=\"language-text\">서버 자원낭비가 발생</code>한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<ul>\n<li><code class=\"language-text\">쿠키와 세션을 비교</code>하였을 때, 세션을 사용하면 좋을 것 같은데 쿠키와 같이 섞어서 사용하는 이유는</li>\n<li><strong>세션이 쿠키에 비해 보안도 높은 편이나 쿠키를 사용하는 이유는 세션은 서버에 저장되고, 서버자원을 사용하기 때문에 사용자가 많을 경우 소모되는 자원이 상당하며, 속도가 느려질 수 있기 때문이다.</strong></li>\n<li><strong>이러한 자원관리 차원에서 쿠키와 세션을 적절한 요소 및 기능에 병행 사용해야 서버 자원의 낭비를 방지하고 웹 사이트 속도를 높일 수 있다.</strong></li>\n<li>세션의 단점을 인 서버 과부하를 줄일 수 있는 토큰 방식은 길이가 길어 서버 자원 낭비가 발생할 수도 있다. 그래서 세션과 토큰 방식을 모두 섞어서 써야하는 건가?</li>\n<li>토큰은 토큰으로 상태관리를 하기 때문에 세션을 둘 필요가 없다. 그렇기 때문에 효율성이 좋아지고 DB를 찔러보지 않아도 되기 때문에 속도가 빠르다는 장점이 있다. 하지만 토큰도 결국 탈취당할 수 있기 때문에 관리를 해야한다.</li>\n<li><strong><code class=\"language-text\">발전순서</code>는 Fat URL → 쿠키 → 세션 → 토큰</strong>\n<ul>\n<li>여기서 Fat URL은 고유 ID를 넣어서 클라이언트를 식별하는 방법으로 사용자의 행동을 추적하여 개인화 된 웹 사이트를 제공했다고 한다.\n<ul>\n<li>단점: URL이 못났다, URL을 공유할 수 없다, URL을 유지하지 못하고 이탈할 가능성이 크다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"남이-정리한-한줄-정리\" style=\"position:relative;\"><a href=\"#%EB%82%A8%EC%9D%B4-%EC%A0%95%EB%A6%AC%ED%95%9C-%ED%95%9C%EC%A4%84-%EC%A0%95%EB%A6%AC\" aria-label=\"남이 정리한 한줄 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>남이 정리한 한줄 정리</h3>\n<ul>\n<li><strong>쿠키 이전의 방식</strong> : 사용자를 정확하게 식별할 수가 없다 → 브라우저에 명시적으로 누구인지 기록하자!</li>\n<li><strong>쿠키</strong> : 쿠키를 탈취당하면 개인정보가 유출된다 → 민감한 정보는 브라우저에 주지 말고 서버에 두자!</li>\n<li><strong>세션</strong> : 세션을 저장하기 위한 공간과 응답 속도가 지연된다 → 저장하지 말고 암호화한 토큰을 줘버리자!</li>\n<li><strong>토큰</strong> : 토큰을 탈취하여 악의적으로 사용할 수 있다 → Refresh 토큰을 써서 유효기간을 짧게 하자!</li>\n</ul>\n<br/>\n<h3 id=\"더-알면-좋을-것-같은-것\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%95%8C%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83-%EA%B0%99%EC%9D%80-%EA%B2%83\" aria-label=\"더 알면 좋을 것 같은 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 알면 좋을 것 같은 것</h3>\n<ul>\n<li>쿠키와 세션은 캐시와 다르다\n<ul>\n<li>캐시는 이미지나 css, js파일 등을 브라우저나 서버 앞 단에 저장해 놓고 사용한다.</li>\n<li>한번 캐시에 저장되면 브라우저를 참고하기 떄문에 서버에서 변경이 되어도 사용자는 브라우저에서 변경되지 않은 화면을 볼 경우도 있다. 이런 부분을 해결하기 위해서는 캐시를 지워주거나 서버에서 클라이언트로 응답을 보낼 때 header에 캐시 만료 시간을 명시하는 방법 등을 이용할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h3>\n<ul>\n<li><strong>connectionless:</strong> 클라이언트가 요청을 한 후 응답을 받으면 그 연결을 끊어 버리는 특징</li>\n<li><strong>stateless(무상태성):</strong> 통신이 끝나면 상태를 유지하지 않는 특성</li>\n<li><strong>쿠키의 구성 요소</strong>\n<ul>\n<li>이름: 각각의 쿠키를 구별하는 데 사용되는 이름</li>\n<li>값: 쿠키의 이름과 관련된 값</li>\n<li>유효시간: 쿠키의 유지시간</li>\n<li>도메인: 쿠키를 전송할 도메인</li>\n<li>경로: 쿠키를 전송할 요청 경로</li>\n</ul>\n</li>\n<li><strong>Domain:</strong> HTTP 요청을 보낼 주소의 도메인이 Domain 속성값과 같은 경우에만 쿠키를 보낸다.\n<ul>\n<li><strong>도메인이란?</strong> 인터넷에 연결된 컴퓨터를 사람이 쉽게 기억하고 입력할 수 있도록 문자(영문, 한글 등)로 만든 인터넷 주소</li>\n</ul>\n</li>\n<li><strong>Path:</strong> HTTP 요청을 보낼 주소의 URL 경로가 Path 속성값과 같은 경우에만 쿠키를 보낸다.</li>\n<li><strong>Load Balancer:</strong> 워크로드를 가상 서버와 같은 다수의 컴퓨팅 리소스로 분산한다. 또는 서버에 가해지는 트래픽을 여러대의 서버에게 균등하게 분산시켜주는 역할</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://tech.lawandgood.com/web-client-identification/\">HTTP로부터 발생한 쿠키, 세션, 토큰</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=y0xMXlOAfss\">[10분 테코톡] 🎡토니의 인증과 인가</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=JZgD8aPkHSc\">[10분 테코톡] 🤠루피의 인증과 인가</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=gA1KsJ2ak10&#x26;list=RDCMUC-mOekGSesms0agFntnQang&#x26;start_radio=1&#x26;t=353s\">[10분 테코톡] 연로그의 쿠키 vs 세션 vs 토큰 vs 캐시</a></p>\n<p><a href=\"https://interconnection.tistory.com/m/74\">쿠키와 세션 개념</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EC%9D%B8%EA%B0%80-%EC%A0%95%EC%9D%98\">인증과 인가 정의</a></li>\n<li><a href=\"#http%EC%9D%98-%ED%8A%B9%EC%A7%95%EA%B3%BC-%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">HTTP의 특징과 쿠키와 세션을 사용하는 이유</a></li>\n<li><a href=\"#%EC%BF%A0%ED%82%A4cookie\">쿠키(Cookie)</a></li>\n<li><a href=\"#%EC%84%B8%EC%85%98session\">세션(Session)</a></li>\n<li><a href=\"#%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\">쿠키와 세션의 차이</a></li>\n<li><a href=\"#token\">Token</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"#%EB%82%A8%EC%9D%B4-%EC%A0%95%EB%A6%AC%ED%95%9C-%ED%95%9C%EC%A4%84-%EC%A0%95%EB%A6%AC\">남이 정리한 한줄 정리</a></li>\n<li><a href=\"#%EB%8D%94-%EC%95%8C%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83-%EA%B0%99%EC%9D%80-%EA%B2%83\">더 알면 좋을 것 같은 것</a></li>\n<li><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 12, 2022","title":"쿠키와 세션 그리고 토큰(인증과 인가)","categories":"개발지식","author":"JungSany","emoji":"⛈️"},"fields":{"slug":"/knowledge/cookies-session-token/"}},"prev":{"id":"e1b60193-339c-5763-9b37-cba3dccfb2dc","html":"<h3 id=\"sql관계형-db\" style=\"position:relative;\"><a href=\"#sql%EA%B4%80%EA%B3%84%ED%98%95-db\" aria-label=\"sql관계형 db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL(관계형 DB)</h3>\n<ul>\n<li>\n<p>SQL을 사용하면 RDBMS(관리 시스템)에서 데이터를 저장, 수정, 삭제 및 검색할 수 있음</p>\n</li>\n<li>\n<p>관계형 데이터베이스의 핵심 특징</p>\n<ul>\n<li>데이터는 <code class=\"language-text\">정해진 데이터 스키마에 따라</code> 테이블에 저장된다.</li>\n<li>데이터는 <code class=\"language-text\">관계를 통해</code> 여러 테이블에 분산된다.</li>\n</ul>\n</li>\n<li>\n<p>데이터는 테이블에 레코드로 저장되는데, 각 테이블마다 명확하게 정의된 구조가 있다.</p>\n</li>\n<li>\n<p>해당 <code class=\"language-text\">구조는 필드의 이름과 데이터 유형</code>으로 정의된다.</p>\n</li>\n<li>\n<p>따라서 스키마를 준수하지 않은 레코드는 테이블에 추가할 수 없다. 즉, 스키마를 수정하지 않은 이상 정해진 구조에 맞는 레코드만 추가가 가능한 것이 관계형 데이터베이스의 특징 중 하나다.</p>\n</li>\n<li>\n<p>또한, 데이터 중복을 피하기 위해 ‘관계’를 이용한다.\n<img src=\"https://camo.githubusercontent.com/3c8dd62be5799ccada4e2da75f1ccfb458eea2e8/68747470733a2f2f74312e6461756d63646e2e6e65742f6366696c652f746973746f72792f393934443039333535433933374543443244\" alt=\"데이터 중복을 피하기 위한 데이터 관계 예시\"></p>\n</li>\n<li>\n<p><strong>하나의 테이블에서 중복 없이 하나의 데이터만을 관리하기 때문에 다른 테이블에서 부정확 데이터를 다룰 위험이 없어지는 장점이 있다.</strong></p>\n</li>\n</ul>\n<br/>\n<h3 id=\"nosql비관계형-db\" style=\"position:relative;\"><a href=\"#nosql%EB%B9%84%EA%B4%80%EA%B3%84%ED%98%95-db\" aria-label=\"nosql비관계형 db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQL(비관계형 DB)</h3>\n<ul>\n<li>\n<p>SQL(관계형 DB)와 반대로 스키마도 없고, 관계도 없다.</p>\n</li>\n<li>\n<p>NOSQL에서는 레코드를 문서(documents)라고 부른다.</p>\n</li>\n<li>\n<p>여기서 SQL과 핵심적인 차이가 있는데, SQL은 정해진 스키마를 따르지 않으면 데이터 추가가 불가능했다. 하지만 NOSQL에서는 다른 구조의 데이터를 같은 컬렉션에 추가가 가능하다.</p>\n</li>\n<li>\n<p>문서(documents)sms Json과 비슷한 형태로 가지고 있다. 관계형 데이터베이스처럼 여러 테이블에 나누어담지 않고, 관련 데이터를 동일한 <code class=\"language-text\">컬렉션</code>에 넣는다.</p>\n</li>\n<li>\n<p>따라서 위 사진에 SQL에서 진행한 Order, Users, Products 테이블로 나눈 것을 NoSQL에서는 Orders에 한꺼번에 포함해서 저장하게 된다.</p>\n</li>\n<li>\n<p>따라서 여러 테이블에 조인할 필요없이 이미 필요한 모든 것을 갖춘 문서를 작성하는 것이 NoSQL이다.(NoSQL에는 조인이라는 개념이 존재하지 않음)</p>\n</li>\n<li>\n<p>NoSQL에서 조인을 하고싶을 경우 <code class=\"language-text\">컬랙션을 통해 데이터를 복제하여 각 컬렉션 일부분에 속하는 데이터를 정확하게 산출</code>하도록 한다.</p>\n</li>\n<li>\n<p>하지만 이러면 데이터가 중복되어 서로 영향을 줄 위험이 있다. 따라서 조인을 잘 사용하지 않고 자주 변경되지 않는 데이터일 때 NoSQL을 쓰면 상당히 효율적이다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"확장-개념\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5-%EA%B0%9C%EB%85%90\" aria-label=\"확장 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장 개념</h3>\n<ul>\n<li>데이터베이스 서버의 확장성은 ‘수직적’ 확장과 ‘수평적’ 확장으로 나누어 진다.\n<ul>\n<li>수직적 확장: 단순히 데이터베이스 서버의 성능을 향상시키는 것(ex. CPU 업그레이드)</li>\n<li>수평적 확장: 더 많은 서버가 추가되고 데이터베이스가 적체적으로 분산됨을 의미(하나의 데이터베이스에서 작동하지만 여러 호스트에서 작동)</li>\n</ul>\n</li>\n<li>데이터 저장 방식으로 인해 SQL 데이터베이스는 일반적으로 수직적 확장만 지원함\n<ul>\n<li>수평적 확장은 NoSQL 데이터베이스에서만 가능</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"장--단점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5--%EB%8B%A8%EC%A0%90\" aria-label=\"장  단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장 / 단점</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SQL</th>\n<th>NOSQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>장점</td>\n<td>- 명확하게 정의된 스키마, 데이터 무결성 보장</td>\n<td>- 스키마가 없어서 유연함</td>\n</tr>\n<tr>\n<td></td>\n<td>- 관계는 각 데이터를 중복없이 한번만 저장</td>\n<td>- 언제든지 저장된 데이터를 조정하고 새로운 필드 추가 가능</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>- 데이터는 애플리케이션이 필요로 하는 형식으로 저장</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>- 데이터 읽어오는 속도가 빨라짐 수직 및 수평 확장이 가능해서 애플리케이션이 발생시키는 모든 읽기/쓰기 요청 처리 가능</td>\n</tr>\n<tr>\n<td>단점</td>\n<td>- 덜 유연함</td>\n<td>- 유연성으로 인해 데이터 구조 결정을 미루게 될 수 있음</td>\n</tr>\n<tr>\n<td></td>\n<td>- 데이터 스키마를 사전에 계획하고 알려야 함</td>\n<td>- 데이터 중복을 계속 업데이트 해야 함</td>\n</tr>\n<tr>\n<td></td>\n<td>- 관계를 맺고 있어서 조인문이 많은 복잡한 쿼리가 만들어질 수 있음</td>\n<td>- 데이터가 여러 컬렉션에 중복되어 있기 때문에 수정 시 모든 컬렉션에서 수행해야 함</td>\n</tr>\n<tr>\n<td></td>\n<td>- 대체로 수직적 확장만 가능</td>\n<td>- SQL에서는 중복 데이터가 없으므로 한번만 수행이 가능</td>\n</tr>\n<tr>\n<td>사용하는 경우 더 좋을 때</td>\n<td>- 데이터가 자주 변경되는 애플리케이션의 경우(NoSQL에서는 여러 컬렉션을 모두 수정해야 하기 때문에 비효율적)</td>\n<td>- 정확한 데이터 구조를 알 수 없거나 변경/확장 될 수 있는 경우</td>\n</tr>\n<tr>\n<td></td>\n<td>- 변경될 여지가 없고, 명확한 스키마가 사용자와 데이터에게 중요한 경우</td>\n<td>- 읽기를 자주 하지만, 데이터 변경은 자주 없는 경우</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>- 데이터베이스를 수평으로 확장해야 하는 경우(막대한 양의 데이터를 다뤄야 하는 경우)</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://www.oracle.com/kr/database/what-is-database/\">oracle 데이터베이스란?</a></p>\n<p><a href=\"https://hanamon.kr/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-sql-vs-nosql/\">[데이터베이스] SQL(구조화 쿼리 언어) vs NoSQL(비구조화 쿼리 언어) - 하나몬</a></p>\n<br />\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#sql%EA%B4%80%EA%B3%84%ED%98%95-db\">SQL(관계형 DB)</a></li>\n<li><a href=\"#nosql%EB%B9%84%EA%B4%80%EA%B3%84%ED%98%95-db\">NoSQL(비관계형 DB)</a></li>\n<li><a href=\"#%ED%99%95%EC%9E%A5-%EA%B0%9C%EB%85%90\">확장 개념</a></li>\n<li><a href=\"#%EC%9E%A5--%EB%8B%A8%EC%A0%90\">장 / 단점</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 13, 2022","title":"SQL과 NOSQL 차이","categories":"개발지식 데이터","author":"JungSany","emoji":"🗂️"},"fields":{"slug":"/data/sql-nosql/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io/","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/knowledge/local-sesstion/","nextSlug":"/knowledge/cookies-session-token/","prevSlug":"/data/sql-nosql/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}