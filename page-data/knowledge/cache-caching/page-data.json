{"componentChunkName":"component---src-templates-blog-template-js","path":"/knowledge/cache-caching/","result":{"data":{"cur":{"id":"870a2961-7779-5ba9-97ac-9dec93faa121","html":"<h3 id=\"cache\" style=\"position:relative;\"><a href=\"#cache\" aria-label=\"cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache</h3>\n<ul>\n<li>물건을 일시적으로 저장, 보관하기 위해 사용하는 곳이라는 사전적 의미를 가지고 있는데</li>\n<li>개발 기술적인 Cache의 뜻으로는 <code class=\"language-text\">자주 필요한 데이터나 값</code>의 복사본을 <code class=\"language-text\">일시적</code>으로 <code class=\"language-text\">저장, 보관하기 위해 사용하는 곳</code>을 말한다.</li>\n</ul>\n<br/>\n<h3 id=\"caching\" style=\"position:relative;\"><a href=\"#caching\" aria-label=\"caching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caching</h3>\n<ul>\n<li><strong><code class=\"language-text\">Cache</code>에 데이터나 계산된 결과 값의 복사본을 저장해 둠으로써 전체적인 처리 속도를 향상 시킨다.</strong>\n<ul>\n<li>데이터에 직접적으로 접근하는데 걸리는 시간이 오래 걸릴 때</li>\n<li>필요한 값을 얻기 위해 계산하는 과정을 생략하고 싶을 때</li>\n<li>반복적으로 동일한 결과를 돌려주는 경우(이미지나 썸네일 등)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Caching</code>은 복사본을 이용하는 것이다.</li>\n<li>하지만 복사본과 <code class=\"language-text\">원본이 달라지는 경우</code>가 생길 수 있으니 <code class=\"language-text\">일관성 유지</code>에 유의해야 한다.</li>\n</ul>\n<br/>\n<h3 id=\"컴퓨터의-동작원리\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"컴퓨터의 동작원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터의 동작원리</h3>\n<p><img src=\"https://images.velog.io/images/mee9204/post/fb39e719-9435-478b-8044-98d665d30912/hardware_img.png\" alt=\"컴퓨터의 동작원리\"></p>\n<table>\n<thead>\n<tr>\n<th>CPU</th>\n<th>RAM</th>\n<th>Hard Drive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>중앙처리장치</td>\n<td>주기억장치</td>\n<td>보조기억장치</td>\n</tr>\n<tr>\n<td>매우 빠름</td>\n<td>빠름</td>\n<td>매우 느림</td>\n</tr>\n<tr>\n<td>기억장치에서 데이터를 받아들여 연산작업</td>\n<td>전원이 꺼지면 데이터가 지워짐</td>\n<td>전원이 꺼져도 데이터가 지워지지 않음</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>RAM은 하드 디스크에서 데이터를 불러오고 CPU는 RAM에 저장되어 있는 데이터를 이용하여 연산 작업을 수행하는 구조이다.</li>\n<li>CPU가 <code class=\"language-text\">데이터처리를 위해</code> RAM과 작업을 진행하게 되는데 <code class=\"language-text\">RAM이를 따라가지 못하는 경우</code> 데이터 <code class=\"language-text\">병목현상</code>이 일어난다.</li>\n<li>이를 완화하기 위해 CPU와 RAM 사이에 크기는 작지만 속도가 빠른 <code class=\"language-text\">Cache Memory</code>를 두고, 향후 <code class=\"language-text\">재사용</code>할 가능성이 클 것으로 <code class=\"language-text\">예상되는 데이터의 복사본을 저장</code>해둔 후 CPU가 <code class=\"language-text\">요청</code>하는 데이터를 <code class=\"language-text\">바로바로 전달</code>할 수 있게 해준다.</li>\n</ul>\n<p><img src=\"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F991E7C365CBF4BFF01\" alt=\"메모리피라미드\"></p>\n<ul>\n<li><code class=\"language-text\">메인 메모리</code>는 <strong>DRAM</strong>, <code class=\"language-text\">캐시 메모리</code>는 <strong>SRAM</strong>의 구조를 가지는데, 그 안에는 <code class=\"language-text\">트랜지스터</code>(전류를 제어하는 데 사용하는 전류 구동 반도체 소자)라는 것이 존재한다.\n<ul>\n<li><strong>DRAM은 한 셀당 트랜지스터 1개</strong></li>\n<li><strong>SRAM은 한 셀당 트랜지스터 6개</strong></li>\n</ul>\n</li>\n<li>피라미드 구조 이미지에서 위 단계에 있을 수록 빠르고, 가격이 비싸며, 작은 용량을 가지며 CPU와 가까이 위치한다.</li>\n<li><code class=\"language-text\">캐싱</code>은 CPU와 RAM 사이에서만 사용되는 것이 아니라, 위 피라미드 구조 단계 사이사이에서도 캐싱이 이루어 진다. (CPU → Cache Memory, Cache Memory → RAM 이런식으로 단계별 아래 계층에 대하여 캐싱 작업을 수행)</li>\n<li><strong>이러한 <code class=\"language-text\">메모리 계층 구조의 목적</code>은 캐싱을 이용하여 빠르고 작은 메모리와 크고 느린 메모리의 장점을 조합해서 크고 빠른 메모리처럼 행동하도록 만들기 위함이다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"캐시-동작-원리\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\" aria-label=\"캐시 동작 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시 동작 원리</h3>\n<ul>\n<li>어떤 부분이 재사용성할 가능성이 큰지 알아보는 방법?\n<ul>\n<li>데이터 지역성의 원리를 통하여 데이터 접근이 시간적 혹은 공간적으로 가깝게 일어나는 것을 의미하는데</li>\n<li>시간 지역성\n<ul>\n<li>특정 데이터가 한번 접근되었을 경우, 가까운 미래에 또 한번 데이터에 접근할 가능성이 높은 것</li>\n<li>메모리 상의 같은 주소에 여러 차례 읽기 쓰기를 수행할 경우 상대적으로 작은 크기의 캐시를 사용해도 효율성을 높일 수 있음</li>\n<li>ex) for나 while문의 조건 변수 i</li>\n</ul>\n</li>\n<li>공간 지역성\n<ul>\n<li>특정 데이터와 가까운 주소가 순서대로 접근되는 경우</li>\n<li>한 메모리 주소에 접근할 때 그 주소뿐 아니라 해당 블록을 전부 캐시에 가져옴</li>\n<li>이때 메모리 주소를 오름차순이나 내림차순으로 접근한다면, 캐시에 이미 저장된 같은 블록의 데이터를 접근하게 되므로 캐시의 효율성이 크게 향상될 수 있음</li>\n<li>ex) 배열은 순서대로 접근할 가능성이 크다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>캐시 메모리가 해당 데이터를 가지고 있다면 <code class=\"language-text\">캐시 히트(캐시 적중)</code>이라 하며, 해당 데이터가 없어서 메인 메모리에서 가져와야 한다면 <code class=\"language-text\">캐시 미스</code>라고 한다.</li>\n<li><strong>Write Through 정책</strong>\n<ul>\n<li>메인 메모리를 바로 업데이트하는 경우를 말하는데</li>\n<li>단순하고 캐시와 메인 메모리의 일관성을 유지할 수 있지만, 매번 바꿔줘야 되므로 느리다는 단점이 존재한다.</li>\n</ul>\n</li>\n<li><strong>Write Back 정책</strong>\n<ul>\n<li>캐시만 업데이트 하다가, 업데이트된 데이터가 캐시에서 빠지게 될 때 메인 메모리를 업데이트 해주는 정책이다.</li>\n<li><code class=\"language-text\">업데이트 확인</code>은 캐시 블록마다 dirty 비트를 추가해야 되며, 데이터가 변경되었다면 dirty 비트가 1로 변경된다. ( 해당 dirty 비트에 대해서는 알아봐야 할 듯 하다.)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p>우테코 영상을 보고 정리 중</p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#cache\">Cache</a></li>\n<li><a href=\"#caching\">Caching</a></li>\n<li><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\">컴퓨터의 동작원리</a></li>\n<li><a href=\"#%EC%BA%90%EC%8B%9C-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\">캐시 동작 원리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","excerpt":"Cache 물건을 일시적으로 저장, 보관하기 위해 사용하는 곳이라는 사전적 의미를 가지고 있는데 개발 기술적인 Cache의 뜻으로는 의 복사본을 으로 을 말한다. Caching 에 데이터나 계산된 결과 값의 복사본을 저장해 둠으로써 전체적인 처리 속도를 향상 시킨다. 데이터에 직접적으로 접근하는데 걸리는 시간이 오래 걸릴 때 필요한 값을 얻기 위해 계산하는 과정을 생략하고 싶을 때 반복적으로 동일한 결과를 돌려주는 경우(이미지나 썸네일 등) 은 복사본을 이용하는 것이다. 하지만 복사본과 가 생길 수 있으니 에 유의해야 한다. 컴퓨터의 동작원리 컴퓨터의 동작원리 CPU RAM Hard Drive 중앙처리장치 주기억장치 보조기억장치 매우 빠름 빠름 매우 느림 기억장치에서 데이터를 받아들여 연산작업 전원이 꺼지면 데이터가 지워짐 전원이 꺼져도 데이터가 지워지지 않음 RAM은 하드 디스크에서 데이터를 불러오고 CPU는 RAM에 저장되어 있는 데이터를 이용하여 연산 작업을 수행하는 구조이다…","frontmatter":{"date":"December 14, 2022","title":"Cache와 Caching","categories":"개발지식","author":"JungSany","emoji":"🏦"},"fields":{"slug":"/knowledge/cache-caching/"}},"next":{"id":"7dcb98a7-3574-531f-89d6-616bd4058e30","html":"<ul>\n<li>각 주제에 따라 테이블을 나누어 작성한 후, 정보를 가져오는 경우 <code class=\"language-text\">테이블을 합치는 경우</code>가 있다.</li>\n<li>이때 <code class=\"language-text\">JOIN</code>을 사용하게 되는데, 그 중 많이 사용하는 것이 <code class=\"language-text\">LEFT JOIN</code>과 <code class=\"language-text\">INNER JOIN</code>이다.</li>\n</ul>\n<br/>\n<h3 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h3>\n<ul>\n<li>두 테이블에서 <code class=\"language-text\">JOIN</code>을 위한 <strong>기준 열이 서로 값을 가지고 있는 경우</strong> 조회에서 <strong>누락되는 행은 존재하지 않는다.</strong></li>\n<li>그렇다면 <code class=\"language-text\">LEFT JOIN</code>과 <code class=\"language-text\">INNER JOIN</code>은 같은 조회 결과를 보인다. 이때, <strong><code class=\"language-text\">INNER JOIN</code>이 상대적으로 성능이 좋다</strong>고 한다.</li>\n</ul>\n<br/>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ul>\n<li><code class=\"language-text\">LEFT JOIN</code>은 <strong>합집합</strong>, <code class=\"language-text\">INNER JOIN</code>은 <strong>교집합</strong>이다.</li>\n<li>결과가 같다면 <code class=\"language-text\">LEFT JOIN</code>대신 <code class=\"language-text\">INNER JOIN</code> 을 사용하는게 좋다.</li>\n</ul>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 13, 2022","title":"SQL - LEFT JOIN, INNER JOIN 차이","categories":"개발지식 데이터","author":"JungSany","emoji":"📂"},"fields":{"slug":"/data/left-inner-join/"}},"prev":{"id":"ba1ad312-43f5-587d-8f44-2e99fae381e3","html":"<ul>\n<li>Software as a Service의 약어</li>\n<li>클라우드 기반의 소프트웨어 제공 모델</li>\n<li>클라우드 제공업체가 클라우드 애플리케이션 소프트웨어를 개발 및 유지 관리하고, 자동 소프트웨어 업데이트를 제공하고, 인터넷을 통해 Pay-as-you-Go 방식으로 고객에게 소프트웨어를 제공</li>\n<li>보통 클라우드 제공업체는 미들웨어, 애플리케이션 소프트웨어, 보안을 포함한 모든 하드웨어 및 전통적인 소프트웨어를 관리함</li>\n</ul>\n<br/>\n<h3 id=\"이점\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%90\" aria-label=\"이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이점</h3>\n<ul>\n<li>이용 클라이언트는 <code class=\"language-text\">비용을 줄일 수 있음</code></li>\n<li>온프레미스 시스템 및 소프트웨어를 유지 관리할 때보다 더 <code class=\"language-text\">빠르게</code> 비지니스 <code class=\"language-text\">솔루션</code>을 배포, 확장, 업그레이드 등 <code class=\"language-text\">관리할 수 있음</code></li>\n<li>총 <code class=\"language-text\">소요 비용</code>을 더 정확하게 <code class=\"language-text\">예측 가능</code></li>\n</ul>\n<br/>\n<h3 id=\"saas의-예\" style=\"position:relative;\"><a href=\"#saas%EC%9D%98-%EC%98%88\" aria-label=\"saas의 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>SaaS의 예</strong></h3>\n<ul>\n<li><strong><a href=\"https://freshdesk.com/ko/resources/\">Freshdesk</a></strong></li>\n<li>Google Workspace (이전 GSuite)</li>\n<li>Dropbox</li>\n<li>GoToMeeting</li>\n</ul>\n<br/>\n<h3 id=\"유사-다른-용어\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%82%AC-%EB%8B%A4%EB%A5%B8-%EC%9A%A9%EC%96%B4\" aria-label=\"유사 다른 용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유사 다른 용어</h3>\n<ul>\n<li><strong>IaaS</strong>\n<ul>\n<li>Infrastructure as a Service의 약어</li>\n<li>서비스형 인프라로 비즈니스 운영에 필요한 스토리지, 네트워킹 및 컴퓨팅 리소스를 제공</li>\n<li>IaaS의 예\n<ul>\n<li>DigitalOcean</li>\n<li>Linode</li>\n<li>Rackspace</li>\n<li>아마존 웹 서비스(AWS)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Paas</strong>\n<ul>\n<li>Platform as a Service의 약어</li>\n<li>서비스형 플랫폼을 뜻하며, 클라우드 스택 아래에서 SaaS의 다음 계층으로, 애플리케이션 및 서비스를 구축할 수 있는 플랫폼을 제공</li>\n<li>PaaS의 예\n<ul>\n<li>AWS Elastic Beanstalk</li>\n<li>Windows Azure</li>\n<li>Google App Engine</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://blog.kakaocdn.net/dn/scwJn/btqIVIi9FuX/03Q2Lk0NSzn63lA4mfo1J0/img.jpg\" alt=\"클라우드 서비스 모델 비교 이미지\"></p>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://www.redhat.com/ko/topics/cloud-computing/public-cloud-vs-private-cloud-and-hybrid-cloud\">클라우드 컴퓨팅의 유형</a></p>\n<p><a href=\"https://www.oracle.com/kr/applications/what-is-saas/\">SaaS 에 대해 알아보기</a></p>\n<p><a href=\"https://freshdesk.com/ko/kblogs/iaas-paas-saas/?tactic_id=4583438&#x26;utm_source=Google-AdWords&#x26;utm_medium=FD-L-Search-APAC-Korea-DSA&#x26;utm_campaign=FD-L-Search-APAC-Korea-DSA%7D&#x26;utm_term=&#x26;device=c&#x26;matchtype=&#x26;network=g&#x26;gclid=Cj0KCQjwhY-aBhCUARIsALNIC05XN10OpPkQshqqXHR4Vq3_-MUUBxPEMOSbNdcsvZNPETovOMSUClsaAqqLEALw_wcB&#x26;gclid=Cj0KCQjwhY-aBhCUARIsALNIC05XN10OpPkQshqqXHR4Vq3_-MUUBxPEMOSbNdcsvZNPETovOMSUClsaAqqLEALw_wcB\">IaaS, PaaS, and SaaS: 클라우드 서비스 모델 개요 | Freshdesk</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B4%EC%A0%90\">이점</a></li>\n<li><a href=\"#saas%EC%9D%98-%EC%98%88\"><strong>SaaS의 예</strong></a></li>\n<li><a href=\"#%EC%9C%A0%EC%82%AC-%EB%8B%A4%EB%A5%B8-%EC%9A%A9%EC%96%B4\">유사 다른 용어</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 14, 2022","title":"SaaS(서비스형 소프트웨어)란?","categories":"개발지식","author":"JungSany","emoji":"🪫"},"fields":{"slug":"/knowledge/saas/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io/","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/knowledge/cache-caching/","nextSlug":"/data/left-inner-join/","prevSlug":"/knowledge/saas/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}