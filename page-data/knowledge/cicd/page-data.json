{"componentChunkName":"component---src-templates-blog-template-js","path":"/knowledge/cicd/","result":{"data":{"cur":{"id":"44020f2a-0bc4-5092-a1b7-5d44cf0bf17b","html":"<h3 id=\"ci란\" style=\"position:relative;\"><a href=\"#ci%EB%9E%80\" aria-label=\"ci란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI란?</h3>\n<ul>\n<li><code class=\"language-text\">빌드/테스트</code> 자동화 과정</li>\n<li>자동화 프로세스인 <code class=\"language-text\">지속적인 통합(Continuous Integration)</code>을 의미하는데, CI를 성공적으로 구현할 경우 애플리케이션에 대한 새로운 코드 변경 사항이 정기적으로 빌드 및 테스트되어 공유 리포지토리에 통합되므로 여러 명의 개발자가 동시에 애플리케이션 개발과 관련된 코드 작업을 할 경우 서로 충돌할 수 있는 문제를 해결할 수 있음</li>\n<li><code class=\"language-text\">커밋할 때마다 빌드와 일련의 자동 테스트가 이루어져</code> 동작을 확인하고 변경으로 인해 문제가 생기는 부분이 없도록 보장</li>\n</ul>\n<h3 id=\"cd란\" style=\"position:relative;\"><a href=\"#cd%EB%9E%80\" aria-label=\"cd란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CD란?</h3>\n<ul>\n<li><code class=\"language-text\">배포</code> 자동화 과정</li>\n<li>지속적인 서비스 제공(Continuous Delivery) 또는 지속적인 배포(Continuous Deployment)를 의미하며 <code class=\"language-text\">상호 교환적</code>으로 사용됨</li>\n<li><code class=\"language-text\">지속적 배포</code>는 테스트 및 배포 단계를 자동화하는 DevOps 방식을 논리적 극한까지 끌어 올림\n<ul>\n<li>코드 변경이 파이프라인의 이전 단계를 모두 성공적으로 통과하면 수동 개입 없이 해당 변경 사항이 프로덕션에 자동으로 배포 됨</li>\n</ul>\n</li>\n<li><code class=\"language-text\">지속적 배포</code>는 또한 성숙하고 입증된 지속적 통합 및 지속적인 전달 단계를 기반으로 함\n<ul>\n<li>간단한 코드 변경이 정기적으로 마스터에 커밋되고, 자동화된 빌드 및 테스트 프로세스를 거치며 다양한 사전 프로덕션 환경으로 승격되며, 문제가 발생되지 않으면 최종적으로 배포됨</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://www.redhat.com/cms/managed-files/styles/wysiwyg_full_width/s3/ci-cd-flow-desktop.png?itok=2EX0MpQZ\" alt=\"CI/CD 프로세스\"></p>\n<h3 id=\"ci--cd-종류\" style=\"position:relative;\"><a href=\"#ci--cd-%EC%A2%85%EB%A5%98\" aria-label=\"ci  cd 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI / CD 종류</h3>\n<ul>\n<li>Jenkins</li>\n<li>CircleCI</li>\n<li>TravisCI</li>\n<li>Github Actions</li>\n<li>etc</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://www.redhat.com/ko/topics/devops/what-is-ci-cd\">RedHat Ci/CD</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=0Emq5FypiMM\">드림코딩 Ci/CD</a></p>\n<p><a href=\"https://seosh817.tistory.com/104\">seosh817님 글</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#ci%EB%9E%80\">CI란?</a></li>\n<li><a href=\"#cd%EB%9E%80\">CD란?</a></li>\n<li><a href=\"#ci--cd-%EC%A2%85%EB%A5%98\">CI / CD 종류</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","excerpt":"CI란?  자동화 과정 자동화 프로세스인 을 의미하는데, CI를 성공적으로 구현할 경우 애플리케이션에 대한 새로운 코드 변경 사항이 정기적으로 빌드 및 테스트되어 공유 리포지토리에 통합되므로 여러 명의 개발자가 동시에 애플리케이션 개발과 관련된 코드 작업을 할 경우 서로 충돌할 수 있는 문제를 해결할 수 있음  동작을 확인하고 변경으로 인해 문제가 생기는 부분이 없도록 보장 CD란?  자동화 과정 지속적인 서비스 제공(Continuous Delivery) 또는 지속적인 배포(Continuous Deployment)를 의미하며 으로 사용됨 는 테스트 및 배포 단계를 자동화하는 DevOps 방식을 논리적 극한까지 끌어 올림 코드 변경이 파이프라인의 이전 단계를 모두 성공적으로 통과하면 수동 개입 없이 해당 변경 사항이 프로덕션에 자동으로 배포 됨 는 또한 성숙하고 입증된 지속적 통합 및 지속적인 전달 단계를 기반으로 함 간단한 코드 변경이 정기적으로 마스터에 커밋되고, 자동화된 빌드 …","frontmatter":{"date":"December 09, 2022","title":"CI/CD에 대해서","categories":"개발지식","author":"JungSany","emoji":"🚠"},"fields":{"slug":"/knowledge/cicd/"}},"next":{"id":"434a8d47-bed3-5344-9533-3041bf2d0a13","html":"<h3 id=\"정의\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h3>\n<ul>\n<li>애플리케이션을 트리의 각 노드들 즉, 일종의 나무와 같이 보고 나무를 흔들면 죽은 잎사귀들이 떨어지는 모습에 착안해 <code class=\"language-text\">Tree-shaking</code>이라고 명명하였다고 한다.</li>\n<li>사용하지 않는 코드를 제거하는 기법</li>\n</ul>\n<br/>\n<h3 id=\"방법\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EB%B2%95\" aria-label=\"방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방법</h3>\n<ol>\n<li><strong>import시, 필요한 것만 작성하여 사용</strong></li>\n</ol>\n<ul>\n<li>사용하는 모듈로부터 <code class=\"language-text\">전체를 import 하지않고 사용하는 기능만 {} 부분적</code>으로 <code class=\"language-text\">import</code> 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 모들 유틸을 가져온다.</span>\n<span class=\"token comment\">// import utils from '../tensorflow/utils';</span>\n\n<span class=\"token comment\">// 위의 방법처럼 모든 유틸이 아닌 유틸의 일부만 가져온다.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> drawKeyPoints<span class=\"token punctuation\">,</span> drawSkeleton <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../tensorflow/utils'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">drawCanvas</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pose<span class=\"token punctuation\">,</span> video<span class=\"token punctuation\">,</span> videoWidth<span class=\"token punctuation\">,</span> videoHeight<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">,</span> flag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> minPartConfidence <span class=\"token operator\">=</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> videoWidth<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> videoHeight<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">drawSkeleton</span><span class=\"token punctuation\">(</span>pose<span class=\"token punctuation\">.</span>keypoints<span class=\"token punctuation\">,</span> minPartConfidence<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">drawKeyPoints</span><span class=\"token punctuation\">(</span>pose<span class=\"token punctuation\">.</span>keypoints<span class=\"token punctuation\">,</span> minPartConfidence<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> drawCanvas<span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<ol start=\"2\">\n<li><strong>Babel이 ES6 모듈을 commonjs module로 변환하지 않도록 조치(.babelrc 설정)</strong></li>\n</ol>\n<ul>\n<li>Babel은 대부분의 웹 애플리케이션에서 필수로 사용하는 도구 중 하나 이지만 <code class=\"language-text\">babel-preset-env</code>를 사용중에 있다면 <code class=\"language-text\">ES6</code>를 자동으로 <code class=\"language-text\">commonjs</code>로 <code class=\"language-text\">변환</code>한다.</li>\n<li>좋은 기능이지만 트리 쉐이킹 관점에서는 그렇지 못하다고 한다.</li>\n<li><code class=\"language-text\">.babelrc</code>에서 <code class=\"language-text\">commonjs</code>로 변환하지 못하도록 설정을 추가해 줘야한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// “modules”: false를 지정하면, Babel이 디펜던시를 분석하고 사용되지 않는 디펜던시를 제거할 수 있다.</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"modules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>또한 위와 같이 설정을 하면 웹팩은 코드를 광범위하게 호환되는 형식으로 변환하므로, 이 프로세스는 호환성 문제를 일으키지 않는다고 한다.</li>\n</ul>\n<br/>\n<ol start=\"3\">\n<li><strong>프로젝트의 모듈들이 Tree Shaking시, <code class=\"language-text\">Side Effect를 발생시키는지 여부를 확인</code>해야 한다.(package.json 설정)</strong></li>\n</ol>\n<ul>\n<li>예측 가능한 입력을 가지고 동일하게 함수의 스코프 밖에 어떤 것도 변경하지 않으면서 예측 가능한 결과를 반환하는 모듈이 안전하게 트리쉐이킹 할 수 있는 Dependency이다.</li>\n<li>이때 말하는 <code class=\"language-text\">**Side Effect**</code>의 예시는 아래와 같이 설명할 수 있을 것 같습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 함수가 함수밖에 선언된 무언가를 변경할 때, 실행에 대한 Side Effect가 일어난다고할 수 있다.</span>\n<span class=\"token keyword\">let</span> sheriffs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jung'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gim'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gong'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이때 console을 찍으면 위에 배열안의 요소만 출력된다. [\"jung\", \"gim\", \"gong\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sheriffs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addSheriff</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sheriff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  sheriffs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sheriff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 아래의 함수는 sheriffs의 배열을 변경할 때 Side Effect를 발생시킨다.</span>\n<span class=\"token function\">addSheriff</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sheriffs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"jung\", \"gim\", \"gong\", \"pack\"]</span></code></pre></div>\n<ul>\n<li>이때 웹팩을 설정하여 <code class=\"language-text\">Side Effect 옵션 체킹</code>이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// \"sideEffects\": false를 설정하면 패키지와 Dependency들이 Side Effect를 발생하지 않게 막는다.</span>\n<span class=\"token comment\">// Side Effect가 일어나는 것에 대해서 웹팩에서 판단하지않고 개발자가 위임받아 개발자가 알아서 처리하는 방식</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poke_poke_coaching\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sideEffects\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 특정 파일을 지정하여 선택적으로 사이드 이펙트의 영향을 받지 않도록 설정</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poke_poke_coaching\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sideEffects\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\".src/util/helpers/drawCanvas.js\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"생각\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81\" aria-label=\"생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각</h3>\n<ul>\n<li>이러한 작업들이 서비스 개발 단계에 있어서 큰 영향을 미치진 않겠지만, 이런 디테일한 작업들이 습관화 된다면 결국 서비스의 퀄리티를 결정하는 요소라고 생각한다.</li>\n<li>하지만 위의 방법으로 인해 문제가 생기는 경우가 있는가에 대해서는 더 찾아봐야 할 것 같다.</li>\n<li>그리고 로데쉬 함수로도 트리쉐이킹 방법이 있다고 하니 추가적으로 알아봐야 될 것이 있는 것 같다.</li>\n</ul>\n<br/>\n<h3 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h3>\n<p>Side Effect: <code class=\"language-text\">의도치않은 결과, 렌더링 중에 발생하는 것이 아니라 \"측면\"에서 발생하는 것</code> 또는 함수가 실행되면 함수 외부에 존재하는 값이나 상태를 변경시키는 등의 행위</p>\n<ul>\n<li><code class=\"language-text\">절차형 프로그래밍</code>에서는 Side Effect가 흔히 존재하였고, 이는 프로그램을 읽기 어렵게하고 실행상태를 예측하기 어렵게 하며 개발비용을 증가 시켰다.</li>\n<li>이에 따라 <code class=\"language-text\">선언형 프로그래밍</code> 방식으로 지향하게 되면서 Side Effect를 최소화 하는 방향으로 바뀌고 있다.\n<ul>\n<li>선언형 프로그래밍 방식을 사용하게 되면 함수가 매개변수를 통해 연산을 수행하게 되면 함수에 작성된 로직대로 <code class=\"language-text\">일관되고 예측 가능한 결과과 반환</code>되기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://webpack.kr/guides/tree-shaking/\">웹팩 Tree Shaking</a></p>\n<p><a href=\"https://engineering.linecorp.com/ko/blog/typescript-enum-tree-shaking/\">TypeScript enum을 사용하지 않는 게 좋은 이유를 Tree-shaking 관점에서 소개합니다.</a></p>\n<p><a href=\"https://ui.toast.com/weekly-pick/ko_20180716\">트리 쉐이킹으로 자바스크립트 페이로드 줄이기</a></p>\n<p><a href=\"https://yceffort.kr/2021/08/javascript-tree-shaking\">트리쉐이킹으로 자바스크립트 사이즈 줄이기</a></p>\n<p><a href=\"https://medium.com/@jang.wangsu/di-dependency-injection-%EC%9D%B4%EB%9E%80-1b12fdefec4f\">Dependency Infection</a></p>\n<p><a href=\"https://brunch.co.kr/@swimjiy/24\">번들링도 미니멀리즘이 필요하다.</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%A0%95%EC%9D%98\">정의</a></li>\n<li><a href=\"#%EB%B0%A9%EB%B2%95\">방법</a></li>\n<li><a href=\"#%EC%83%9D%EA%B0%81\">생각</a></li>\n<li><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 09, 2022","title":"트리 쉐이킹(Tree Shaking)","categories":"개발지식 최적화","author":"JungSany","emoji":"🧹"},"fields":{"slug":"/knowledge/treeshaing/"}},"prev":{"id":"c9b0fdcf-6311-5793-803a-fc08e506ce4c","html":"<p>면접에서 기술질문으로 아래와 같은 질문을 받게되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">💡 React에서 component, page 마다 import가 많고 대규모의 서비스를 진행하는 경우 최적화하는 방법을 아는가?</code></pre></div>\n<p>나는 위와 같은 질문을 받고 <code class=\"language-text\">import</code>와 관련된 최적화 방안에 대해 질문한 것이라고 생각은 들었지만, 알지못하여서 답변으로는 아래와 같이 말을 하게 되었다.</p>\n<p>아직까지는 대규모 프로젝트를 진행해본 경험이 없다. 하지만 2차례의 프로젝트를 진행하면서 최적화 방안으로 사용하거나 학습한 바로는 관심사의 분리나 단일 책임원칙을 적용하여, 컴포넌트가 최대한 한개의 기능을 수행하게 작성하거나 분리를 하고 공통으로 사용되는 코드는 분리하여, 코드의 양을 줄이고 최소화는 방법을 이야기하였다.</p>\n<p>그 후 추가적으로 <code class=\"language-text\">React.memo</code>와 <code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>에 대해 말을 하였지만 면접관의 질문에 대한 답변을 말한 것이 아니여서 이 글을 작성하게 되었다.</p>\n<br/>\n<h3 id=\"지금-드는-생각\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EA%B8%88-%EB%93%9C%EB%8A%94-%EC%83%9D%EA%B0%81\" aria-label=\"지금 드는 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지금 드는 생각</h3>\n<p>단순하게 최적화를 하기위해서는 코드를 적재적소에 사용한다. 라는 생각이 들게 되었는데 이유는 작성한 코드들이 항상 사용되는 것이 아니여서 필요할 경우에만 사용하면 된다 라는 생각이 들었다. 그래서 다음 면접시, 모르는 답안이 나올 경우 큰 맥락을 생각하여 큰 맥락이라도 이야기를 한다면 좀 더 좋은 인상을 주었을 것 같다고 생각하였다.</p>\n<br/>\n<h3 id=\"그래서-대규모-서비스-최적화-방안에는-어떤-것이-있는가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EC%95%88%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%B4-%EC%9E%88%EB%8A%94%EA%B0%80\" aria-label=\"그래서 대규모 서비스 최적화 방안에는 어떤 것이 있는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 대규모 서비스 최적화 방안에는 어떤 것이 있는가?</h3>\n<p>기본적으로 <strong>웹 사이트의 속도를 올리기 위해서는 큰 파일의 용량을 줄여야하는데, 크게 코드의 크기를 줄이는 방법(트리쉐이킹 등)과 코드를 분할하는 방법이 있다.</strong></p>\n<br/>\n<ol>\n<li><strong>웹팩 설정을 이용한 코드 스플리팅(Code Splitting)</strong></li>\n</ol>\n<ul>\n<li>Webpack에서는 코드를 분할 하기위해, 목적 별로 여러 <code class=\"language-text\">Entry</code>로 분할이 가능하다.\n<ul>\n<li>이것은 <code class=\"language-text\">하나의 큰 번들을 여러개의 작은 번들로 분할</code>해준다.</li>\n<li>풀어서 설명하면 페이지 별로 분할 할 수 있고, 특정 렌더링을 위한 코드로 분할하여 각페이지에서 사용할 수 있게 된다.</li>\n<li>하지만 <code class=\"language-text\">Entry</code>로 분할된 파일에는 모듈들이 모두 포함되어 파일의 크기가 커지게 되는데, <code class=\"language-text\">Webpack</code>의 <code class=\"language-text\">SplitChunksPlugin</code>을 이용하여 파일의 크기를 개선할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">another</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/another-module.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].bundle.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">cacheGroups</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// commons에 설정한 값은 각각의 entry가 공통적으로 사용하여, 중복되는 module들을 chunk 파일로 추출하게 된다.</span>\n        <span class=\"token literal-property property\">commons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<ol start=\"2\">\n<li><strong>동적 코드 분할 Dynamic Import (Lazy, Suspense)</strong></li>\n</ol>\n<ul>\n<li>\n<p>대부분의 코드들은 사용자가 보는 첫 페이지에서는 필요하지 않다.</p>\n</li>\n<li>\n<p>그렇기 때문에 첫 페이지 진입시 필요한 최소한의 코드만 다운 받고, 사용자가 특정 페이지나 위치에 도달할 때마다 코드로 로드 한다면, 성능을 올릴 수 있다.</p>\n</li>\n<li>\n<p>정적 Module Import를 필요한 시점에 로드 할 수 있도록 도와준다.</p>\n</li>\n<li>\n<p>React에서는 <code class=\"language-text\">Lazy</code>를 이용하여, Component를 <strong>사용되는 시점에 사용할 수 있도록 구현하는 방식</strong>이 가능하다.</p>\n<details>\n<summary>Lazy, Suspense 사용방법</summary>\n<div markdown=\"1\">\n<ul>\n<li><code class=\"language-text\">Lazy</code>는 <code class=\"language-text\">컴포넌트</code>를 렌더링할 때 <code class=\"language-text\">비동기적으로 로딩</code>하게 해주는 함수</li>\n<li><code class=\"language-text\">Suspense</code>는 코드 스플리팅되어 <code class=\"language-text\">로딩되지 않은 컴포넌트를 로딩하게 만들</code>어주거나 옵션으로 로딩이 끝나지 않았을 때 보여줄 <code class=\"language-text\">UI를 구성</code>할 수 있다.\n<ul>\n<li><code class=\"language-text\">fallback</code>은 로딩중 일 때 보여줄 UI의 코드 또는 컴포넌트를 넣는 공간</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lazy<span class=\"token punctuation\">,</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// lazy</span>\n<span class=\"token keyword\">const</span> 변수명 <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>컴포넌트경로<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Suspense</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fallback 코드 또는 컴포넌트<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  &lt;컴포넌트>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n</div>\n</details>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/Hello.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!!!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hello<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// src/App.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> lazy<span class=\"token punctuation\">,</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Hello <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Code Splitting</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loding...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>visible <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위의 코드로 테스트 진행 시, 네트워크 탭의 설정을 느린 3g로 바꾸어 확인한다면 Suspense fallback에 작성한 코드를 확인할 수 있다.</li>\n</ul>\n<br/>\n<ol start=\"3\">\n<li><strong>트리 쉐이킹 적용</strong></li>\n</ol>\n<ul>\n<li><a href=\"https://rnfltpgus.github.io/treeshaing/\">트리 쉐이킹(Tree Shaking)</a></li>\n</ul>\n<br/>\n<h3 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h3>\n<p><strong>Entry(입력 파일 경로)</strong> : 명시된 파일을 기준으로 의존성 트리를 만들어 하나의 번들 파일을 만들어 낸다.</p>\n<p><strong>Output (출력 디렉터리와 파일 이름)</strong>: 다른 디렉터리와 파일로 변경할 수 있다. (설정은 항상 프로젝트 디렉터리 내부라는 보장이 없기 때문에 절대 결로로 한다는 점 주의해야 한다.)</p>\n<p><strong>Loader (로더 등록)</strong>: Css나 이미지, 웹폰트, JSX, VUE 등 다양한 종류의 파일을 함께 번들링할 수 있다.</p>\n<p><strong>Plugin (플러그인 등록)</strong>: 로더로 설정이 애매한 부분들을 커버할 수 있음</p>\n<p><strong>chunk</strong>: 애플리케이션 코드를 각각 다른 파일로 나눈 것</p>\n<p><strong>SplitChunksPlugin:</strong> 초기 청크를 변경하면 HTML 파일이 프로젝트를 실행하기 위해 포함해야 하는 스크립트 태크에 영향을 미치기 때문에 기본적으로 on-demand 청크에만 영향을 미침</p>\n<ul>\n<li>원래 청크(및 그 안에 가저온 모듈)는 webpack 내부 그래프에서 부모-자식 관계로 연결되어있는데, <code class=\"language-text\">commonsChunkPlugin</code>은 중복되는 의존성을 피하고자 사용되었지만, 추가 최적화는 불가능하여 webpack v4부터 <code class=\"language-text\">optimization.splitChunks</code>를 위해 <code class=\"language-text\">CommonsChounkPlugin</code>은 사용하지 않음</li>\n<li>다음 조건에 따라 자동으로 청크를 분할\n<ul>\n<li>새 청크를 공유할 수 있거나 모듈이 <code class=\"language-text\">node_modules</code> 폴더에 있는 경우</li>\n<li>새 청크가 20kb보다 클 경우(min + gz 이전에)</li>\n<li>요청 시 청크로 로드할 때 최대 병렬 요청 수가 30개 이하일 경우</li>\n<li>초기 페이지 로드 시 최대 병렬 요청 수가 30개 이하일 경우\n마지막 두가지 조건을 충족하려고 할 때 더 큰 청크가 선호 됨</li>\n</ul>\n</li>\n</ul>\n<p><strong>Third-Party</strong>: <a href=\"https://rnfltpgus.github.io/3rd-party/\">써드 파티(3rd party)란?</a></p>\n<p><strong>Tree Shaking:</strong> <a href=\"https://rnfltpgus.github.io/treeshaing/\">트리 쉐이킹(Tree Shaking)</a></p>\n<p><strong><a href=\"https://ko.reactjs.org/docs/faq-structure.html\">코로케이션(colocation)</a>:</strong> 자주 함께 변경되는 파일들을 같이 보관하는 것</p>\n<p><strong>아토믹 디자인:</strong> 원자 설계는 설계 시스템을 만드는 방법론이다. ( <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#atoms\">원자</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#molecules\">분자</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#organisms\">유기체</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#templates\">템플릿</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#pages\">페이지</a>)</p>\n<ul>\n<li>클라이언트와 팀 구성원이 아토믹 디자인에서 배치된 단계를 단계별로 보면서 시스템의 개념을 더 잘 이해할 수 있다.</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://webpack.kr/plugins/split-chunks-plugin/\">SplitChunksPlugin | 웹팩</a></p>\n<p><a href=\"https://www.daleseo.com/webpack-config/\">웹팩(Webpack) 기본 설정법 (Entry/Output/Loader/Plugins)</a></p>\n<p><a href=\"https://godsenal.com/posts/Webpack-%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%94%8C%EB%A6%AC%ED%8C%85/\">Webpack을 이용한 코드 스플리팅</a></p>\n<p><a href=\"https://web.dev/i18n/ko/code-splitting-suspense/\">React.lazy 및 Suspense를 사용한 코드 분할</a></p>\n<p><a href=\"https://velog.io/@velopert/react-code-splitting\">리액트 프로젝트 코드 스플리팅 정복하기</a></p>\n<p><a href=\"https://ui.toast.com/weekly-pick/ko_20180716\">트리 쉐이킹으로 자바스크립트 페이로드 줄이기</a></p>\n<p><a href=\"https://devowen.com/342\">[React] 코드 스플리팅(Code Splitting)</a></p>\n<p><a href=\"https://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</a></p>\n<br />\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%A7%80%EA%B8%88-%EB%93%9C%EB%8A%94-%EC%83%9D%EA%B0%81\">지금 드는 생각</a></li>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EC%95%88%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%B4-%EC%9E%88%EB%8A%94%EA%B0%80\">그래서 대규모 서비스 최적화 방안에는 어떤 것이 있는가?</a></li>\n<li><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 10, 2022","title":"React 대규모의 서비스 최적화 방안","categories":"React 개발지식 최적화","author":"JungSany","emoji":"🪦"},"fields":{"slug":"/react/optimization-plan/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/knowledge/cicd/","nextSlug":"/knowledge/treeshaing/","prevSlug":"/react/optimization-plan/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}