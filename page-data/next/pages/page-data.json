{"componentChunkName":"component---src-templates-blog-template-js","path":"/next/pages/","result":{"data":{"cur":{"id":"da1d7bbe-8b01-50ea-b07e-560d315e5241","html":"<p>기본적으로 Next.js는 모든 페이지를 사전렌더링 한다고 공식문서에 적혀있다.</p>\n<p>사전렌더링이라 하면, 클라이언트 측 JavaScript에서 모든 작업을 수행하는 대신 미리 각 페이지에 대한 HTML을 생성해 성능효과와 SEO를 얻을 수 있다.</p>\n<br/>\n<h2 id=\"next에서-존재하는-두-가지의-렌더링-방식\" style=\"position:relative;\"><a href=\"#next%EC%97%90%EC%84%9C-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EB%91%90-%EA%B0%80%EC%A7%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%B0%A9%EC%8B%9D\" aria-label=\"next에서 존재하는 두 가지의 렌더링 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next에서 존재하는 두 가지의 렌더링 방식</h2>\n<p>두 개의 차이점은 페이지에 대한 HTML을 생성할 때 이루어 진다.</p>\n<ul>\n<li><strong>정적 생성(권장): HTML은 빌드 시 생성되며, 각 요청에서 재사용된다.</strong></li>\n<li><strong>서버측 렌더링: HTML은 각 요청에서 생성된다. (<code class=\"language-text\">SSR</code>또는 <code class=\"language-text\">동적 렌더링</code> 이라고도 한다.)</strong></li>\n</ul>\n<br/>\n<h3 id=\"공식문서에서는\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C%EC%97%90%EC%84%9C%EB%8A%94\" aria-label=\"공식문서에서는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>공식문서에서는</strong></h3>\n<p><code class=\"language-text\">성능상의 이유로 서버 측 렌더링 보다 정적 생성을 사용하는 것이 좋다고 한다.</code> 설명을 하자면 정적으로 생성된 페이지는 성능 향상을 위한 추가 구성 없이 CDN에 의해 캐시를 할 수 있어서라고 한다. 하지만 경우에 따라 서버측 렌더링이 유일한 경우가 있다고 한다.</p>\n<br/>\n<h2 id=\"정적-생성\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EC%83%9D%EC%84%B1\" aria-label=\"정적 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 생성</h2>\n<ul>\n<li>페이지가 정적 생성을 사용하는 경우, <code class=\"language-text\">next build</code>시 HTML이 생성되게 되는데, 이 HTML은 각 요청에서 재사용된다.(CDN에서 캐시할 수 있음)</li>\n<li>데이터가 없거나 있는 경우를 정적으로 생성할 수 있다.</li>\n</ul>\n<br/>\n<h3 id=\"데이터-없는-정적-생성의-경우\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%86%EB%8A%94-%EC%A0%95%EC%A0%81-%EC%83%9D%EC%84%B1%EC%9D%98-%EA%B2%BD%EC%9A%B0\" aria-label=\"데이터 없는 정적 생성의 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>데이터 없는 정적 생성의 경우</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 아래의 코드는 외부 데이터를 가져오는 코드가 없다.</span>\n<span class=\"token comment\">// 때문에 Next.js에서는 빌드 시간 동안 페이지당 단일 HTML 파일을 생성한다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">About</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">About</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> About<span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"데이터를-사용한-정적-생성인-경우\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%A0%95%EC%A0%81-%EC%83%9D%EC%84%B1%EC%9D%B8-%EA%B2%BD%EC%9A%B0\" aria-label=\"데이터를 사용한 정적 생성인 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>데이터를 사용한 정적 생성인 경우</strong></h3>\n<p>외부 데이터를 가져와 사용해야하는 경우에는 두개의 방법이 존재한다.</p>\n<br/>\n<ol>\n<li>페이지 <strong>콘텐츠</strong>가 외부 데이터에 따라 다른 경우 <code class=\"language-text\">getStaticProps</code>사용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Blog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getStaticProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://.../posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<ol start=\"2\">\n<li>페이지 <strong>경로</strong>가 외부 데이터에 따라 다른 경우 <code class=\"language-text\">getStaticPaths</code>사용 (일반적으로 <code class=\"language-text\">getStaticProps</code>에 추가 작성됨)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Blog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getStaticPaths</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://.../posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> paths<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">fallback</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getStaticProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://.../posts/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"서버측-렌더링ssr\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84%EC%B8%A1-%EB%A0%8C%EB%8D%94%EB%A7%81ssr\" aria-label=\"서버측 렌더링ssr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버측 렌더링(SSR)</h2>\n<ul>\n<li>페이지가 서버 측 렌더링을 사용하는 경우 <code class=\"language-text\">각 요청에서 페이지 HTML이 생성</code>된다.</li>\n<li><strong>Server-side Rendering</strong>를 사용하기 위해서는 <code class=\"language-text\">export와 async 함수</code>가 필요하다.(모든 요청이 서버에 의해 호출되기 때문)</li>\n<li>자주 업데이트가 되는 데이터(외부 API에서 가져오는 경우)를 미리 렌더링해야 하는 경우 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> LineChart <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/chart/LineChart'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> StackedBarChart <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/chart/StackedBarChart'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DoughnutChart <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/chart/DoughnutChart'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> covidStateUrl<span class=\"token punctuation\">,</span> covidAgeCaseUrl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../api'</span>\n\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CovidState</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">confCase</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">stateDt</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">stateTime</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CovidAgeCaseInfo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">confCase</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">stateDt</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">gubun</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DashboardProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">covidStateList</span><span class=\"token operator\">:</span> CovidState<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">covidAgeCaseList</span><span class=\"token operator\">:</span> CovidAgeCaseInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Dashboard</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> covidStateList<span class=\"token punctuation\">,</span> covidAgeCaseList <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> DashboardProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DashboardContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LineChart</span></span> <span class=\"token attr-name\">covidStateList</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>covidStateList<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">TopContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowLeftContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StackedBarChart</span></span> <span class=\"token attr-name\">covidAgeCaseList</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>covidAgeCaseList<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RowLeftContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowRightContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DoughnutChart</span></span> <span class=\"token attr-name\">covidAgeCaseList</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>covidAgeCaseList<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RowRightContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RowContainer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DashboardContainer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Dashboard<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getServerSideProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> covidState <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>covidStateUrl <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> covidAgeCase <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>covidAgeCaseUrl <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>covidState <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>covidAgeCase<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">covidStateList</span><span class=\"token operator\">:</span> covidState<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">covidAgeCaseList</span><span class=\"token operator\">:</span> covidAgeCase<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li><strong>Next.js</strong>를 사용하면 각 페이지에 사용할 <code class=\"language-text\">사전렌더링 방식을 선택</code>하여 <code class=\"language-text\">페이지를 구성</code>할 수 있기 때문에 <strong>성능적인 퍼포먼스</strong>나 정적생성과, 서버측 렌더링을 통한 <strong>하이브리드 앱을 만들 수 있다</strong>는 <strong>강점</strong>이 있는 것 같다.</li>\n<li>페이지를 한 번 빌드하고 CDN에서 제공할 수 있으므로 가능한 한 <strong>정적 생성</strong> (데이터 포함 및 제외)을 사용하는 것이 좋다. (<strong>요청이 있을 때마다 서버에서 페이지를 렌더링하는 것보다 훨씬 빠르기 때문</strong>)</li>\n<li><strong>정적생성과 서버사이드 렌더링 방식 중 어떤 방법이 좋을 까를 생각을 때,</strong> <code class=\"language-text\">사용자 요청에 앞서 페이지를 미리 렌더링할 것인가?</code> 를 생각하고 선택해야 할 것 같다.\n<ul>\n<li><strong>클라이언트측 데이터 가져오기</strong>와 함께 정적 생성 사용 : 페이지의 일부를 사전 렌더링하지 않고 클라이언트측 JavaScript를 사용하여 채울 수 있다.</li>\n<li><strong>서버측 렌더링</strong> 사용 : 페이지를 CDN에서 캐시할 수 없기 때문에 속도가 느려지지만 미리 렌더링된 페이지는 항상 최신 상태이다.</li>\n</ul>\n</li>\n<li>정적 생성은 마케팅 페이지, 블로그 게시물 및 포트폴리오, 전자상거래 제품 목록, 도움말 및 설명서를 구축할 때 사용하는 것이 좋다고 한다.</li>\n</ul>\n<br/>\n<h3 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h3>\n<p><a href=\"https://aws.amazon.com/ko/what-is/cdn/\">CDN(콘텐츠 전송 네트워크)</a>: 데이터 사용량이 많은 애플리케이션의 웹 페이지 로드 속도를 높이는 상호 연결된 서버 네트워크</p>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://nextjs.org/docs/basic-features/pages\">Basic Features: Pages | Next.js</a></p>\n<p><a href=\"https://aws.amazon.com/ko/what-is/cdn/\">CDN이란 무엇인가요? - CDN 설명 - AWS</a></p>\n<p><a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-static-props\">Data Fetching: getStaticProps | Next.js</a></p>\n<p><a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-static-paths\">Data Fetching: getStaticPaths | Next.js</a></p>\n<p><a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\">Data Fetching: getServerSideProps | Next.js</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#next%EC%97%90%EC%84%9C-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EB%91%90-%EA%B0%80%EC%A7%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%B0%A9%EC%8B%9D\">Next에서 존재하는 두 가지의 렌더링 방식</a></p>\n<ul>\n<li><a href=\"#%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C%EC%97%90%EC%84%9C%EB%8A%94\"><strong>공식문서에서는</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EC%A0%81-%EC%83%9D%EC%84%B1\">정적 생성</a></p>\n<ul>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%86%EB%8A%94-%EC%A0%95%EC%A0%81-%EC%83%9D%EC%84%B1%EC%9D%98-%EA%B2%BD%EC%9A%B0\"><strong>데이터 없는 정적 생성의 경우</strong></a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%A0%95%EC%A0%81-%EC%83%9D%EC%84%B1%EC%9D%B8-%EA%B2%BD%EC%9A%B0\"><strong>데이터를 사용한 정적 생성인 경우</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%84%9C%EB%B2%84%EC%B8%A1-%EB%A0%8C%EB%8D%94%EB%A7%81ssr\">서버측 렌더링(SSR)</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n<ul>\n<li><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"기본적으로 Next.js는 모든 페이지를 사전렌더링 한다고 공식문서에 적혀있다. 사전렌더링이라 하면, 클라이언트 측 JavaScript에서 모든 작업을 수행하는 대신 미리 각 페이지에 대한 HTML을 생성해 성능효과와 SEO를 얻을 수 있다. Next에서 존재하는 두 가지의 렌더링 방식 두 개의 차이점은 페이지에 대한 HTML을 생성할 때 이루어 진다. 정적 생성(권장): HTML은 빌드 시 생성되며, 각 요청에서 재사용된다. 서버측 렌더링: HTML은 각 요청에서 생성된다. (또는  이라고도 한다.) 공식문서에서는  설명을 하자면 정적으로 생성된 페이지는 성능 향상을 위한 추가 구성 없이 CDN에 의해 캐시를 할 수 있어서라고 한다. 하지만 경우에 따라 서버측 렌더링이 유일한 경우가 있다고 한다. 정적 생성 페이지가 정적 생성을 사용하는 경우, 시 HTML이 생성되게 되는데, 이 HTML은 각 요청에서 재사용된다.(CDN에서 캐시할 수 있음) 데이터가 없거나 있는 경우를 정적으로…","frontmatter":{"date":"December 16, 2022","title":"Next.js의 렌더링 방식","categories":"Next","author":"JungSany","emoji":"📽️"},"fields":{"slug":"/next/pages/"}},"next":{"id":"a6ecf3ff-4304-53d6-831c-af12395a42c1","html":"<p>JWT는 웹표준으로서 두 개체에서 JSON 객체를 사용하여 가볍고 자가수용적인 방식으로 정보를 안전성 있게 전달함</p>\n<br/>\n<h3 id=\"구성요소\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구성요소</h3>\n<ul>\n<li>JWT는 <code class=\"language-text\">.</code>을 구분자로 3가지 문자열로 구성되어 있음\n<ul>\n<li>헤더(Header)\n<ul>\n<li>typ와 alg 두가지의 정보를 가지고 있는데, <code class=\"language-text\">typ</code>는 <code class=\"language-text\">토큰의 타입</code>을 지정하고 <code class=\"language-text\">alg</code>는 <code class=\"language-text\">해싱 알고리즘</code>을 지정함</li>\n<li>typ에는 JWT이기 때문에 JWT의 값이 들어가며, alg에는 기본적으로 HMAC, SHA256, RSA가 사용되며, 토큰을 검증 할 때 사용되는 signature부분에서 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token string-property property\">\"typ\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-property property\">\"alg\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>정보(Payload)\n<ul>\n<li>Payload 부분에는 <code class=\"language-text\">토큰을 담을 정보가 들어있음</code></li>\n<li>정보의 한 <code class=\"language-text\">조각</code>을 <code class=\"language-text\">클레임(Claim)</code>이라고 부르고, <code class=\"language-text\">name / value의 한 쌍</code>으로 이루어짐</li>\n<li>클레임의 종류는 총 3가지로 등록된 클레임 / 공개 클레임 / 비공개 클레임이 있음</li>\n</ul>\n</li>\n<li>서명(Signature)\n<ul>\n<li>헤더의 인코딩값과 정보의 인코딩값을 합친 후 주어진 비밀키로 해쉬를 하여 생성’</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"로그인-인증시-jwt-사용\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9D%B8%EC%A6%9D%EC%8B%9C-jwt-%EC%82%AC%EC%9A%A9\" aria-label=\"로그인 인증시 jwt 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 인증시 JWT 사용</h3>\n<ul>\n<li>JWT 토큰 사용시, 유효기간이 짧거나 길면 작업이 번거롭거나 보안에 취약함\n<ul>\n<li>이를 보안하기 위해 <code class=\"language-text\">Refresh Token</code>이 나오게 되었고, <code class=\"language-text\">Access Token</code>의 유효기간이 만료되었을 때, <code class=\"language-text\">Refresh Token</code>이 새로 발급해주는 형식</li>\n<li>이러한 방식이 <code class=\"language-text\">완벽하지는 않지만</code>, <code class=\"language-text\">탈취</code> 당할 가능성이 <code class=\"language-text\">적음</code>\n<img src=\"https://camo.githubusercontent.com/0fcc5fdd7d589d975360d4efca148bc26587b912/68747470733a2f2f7374617469632e7061636b742d63646e2e636f6d2f70726f64756374732f393738313738343339353430372f67726170686963732f4230333635335f30385f30322e6a7067\" alt=\"jwt 토큰 동작 원리\"></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"jwt-토큰은-어디에-저장을-해야-할까\" style=\"position:relative;\"><a href=\"#jwt-%ED%86%A0%ED%81%B0%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%EC%9D%84-%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"jwt 토큰은 어디에 저장을 해야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 토큰은 어디에 저장을 해야 할까?</h3>\n<ul>\n<li>정답은 없지만, 일단 저장은 <code class=\"language-text\">LocalStorage</code>와 <code class=\"language-text\">Cookie</code>에 저장할 수 있음</li>\n<li>LocalStorage\n<ul>\n<li>CSRF 공격에 안전\n<ul>\n<li>자동으로 request에 담기는 쿠키와는 다르게 Js코드에 의해 헤더에 담기므로 xss를 뚤지 않는 이상 공격자가 정상적인 사용자인 척 request를 보내기가 어렵움</li>\n</ul>\n</li>\n<li>XSS에 취약\n<ul>\n<li>공격자가 LocalStorage에 접근하는 Js코드 한줄만 주입하면, 내 집처럼 드나들 수 있음</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cookie\n<ul>\n<li>XSS 공격으로부터 LocalStorage에 비해 안전\n<ul>\n<li>쿠키의 httpOnly 옵션을 사용하면 Js에서 쿠키에 접근 자체가 불가능함(httpOnly 옵션은 서버에서 설정할 수 있음)</li>\n<li>하지만 XSS 공격으로부터 완전히 안전한 것은 아니다. Js로 request를 보낼 수 있으므로 자동으로 request에 실리는 쿠키의 특성 상 사용자의 컴퓨터에서 요청을 위조할 수 있음</li>\n<li>공격자가 귀찮을 뿐이지 XSS가 뚤린다면 httpOnly cookie도 안전하지 않음</li>\n</ul>\n</li>\n<li>CSRF 공격에 취약\n<ul>\n<li>자동으로 http request에 담아서 보내기 때문에 공격자가 request url만 안다면 사용자가 관련 link를 클릭하도록 유도하여 request를 위조하기 쉬움</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"알아야할-지식\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EC%A7%80%EC%8B%9D\" aria-label=\"알아야할 지식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알아야할 지식</h3>\n<ul>\n<li>XSS(Cross Site Scription)\n<ul>\n<li>XSS라고 부리는 이유는 CSS가 이미 약자가 있기 때문이고 code injection attack이라고 함</li>\n<li>XSS도 다양한 공격 방법이 있는데, 간단하게 <code class=\"language-text\">공격자가 의도하는 악의적인 Js코드를 피해자 웹 브라우저에서 실행시키는 것</code>으로 알면 됨</li>\n<li>이 방법으로 피해자 브라우저에 저장된 중요 정보들을 탈취 가능하게 할 수 있음</li>\n</ul>\n</li>\n<li>CSRF(Cross Site Request Forgery)\n<ul>\n<li>정상적인 request를 가로채 피해자인 척 하고 백엔드 서버에 변조된 request를 보내 악의적인 동작을 수행하는 공격을 의미(피해자 정보 수정, 정보열람 등)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://velog.io/@0307kwon/JWT%EB%8A%94-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C-localStorage-vs-cookie\">JWT는 어디에 저장해야할까? - localStorage vs cookie</a></p>\n<p><a href=\"https://gyoogle.dev/blog/web-knowledge/JWT.html\">JWT (JSON Web Token) | 👨🏻‍💻 Tech Interview</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\">구성요소</a></li>\n<li><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9D%B8%EC%A6%9D%EC%8B%9C-jwt-%EC%82%AC%EC%9A%A9\">로그인 인증시 JWT 사용</a></li>\n<li><a href=\"#jwt-%ED%86%A0%ED%81%B0%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%EC%9D%84-%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">JWT 토큰은 어디에 저장을 해야 할까?</a></li>\n<li><a href=\"#%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EC%A7%80%EC%8B%9D\">알아야할 지식</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 15, 2022","title":"JWT는 무엇이고? 어디에 저장해야할까? - localStorage vs cookie","categories":"개발지식","author":"JungSany","emoji":"⚓️"},"fields":{"slug":"/jwt-token/"}},"prev":{"id":"22c73c9a-186d-56bb-926b-c44a32b50ade","html":"<h3 id=\"enum이란\" style=\"position:relative;\"><a href=\"#enum%EC%9D%B4%EB%9E%80\" aria-label=\"enum이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>enum이란?</h3>\n<ul>\n<li>열거형 변수로 정수를 하나로 합칠 때 편리한 기능</li>\n<li>임의의 숫자나 문자열을 할당할 수 있으며, 하나의 유형으로 사용해서 버그를 줄일 수 있음</li>\n<li>TypeScript가 자체적으로 구현하는 기능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 아무것도 지정하지 않은 경우에는 0부터 숫자를 매깁니다.</span>\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">MOBILE_OS</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">IOS</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 0</span>\n  <span class=\"token constant\">ANDROID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 임의의 숫자나 문자열을 할당할 수도 있습니다</span>\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">MOBILE_OS</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">IOS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'iOS'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ANDROID</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Android'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 아래와 같이 유형으로 사용할 수도 있습니다</span>\n<span class=\"token keyword\">const</span> os<span class=\"token operator\">:</span> <span class=\"token constant\">MOBILE_OS</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MOBILE_OS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IOS</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">detectOSType</span><span class=\"token punctuation\">(</span>userAgent<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">MOBILE_OS</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>JavaScript에서는 사용할 수 없기 때문에 아래와 같이 객체를 사용하는 코드를 작성하게 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token constant\">MOBILE_OS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">IOS</span><span class=\"token operator\">:</span> <span class=\"token string\">'iOS'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ANDROID</span><span class=\"token operator\">:</span> <span class=\"token string\">'Android'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MOBILE_OS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IOS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// iOS</span></code></pre></div>\n<ul>\n<li>enum은 편리한 기능이지만 TypeScript가 자체적으로 구현했기 때문에 Tree-shaking이 되지 않는다.</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://engineering.linecorp.com/ko/blog/typescript-enum-tree-shaking/\">TypeScript enum을 사용하지 않는 게 좋은 이유를 Tree-shaking 관점에서 소개합니다.</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#enum%EC%9D%B4%EB%9E%80\">enum이란?</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 17, 2022","title":"enum이란?","categories":"TypeScript","author":"JungSany","emoji":"🙉"},"fields":{"slug":"/typescript/enum/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/next/pages/","nextSlug":"/jwt-token/","prevSlug":"/typescript/enum/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}