{"componentChunkName":"component---src-templates-blog-template-js","path":"/object-instance/","result":{"data":{"cur":{"id":"e1a15dbf-79ae-577a-94ab-9b31d47a48c3","html":"<h2 id=\"정의\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h2>\n<ul>\n<li>Object를 사용하여 Object를 생성하면 Object가 반환된다.</li>\n<li>이때 <code class=\"language-text\">할당, 반환된 Object를 인스턴스(instance)</code>라고 부른다.</li>\n<li>new 연산자를 사용하여 Object를 생성하여 변수에 할당할 수 있으며, 변수에 할당된 Object가 instance인 것이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// new 연산자 또는 객체 리터럴 방식를 사용하여 Object를 생성하여,</span>\n<span class=\"token comment\">// 변수에 할당 or 반환된 Object가 instance이다.</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 콘솔에 찍히는 값은 Instance인 {}가 찍힌다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p><del>## instance를 사용하는 이유는?</del></p>\n<ul>\n<li><del>instance마다 다른 값을 유지/제어하기 위해서 instance를 생성하는 것이다.</del></li>\n<li><del>다시말해, 원본의 값을 그대로 사용하면 원본의 데이터가 변경되기 떄문에 instance를 생성하여 원본의 값을 건들지않고 사용하기 위해 instance를 생성하여 사용하는 것이다.</del></li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object\">object MDN</a></p>\n<p><a href=\"https://webclub.tistory.com/37\">오브젝트(Object)와 인스턴스(instance),instanceof</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%A0%95%EC%9D%98\">정의</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"정의 Object를 사용하여 Object를 생성하면 Object가 반환된다. 이때 라고 부른다. new 연산자를 사용하여 Object를 생성하여 변수에 할당할 수 있으며, 변수에 할당된 Object가 instance인 것이다. ## instance를 사용하는 이유는? instance마다 다른 값을 유지/제어하기 위해서 instance를 생성하는 것이다. 다시말해, 원본의 값을 그대로 사용하면 원본의 데이터가 변경되기 떄문에 instance를 생성하여 원본의 값을 건들지않고 사용하기 위해 instance를 생성하여 사용하는 것이다. 참고링크 object MDN 오브젝트(Object)와 인스턴스(instance),instanceof 정의 참고링크","frontmatter":{"date":"December 10, 2022","title":"Object와 instance의 차이점?","categories":"개발지식","author":"JungSany","emoji":"⚖️"},"fields":{"slug":"/object-instance/"}},"next":{"id":"f04e1f23-bf08-53e0-a879-1bc3114a5af0","html":"<p>면접에서 기술질문으로 아래와 같은 질문을 받게되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">💡 React에서 component, page 마다 import가 많고 대규모의 서비스를 진행하는 경우 최적화하는 방법을 아는가?</code></pre></div>\n<p>나는 위와 같은 질문을 받고 <code class=\"language-text\">import</code>와 관련된 최적화 방안에 대해 질문한 것이라고 생각은 들었지만, 알지못하여서 답변으로는 아래와 같이 말을 하게 되었다.</p>\n<p>아직까지는 대규모 프로젝트를 진행해본 경험이 없다. 하지만 2차례의 프로젝트를 진행하면서 최적화 방안으로 사용하거나 학습한 바로는 관심사의 분리나 단일 책임원칙을 적용하여, 컴포넌트가 최대한 한개의 기능을 수행하게 작성하거나 분리를 하고 공통으로 사용되는 코드는 분리하여, 코드의 양을 줄이고 최소화는 방법을 이야기하였다.</p>\n<p>그 후 추가적으로 <code class=\"language-text\">React.memo</code>와 <code class=\"language-text\">useMemo</code>, <code class=\"language-text\">useCallback</code>에 대해 말을 하였지만 면접관의 질문에 대한 답변을 말한 것이 아니여서 이 글을 작성하게 되었다.</p>\n<br/>\n<h3 id=\"지금-드는-생각\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EA%B8%88-%EB%93%9C%EB%8A%94-%EC%83%9D%EA%B0%81\" aria-label=\"지금 드는 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지금 드는 생각</h3>\n<p>단순하게 최적화를 하기위해서는 코드를 적재적소에 사용한다. 라는 생각이 들게 되었는데 이유는 작성한 코드들이 항상 사용되는 것이 아니여서 필요할 경우에만 사용하면 된다 라는 생각이 들었다. 그래서 다음 면접시, 모르는 답안이 나올 경우 큰 맥락을 생각하여 큰 맥락이라도 이야기를 한다면 좀 더 좋은 인상을 주었을 것 같다고 생각하였다.</p>\n<br/>\n<h3 id=\"그래서-대규모-서비스-최적화-방안에는-어떤-것이-있는가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EC%95%88%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%B4-%EC%9E%88%EB%8A%94%EA%B0%80\" aria-label=\"그래서 대규모 서비스 최적화 방안에는 어떤 것이 있는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 대규모 서비스 최적화 방안에는 어떤 것이 있는가?</h3>\n<p>기본적으로 <strong>웹 사이트의 속도를 올리기 위해서는 큰 파일의 용량을 줄여야하는데, 크게 코드의 크기를 줄이는 방법(트리쉐이킹 등)과 코드를 분할하는 방법이 있다.</strong></p>\n<br/>\n<ol>\n<li><strong>웹팩 설정을 이용한 코드 스플리팅(Code Splitting)</strong></li>\n</ol>\n<ul>\n<li>Webpack에서는 코드를 분할 하기위해, 목적 별로 여러 <code class=\"language-text\">Entry</code>로 분할이 가능하다.\n<ul>\n<li>이것은 <code class=\"language-text\">하나의 큰 번들을 여러개의 작은 번들로 분할</code>해준다.</li>\n<li>풀어서 설명하면 페이지 별로 분할 할 수 있고, 특정 렌더링을 위한 코드로 분할하여 각페이지에서 사용할 수 있게 된다.</li>\n<li>하지만 <code class=\"language-text\">Entry</code>로 분할된 파일에는 모듈들이 모두 포함되어 파일의 크기가 커지게 되는데, <code class=\"language-text\">Webpack</code>의 <code class=\"language-text\">SplitChunksPlugin</code>을 이용하여 파일의 크기를 개선할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">another</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/another-module.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].bundle.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">cacheGroups</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// commons에 설정한 값은 각각의 entry가 공통적으로 사용하여, 중복되는 module들을 chunk 파일로 추출하게 된다.</span>\n        <span class=\"token literal-property property\">commons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<ol start=\"2\">\n<li><strong>동적 코드 분할 Dynamic Import (Lazy, Suspense)</strong></li>\n</ol>\n<ul>\n<li>\n<p>대부분의 코드들은 사용자가 보는 첫 페이지에서는 필요하지 않다.</p>\n</li>\n<li>\n<p>그렇기 때문에 첫 페이지 진입시 필요한 최소한의 코드만 다운 받고, 사용자가 특정 페이지나 위치에 도달할 때마다 코드로 로드 한다면, 성능을 올릴 수 있다.</p>\n</li>\n<li>\n<p>정적 Module Import를 필요한 시점에 로드 할 수 있도록 도와준다.</p>\n</li>\n<li>\n<p>React에서는 <code class=\"language-text\">Lazy</code>를 이용하여, Component를 <strong>사용되는 시점에 사용할 수 있도록 구현하는 방식</strong>이 가능하다.</p>\n<details>\n<summary>Lazy, Suspense 사용방법</summary>\n<div markdown=\"1\">\n<ul>\n<li><code class=\"language-text\">Lazy</code>는 <code class=\"language-text\">컴포넌트</code>를 렌더링할 때 <code class=\"language-text\">비동기적으로 로딩</code>하게 해주는 함수</li>\n<li><code class=\"language-text\">Suspense</code>는 코드 스플리팅되어 <code class=\"language-text\">로딩되지 않은 컴포넌트를 로딩하게 만들</code>어주거나 옵션으로 로딩이 끝나지 않았을 때 보여줄 <code class=\"language-text\">UI를 구성</code>할 수 있다.\n<ul>\n<li><code class=\"language-text\">fallback</code>은 로딩중 일 때 보여줄 UI의 코드 또는 컴포넌트를 넣는 공간</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> lazy<span class=\"token punctuation\">,</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// lazy</span>\n<span class=\"token keyword\">const</span> 변수명 <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>컴포넌트경로<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Suspense</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>fallback 코드 또는 컴포넌트<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  &lt;컴포넌트>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n</div>\n</details>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/Hello.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello!!!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hello<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// src/App.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> lazy<span class=\"token punctuation\">,</span> Suspense <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Hello <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Code Splitting</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loding...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>visible <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위의 코드로 테스트 진행 시, 네트워크 탭의 설정을 느린 3g로 바꾸어 확인한다면 Suspense fallback에 작성한 코드를 확인할 수 있다.</li>\n</ul>\n<br/>\n<ol start=\"3\">\n<li><strong>트리 쉐이킹 적용</strong></li>\n</ol>\n<ul>\n<li><a href=\"https://rnfltpgus.github.io/treeshaing/\">트리 쉐이킹(Tree Shaking)</a></li>\n</ul>\n<br/>\n<h3 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h3>\n<p><strong>Entry(입력 파일 경로)</strong> : 명시된 파일을 기준으로 의존성 트리를 만들어 하나의 번들 파일을 만들어 낸다.</p>\n<p><strong>Output (출력 디렉터리와 파일 이름)</strong>: 다른 디렉터리와 파일로 변경할 수 있다. (설정은 항상 프로젝트 디렉터리 내부라는 보장이 없기 때문에 절대 결로로 한다는 점 주의해야 한다.)</p>\n<p><strong>Loader (로더 등록)</strong>: Css나 이미지, 웹폰트, JSX, VUE 등 다양한 종류의 파일을 함께 번들링할 수 있다.</p>\n<p><strong>Plugin (플러그인 등록)</strong>: 로더로 설정이 애매한 부분들을 커버할 수 있음</p>\n<p><strong>chunk</strong>: 애플리케이션 코드를 각각 다른 파일로 나눈 것</p>\n<p><strong>SplitChunksPlugin:</strong> 초기 청크를 변경하면 HTML 파일이 프로젝트를 실행하기 위해 포함해야 하는 스크립트 태크에 영향을 미치기 때문에 기본적으로 on-demand 청크에만 영향을 미침</p>\n<ul>\n<li>원래 청크(및 그 안에 가저온 모듈)는 webpack 내부 그래프에서 부모-자식 관계로 연결되어있는데, <code class=\"language-text\">commonsChunkPlugin</code>은 중복되는 의존성을 피하고자 사용되었지만, 추가 최적화는 불가능하여 webpack v4부터 <code class=\"language-text\">optimization.splitChunks</code>를 위해 <code class=\"language-text\">CommonsChounkPlugin</code>은 사용하지 않음</li>\n<li>다음 조건에 따라 자동으로 청크를 분할\n<ul>\n<li>새 청크를 공유할 수 있거나 모듈이 <code class=\"language-text\">node_modules</code> 폴더에 있는 경우</li>\n<li>새 청크가 20kb보다 클 경우(min + gz 이전에)</li>\n<li>요청 시 청크로 로드할 때 최대 병렬 요청 수가 30개 이하일 경우</li>\n<li>초기 페이지 로드 시 최대 병렬 요청 수가 30개 이하일 경우\n마지막 두가지 조건을 충족하려고 할 때 더 큰 청크가 선호 됨</li>\n</ul>\n</li>\n</ul>\n<p><strong>Third-Party</strong>: <a href=\"https://rnfltpgus.github.io/3rd-party/\">써드 파티(3rd party)란?</a></p>\n<p><strong>Tree Shaking:</strong> <a href=\"https://rnfltpgus.github.io/treeshaing/\">트리 쉐이킹(Tree Shaking)</a></p>\n<p><strong><a href=\"https://ko.reactjs.org/docs/faq-structure.html\">코로케이션(colocation)</a>:</strong> 자주 함께 변경되는 파일들을 같이 보관하는 것</p>\n<p><strong>아토믹 디자인:</strong> 원자 설계는 설계 시스템을 만드는 방법론이다. ( <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#atoms\">원자</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#molecules\">분자</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#organisms\">유기체</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#templates\">템플릿</a> → <a href=\"https://bradfrost.com/blog/post/atomic-web-design/#pages\">페이지</a>)</p>\n<ul>\n<li>클라이언트와 팀 구성원이 아토믹 디자인에서 배치된 단계를 단계별로 보면서 시스템의 개념을 더 잘 이해할 수 있다.</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://webpack.kr/plugins/split-chunks-plugin/\">SplitChunksPlugin | 웹팩</a></p>\n<p><a href=\"https://www.daleseo.com/webpack-config/\">웹팩(Webpack) 기본 설정법 (Entry/Output/Loader/Plugins)</a></p>\n<p><a href=\"https://godsenal.com/posts/Webpack-%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%94%8C%EB%A6%AC%ED%8C%85/\">Webpack을 이용한 코드 스플리팅</a></p>\n<p><a href=\"https://web.dev/i18n/ko/code-splitting-suspense/\">React.lazy 및 Suspense를 사용한 코드 분할</a></p>\n<p><a href=\"https://velog.io/@velopert/react-code-splitting\">리액트 프로젝트 코드 스플리팅 정복하기</a></p>\n<p><a href=\"https://ui.toast.com/weekly-pick/ko_20180716\">트리 쉐이킹으로 자바스크립트 페이로드 줄이기</a></p>\n<p><a href=\"https://devowen.com/342\">[React] 코드 스플리팅(Code Splitting)</a></p>\n<p><a href=\"https://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</a></p>\n<br />\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%A7%80%EA%B8%88-%EB%93%9C%EB%8A%94-%EC%83%9D%EA%B0%81\">지금 드는 생각</a></li>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EC%95%88%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%B4-%EC%9E%88%EB%8A%94%EA%B0%80\">그래서 대규모 서비스 최적화 방안에는 어떤 것이 있는가?</a></li>\n<li><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 10, 2022","title":"React 대규모의 서비스 최적화 방안","categories":"React 개발지식 최적화","author":"JungSany","emoji":"🪦"},"fields":{"slug":"/react-optimization-plan/"}},"prev":{"id":"a4b4e6be-14b0-5b9e-93b4-bf07fb74e438","html":"<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p><code class=\"language-text\">프록시(Proxy) 서버</code>란 클라이언트가 자신을 거쳐 다른 네트워크에 접속할 수 있도록 <code class=\"language-text\">중간에서 대리</code>해주는 서버를 말한다. 서버와 클라이언트 사이에서 대리로 통신을 <code class=\"language-text\">수행해주는 것을 프록시</code>라고 하고 그 기능을 하는 <code class=\"language-text\">서버를 프록시 서버</code>라 부르게 되는 것이다.</p>\n<br/>\n<h3 id=\"프록시-서버의-원리\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9B%90%EB%A6%AC\" aria-label=\"프록시 서버의 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 서버의 원리</h3>\n<p>프록시 서버는 서버와 클라이언트 사이에서 요청과 응답을 처리해주게 되는 것을 말하는데</p>\n<ol>\n<li>클라이언트에서 프록시 서버로 데이터 전송</li>\n<li>프록시 서버에서 다시 웹 서버로 웹 응답</li>\n<li>웹 서버에서 프록시 서버로 웹 응답</li>\n<li>프록시 서버에서 클라이언트로 데이터 전송</li>\n</ol>\n<br/>\n<h3 id=\"프록시-서버의-사용-목적이유\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81%EC%9D%B4%EC%9C%A0\" aria-label=\"프록시 서버의 사용 목적이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 서버의 사용 목적(이유)</h3>\n<ul>\n<li>캐시 데이터를 사용하기 위함\n<ul>\n<li>프록시 서버 중 일부는 프록시 서버에 요청된 내용을 캐시를 사용해 저장해둔다. 그러면 캐시에 저장되어있는 내용에 대한 재요청은 서버에 따로 접속할 필요가 없어 저장된 내용을 그대로 돌려주면 되기 때문에 전송 시간을 절약할 수 있고 외부 트래픽을 줄임으로써 네트워크 병목 현상을 방지할 수 있다.</li>\n</ul>\n</li>\n<li>보안 목적\n<ul>\n<li>프론시 서버가 중간에 경유하게 되면 IP를 숨기는 것이 가능하기 때문이다.</li>\n<li>또한 프록시 서버를 방화벽으로 사용하기도 한다.(프록시 방화벽)</li>\n</ul>\n</li>\n<li>접속 우회\n<ul>\n<li>우회에 사용할 서버 주소와 포트를 구한 후 “인터넷 옵션 > 연결 > LAN설정 > 프록시 서버”에서 서버 주소와 포트를 설정해주면 설정해준 서버에서 접속한 것처럼 속일 수 있기 때문에 접속 제한을 우회할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9D%EC%8B%9C_%EC%84%9C%EB%B2%84\">프록시 서버 - 위키백과, 우리 모두의 백과사전</a></p>\n<p><a href=\"https://liveyourit.tistory.com/251\">[네트워크] 프록시 서버란? 원리와 사용 목적</a></p>\n<p><a href=\"https://engineer-mole.tistory.com/288#recentEntries\">프록시(Proxy)란?</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%9B%90%EB%A6%AC\">프록시 서버의 원리</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81%EC%9D%B4%EC%9C%A0\">프록시 서버의 사용 목적(이유)</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 11, 2022","title":"프록시 서버란? 원리와 사용 목적","categories":"개발지식","author":"JungSany","emoji":"📟"},"fields":{"slug":"/proxy/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/object-instance/","nextSlug":"/react-optimization-plan/","prevSlug":"/proxy/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}