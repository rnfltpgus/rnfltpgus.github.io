{"componentChunkName":"component---src-templates-blog-template-js","path":"/data/sql-nosql/","result":{"data":{"cur":{"id":"2d00bb13-39f4-5cac-be52-6a6ff71b8f94","html":"<h3 id=\"sql관계형-db\" style=\"position:relative;\"><a href=\"#sql%EA%B4%80%EA%B3%84%ED%98%95-db\" aria-label=\"sql관계형 db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL(관계형 DB)</h3>\n<ul>\n<li>\n<p>SQL을 사용하면 RDBMS(관리 시스템)에서 데이터를 저장, 수정, 삭제 및 검색할 수 있음</p>\n</li>\n<li>\n<p>관계형 데이터베이스의 핵심 특징</p>\n<ul>\n<li>데이터는 <code class=\"language-text\">정해진 데이터 스키마에 따라</code> 테이블에 저장된다.</li>\n<li>데이터는 <code class=\"language-text\">관계를 통해</code> 여러 테이블에 분산된다.</li>\n</ul>\n</li>\n<li>\n<p>데이터는 테이블에 레코드로 저장되는데, 각 테이블마다 명확하게 정의된 구조가 있다.</p>\n</li>\n<li>\n<p>해당 <code class=\"language-text\">구조는 필드의 이름과 데이터 유형</code>으로 정의된다.</p>\n</li>\n<li>\n<p>따라서 스키마를 준수하지 않은 레코드는 테이블에 추가할 수 없다. 즉, 스키마를 수정하지 않은 이상 정해진 구조에 맞는 레코드만 추가가 가능한 것이 관계형 데이터베이스의 특징 중 하나다.</p>\n</li>\n<li>\n<p>또한, 데이터 중복을 피하기 위해 ‘관계’를 이용한다.\n<img src=\"https://camo.githubusercontent.com/3c8dd62be5799ccada4e2da75f1ccfb458eea2e8/68747470733a2f2f74312e6461756d63646e2e6e65742f6366696c652f746973746f72792f393934443039333535433933374543443244\" alt=\"데이터 중복을 피하기 위한 데이터 관계 예시\"></p>\n</li>\n<li>\n<p><strong>하나의 테이블에서 중복 없이 하나의 데이터만을 관리하기 때문에 다른 테이블에서 부정확 데이터를 다룰 위험이 없어지는 장점이 있다.</strong></p>\n</li>\n</ul>\n<br/>\n<h3 id=\"nosql비관계형-db\" style=\"position:relative;\"><a href=\"#nosql%EB%B9%84%EA%B4%80%EA%B3%84%ED%98%95-db\" aria-label=\"nosql비관계형 db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQL(비관계형 DB)</h3>\n<ul>\n<li>\n<p>SQL(관계형 DB)와 반대로 스키마도 없고, 관계도 없다.</p>\n</li>\n<li>\n<p>NOSQL에서는 레코드를 문서(documents)라고 부른다.</p>\n</li>\n<li>\n<p>여기서 SQL과 핵심적인 차이가 있는데, SQL은 정해진 스키마를 따르지 않으면 데이터 추가가 불가능했다. 하지만 NOSQL에서는 다른 구조의 데이터를 같은 컬렉션에 추가가 가능하다.</p>\n</li>\n<li>\n<p>문서(documents)sms Json과 비슷한 형태로 가지고 있다. 관계형 데이터베이스처럼 여러 테이블에 나누어담지 않고, 관련 데이터를 동일한 <code class=\"language-text\">컬렉션</code>에 넣는다.</p>\n</li>\n<li>\n<p>따라서 위 사진에 SQL에서 진행한 Order, Users, Products 테이블로 나눈 것을 NoSQL에서는 Orders에 한꺼번에 포함해서 저장하게 된다.</p>\n</li>\n<li>\n<p>따라서 여러 테이블에 조인할 필요없이 이미 필요한 모든 것을 갖춘 문서를 작성하는 것이 NoSQL이다.(NoSQL에는 조인이라는 개념이 존재하지 않음)</p>\n</li>\n<li>\n<p>NoSQL에서 조인을 하고싶을 경우 <code class=\"language-text\">컬랙션을 통해 데이터를 복제하여 각 컬렉션 일부분에 속하는 데이터를 정확하게 산출</code>하도록 한다.</p>\n</li>\n<li>\n<p>하지만 이러면 데이터가 중복되어 서로 영향을 줄 위험이 있다. 따라서 조인을 잘 사용하지 않고 자주 변경되지 않는 데이터일 때 NoSQL을 쓰면 상당히 효율적이다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"확장-개념\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5-%EA%B0%9C%EB%85%90\" aria-label=\"확장 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장 개념</h3>\n<ul>\n<li>데이터베이스 서버의 확장성은 ‘수직적’ 확장과 ‘수평적’ 확장으로 나누어 진다.\n<ul>\n<li>수직적 확장: 단순히 데이터베이스 서버의 성능을 향상시키는 것(ex. CPU 업그레이드)</li>\n<li>수평적 확장: 더 많은 서버가 추가되고 데이터베이스가 적체적으로 분산됨을 의미(하나의 데이터베이스에서 작동하지만 여러 호스트에서 작동)</li>\n</ul>\n</li>\n<li>데이터 저장 방식으로 인해 SQL 데이터베이스는 일반적으로 수직적 확장만 지원함\n<ul>\n<li>수평적 확장은 NoSQL 데이터베이스에서만 가능</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"장--단점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5--%EB%8B%A8%EC%A0%90\" aria-label=\"장  단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장 / 단점</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SQL</th>\n<th>NOSQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>장점</td>\n<td>- 명확하게 정의된 스키마, 데이터 무결성 보장</td>\n<td>- 스키마가 없어서 유연함</td>\n</tr>\n<tr>\n<td></td>\n<td>- 관계는 각 데이터를 중복없이 한번만 저장</td>\n<td>- 언제든지 저장된 데이터를 조정하고 새로운 필드 추가 가능</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>- 데이터는 애플리케이션이 필요로 하는 형식으로 저장</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>- 데이터 읽어오는 속도가 빨라짐 수직 및 수평 확장이 가능해서 애플리케이션이 발생시키는 모든 읽기/쓰기 요청 처리 가능</td>\n</tr>\n<tr>\n<td>단점</td>\n<td>- 덜 유연함</td>\n<td>- 유연성으로 인해 데이터 구조 결정을 미루게 될 수 있음</td>\n</tr>\n<tr>\n<td></td>\n<td>- 데이터 스키마를 사전에 계획하고 알려야 함</td>\n<td>- 데이터 중복을 계속 업데이트 해야 함</td>\n</tr>\n<tr>\n<td></td>\n<td>- 관계를 맺고 있어서 조인문이 많은 복잡한 쿼리가 만들어질 수 있음</td>\n<td>- 데이터가 여러 컬렉션에 중복되어 있기 때문에 수정 시 모든 컬렉션에서 수행해야 함</td>\n</tr>\n<tr>\n<td></td>\n<td>- 대체로 수직적 확장만 가능</td>\n<td>- SQL에서는 중복 데이터가 없으므로 한번만 수행이 가능</td>\n</tr>\n<tr>\n<td>사용하는 경우 더 좋을 때</td>\n<td>- 데이터가 자주 변경되는 애플리케이션의 경우(NoSQL에서는 여러 컬렉션을 모두 수정해야 하기 때문에 비효율적)</td>\n<td>- 정확한 데이터 구조를 알 수 없거나 변경/확장 될 수 있는 경우</td>\n</tr>\n<tr>\n<td></td>\n<td>- 변경될 여지가 없고, 명확한 스키마가 사용자와 데이터에게 중요한 경우</td>\n<td>- 읽기를 자주 하지만, 데이터 변경은 자주 없는 경우</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>- 데이터베이스를 수평으로 확장해야 하는 경우(막대한 양의 데이터를 다뤄야 하는 경우)</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://www.oracle.com/kr/database/what-is-database/\">oracle 데이터베이스란?</a></p>\n<p><a href=\"https://hanamon.kr/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-sql-vs-nosql/\">[데이터베이스] SQL(구조화 쿼리 언어) vs NoSQL(비구조화 쿼리 언어) - 하나몬</a></p>\n<br />\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#sql%EA%B4%80%EA%B3%84%ED%98%95-db\">SQL(관계형 DB)</a></li>\n<li><a href=\"#nosql%EB%B9%84%EA%B4%80%EA%B3%84%ED%98%95-db\">NoSQL(비관계형 DB)</a></li>\n<li><a href=\"#%ED%99%95%EC%9E%A5-%EA%B0%9C%EB%85%90\">확장 개념</a></li>\n<li><a href=\"#%EC%9E%A5--%EB%8B%A8%EC%A0%90\">장 / 단점</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","excerpt":"SQL(관계형 DB) SQL을 사용하면 RDBMS(관리 시스템)에서 데이터를 저장, 수정, 삭제 및 검색할 수 있음 관계형 데이터베이스의 핵심 특징 데이터는  테이블에 저장된다. 데이터는  여러 테이블에 분산된다. 데이터는 테이블에 레코드로 저장되는데, 각 테이블마다 명확하게 정의된 구조가 있다. 해당 으로 정의된다. 따라서 스키마를 준수하지 않은 레코드는 테이블에 추가할 수 없다. 즉, 스키마를 수정하지 않은 이상 정해진 구조에 맞는 레코드만 추가가 가능한 것이 관계형 데이터베이스의 특징 중 하나다. 또한, 데이터 중복을 피하기 위해 ‘관계’를 이용한다.\n데이터 중복을 피하기 위한 데이터 관계 예시 하나의 테이블에서 중복 없이 하나의 데이터만을 관리하기 때문에 다른 테이블에서 부정확 데이터를 다룰 위험이 없어지는 장점이 있다. NoSQL(비관계형 DB) SQL(관계형 DB)와 반대로 스키마도 없고, 관계도 없다. NOSQL에서는 레코드를 문서(documents)라고 부른다. 여기…","frontmatter":{"date":"December 13, 2022","title":"SQL과 NOSQL 차이","categories":"개발지식 데이터","author":"JungSany","emoji":"🗂️"},"fields":{"slug":"/data/sql-nosql/"}},"next":{"id":"c83321a2-9381-5090-af36-c15e0aa0189d","html":"<ul>\n<li>HTML5에는 웹의 데이터를 클라이언트에 저장할 수 있는 새로운 자료구조인 WebStorage 스펙이 포함됨(로컬과 세션스토리지로 나뉨)</li>\n<li>Web Storage API는 브라우저에서 키/값 쌍을 쿠키보다 훨씬 직관적으로 젖아할 수 있는 방법을 제공한다.</li>\n</ul>\n<br/>\n<h3 id=\"sessionstorage\" style=\"position:relative;\"><a href=\"#sessionstorage\" aria-label=\"sessionstorage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SessionStorage</h3>\n<ul>\n<li>각각의 <a href=\"https://developer.mozilla.org/ko/docs/Glossary/Origin\">출처</a>에 대해서 독립적인 저장 공간을 페이지 세션이 유지되는 동안(브라우저가 열려있는 동안) 제공한다.\n<ul>\n<li>세션에 한정해, 즉 브라우저 또는 탭이 닫힐 때까지만 데이터를 저장한다.</li>\n<li>데이터를 절대 서버로 전송하지 않는다.</li>\n<li>저장 공간이 쿠키보다 큽다.(최대 5MB)</li>\n</ul>\n</li>\n<li>입력 폼 정보, 비로그인 장바구니 용도로 많이 사용된다.</li>\n</ul>\n<br/>\n<h3 id=\"localstorage\" style=\"position:relative;\"><a href=\"#localstorage\" aria-label=\"localstorage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LocalStorage</h3>\n<ul>\n<li>SessionStorage와 비슷하지만, 브라우저를 닫았다 열어도 데이터가 남아있다.\n<ul>\n<li>유효기간 없이 데이터를 저장하고, JavaScript를 사용하거나 브라우저 캐시 또는 로컬 저장 데이터를 지워야만 사라진다.</li>\n<li>저장 공간이 셋중 제일 크다.</li>\n</ul>\n</li>\n<li>자동 로그인을 유지시킬 때 많이 사용한다.</li>\n</ul>\n<br/>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<p><strong>공통점</strong></p>\n<ul>\n<li><code class=\"language-text\">key / value</code> 쌍으로 데이터를 저장하고 키를 기반으로 데이터 조회 가능하다.</li>\n<li>단순 문자열을 넘어 객체정보도 저장할 수 있다.</li>\n<li>iterable이 아니라서 key와 value 전체를 얻으려면 일반적인 for문을 사용해서 다루어야 한다.\n<ul>\n<li>(for…of, for…in 사용 불가능) iterable/iterator 조사가 필요함</li>\n</ul>\n</li>\n</ul>\n<p><strong>장단점</strong></p>\n<ul>\n<li>서버에 불필요한 데이터를 저장하지 않는다.</li>\n<li>쿠키보다 저장할 수 있는 용량이 크다.(브라우저마다 다르나 대략 5MB)</li>\n<li>HTML5를 지원하지 않는 브라우저의 경우 사용이 불가하다.</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Web_Storage_API\">Web Storage API - Web API | MDN</a></p>\n<p><a href=\"https://javascript.info/localstorage#sessionstorage\">LocalStorage, sessionStorage</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Origin\">출처 - 용어 사전 | MDN</a></p>\n<p><a href=\"https://velog.io/@dorazi/%EC%BF%A0%ED%82%A4-%EC%9B%B9-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EB%A1%9C%EC%BB%AC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%84%B8%EC%85%98-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80\">쿠키, 웹 스토리지 (로컬 스토리지, 세션 스토리지)</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#sessionstorage\">SessionStorage</a></li>\n<li><a href=\"#localstorage\">LocalStorage</a></li>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 12, 2022","title":"Web Storage(Local, Session)","categories":"개발지식","author":"JungSany","emoji":"💾"},"fields":{"slug":"/knowledge/local-sesstion/"}},"prev":{"id":"11710a0d-1e0b-5672-8b28-29d8568e3482","html":"<ul>\n<li>각 주제에 따라 테이블을 나누어 작성한 후, 정보를 가져오는 경우 <code class=\"language-text\">테이블을 합치는 경우</code>가 있다.</li>\n<li>이때 <code class=\"language-text\">JOIN</code>을 사용하게 되는데, 그 중 많이 사용하는 것이 <code class=\"language-text\">LEFT JOIN</code>과 <code class=\"language-text\">INNER JOIN</code>이다.</li>\n</ul>\n<br/>\n<h3 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h3>\n<ul>\n<li>두 테이블에서 <code class=\"language-text\">JOIN</code>을 위한 <strong>기준 열이 서로 값을 가지고 있는 경우</strong> 조회에서 <strong>누락되는 행은 존재하지 않는다.</strong></li>\n<li>그렇다면 <code class=\"language-text\">LEFT JOIN</code>과 <code class=\"language-text\">INNER JOIN</code>은 같은 조회 결과를 보인다. 이때, <strong><code class=\"language-text\">INNER JOIN</code>이 상대적으로 성능이 좋다</strong>고 한다.</li>\n</ul>\n<br/>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ul>\n<li><code class=\"language-text\">LEFT JOIN</code>은 <strong>합집합</strong>, <code class=\"language-text\">INNER JOIN</code>은 <strong>교집합</strong>이다.</li>\n<li>결과가 같다면 <code class=\"language-text\">LEFT JOIN</code>대신 <code class=\"language-text\">INNER JOIN</code> 을 사용하는게 좋다.</li>\n</ul>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 13, 2022","title":"SQL - LEFT JOIN, INNER JOIN 차이","categories":"개발지식 데이터","author":"JungSany","emoji":"📂"},"fields":{"slug":"/data/left-inner-join/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/data/sql-nosql/","nextSlug":"/knowledge/local-sesstion/","prevSlug":"/data/left-inner-join/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}