{"componentChunkName":"component---src-templates-blog-template-js","path":"/javascript/callback/","result":{"data":{"cur":{"id":"9cc6328b-c58a-5e08-8436-8ab583ab365b","html":"<h3 id=\"콜백이란\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%B4%EB%9E%80\" aria-label=\"콜백이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백이란?</h3>\n<ul>\n<li>비동기처리방식에 속하며, 함수가 끝나고 난 뒤에 실행되는 함수</li>\n<li>자바스크립트에서 함수는 객체이다. 따라서 <strong>함수는 함수를 인자로 받고 다른 함수를 통해 반환될 수 있는데, 인자로 대입되는 함수</strong>를 <code class=\"language-text\">콜백함수</code>라고 부름</li>\n<li>아래의 예시처럼 다른 코드가 특정 코드가 마무리되기 전에 실행되지 않도록, 즉 비동기 처리를 위한 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<details>\n<summary>정답</summary>\n<div markdown=\"1\">\n<p>출력 순서는 2 → 1</p>\n</div>\n</details>\n<br/>\n<h3 id=\"콜백의-불편사항\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%B6%88%ED%8E%B8%EC%82%AC%ED%95%AD\" aria-label=\"콜백의 불편사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백의 불편사항</h3>\n<ul>\n<li>\n<p>비동기 처리에 콜백 함수를 이용하게 되면 코드를 중첩시켜 작성하게 되기 때문에 에러, 예외처리가 어렵고 복잡도가 증가하게 되어 콜백지옥을 맛볼 수 있다.</p>\n</li>\n<li>\n<p>콜백함수의 중첩은 에러처리가 힘듬다.</p>\n<p><img src=\"https://velog.velcdn.com/images/yj05037/post/9c47656d-edd0-4318-81b3-52f2244172cb/image.png\" alt=\"callback 지옥 이미지\"></p>\n</li>\n</ul>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%B4%EB%9E%80\">콜백이란?</a></li>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%B6%88%ED%8E%B8%EC%82%AC%ED%95%AD\">콜백의 불편사항</a></li>\n</ul>\n</div>","excerpt":"콜백이란? 비동기처리방식에 속하며, 함수가 끝나고 난 뒤에 실행되는 함수 자바스크립트에서 함수는 객체이다. 따라서 함수는 함수를 인자로 받고 다른 함수를 통해 반환될 수 있는데, 인자로 대입되는 함수를 라고 부름 아래의 예시처럼 다른 코드가 특정 코드가 마무리되기 전에 실행되지 않도록, 즉 비동기 처리를 위한 방법 출력 순서는 2 → 1 콜백의 불편사항 비동기 처리에 콜백 함수를 이용하게 되면 코드를 중첩시켜 작성하게 되기 때문에 에러, 예외처리가 어렵고 복잡도가 증가하게 되어 콜백지옥을 맛볼 수 있다. 콜백함수의 중첩은 에러처리가 힘듬다. callback 지옥 이미지 콜백이란? 콜백의 불편사항","frontmatter":{"date":"December 21, 2022","title":"콜백(CallBack)이란?","categories":"JavaScript","author":"JungSany","emoji":"🥥"},"fields":{"slug":"/javascript/callback/"}},"next":{"id":"26fd46ec-88f7-55dd-b02d-01f0c123b510","html":"<p><img src=\"https://t1.daumcdn.net/cfile/tistory/993F09445A6DA15516\" alt=\"깊은복사와 얕은 복사\"></p>\n<h2 id=\"shaloow-copy---얕은-복사란\" style=\"position:relative;\"><a href=\"#shaloow-copy---%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\" aria-label=\"shaloow copy   얕은 복사란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shaloow Copy - 얕은 복사란?</h2>\n<p><strong>복사할 때 원래값과 복사된 값이 같은 참조를 가리키고 있는 것을 말한다.</strong></p>\n<p>객체안에 객체가 있을 경우 한개의 객체라도 원본 객체를 참고 하고 있다면 이를 얕은 복사라고 한다.</p>\n<p>객체를 가르키는 변수(원본)을 다른 변수(사본)에 할당하면 원본 의 참조 값이 복사되어 전달된다. 이를 참조에 의한 전달이라하며, 얕은 복사이다.</p>\n<p>또 얕은 복사는 <code class=\"language-text\">한단계 뎁스만 복사</code>한다.</p>\n<br/>\n<h3 id=\"결국-얕은-복사란\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B5%AD-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\" aria-label=\"결국 얕은 복사란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결국 얕은 복사란?</h3>\n<p><code class=\"language-text\">두개의 식별자가 하나의 객체를 바라보게 되어</code>, 원본 또는 사본 중 어느 한쪽에서 객체를 변경(변수에 새로운 객체를 재할당하는 것이 아니라 객체의 프로퍼티 값을 변경하거나 프로퍼티를 추가, 삭제)하면 <code class=\"language-text\">서로 영향을 주고 받는다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> per1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> per2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체를 생성할떄는 새로운 평가를 받기때문에 펄스가 뜨는데</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>per1 <span class=\"token operator\">===</span> per2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 아래 콘솔은 프로퍼티 값을 참조하는 값으로 평가될 수 있는 표현식이다. 그래서 두 표현식 모두 원시값으로 평가되어 트루다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>per1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> per2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"얕은-복사를-하는-방법에는\" style=\"position:relative;\"><a href=\"#%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\" aria-label=\"얕은 복사를 하는 방법에는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>얕은 복사를 하는 방법에는</h3>\n<ol>\n<li>Object.assign()</li>\n<li>Array.Slice()</li>\n<li>Spread 연산자 (전개연산자)</li>\n</ol>\n<br/>\n<h2 id=\"deep-copy---깊은-복사란\" style=\"position:relative;\"><a href=\"#deep-copy---%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\" aria-label=\"deep copy   깊은 복사란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deep Copy - 깊은 복사란?</h2>\n<p>깊은 복사된 객체는 객체안에 객체가 있을 경우에도 원본과의 참조가 완전히 끈헝진 객체를 말한다.</p>\n<p>깊은 복사는 <code class=\"language-text\">중첩된 부분까지 모두 복사</code>하는 경우를 말한다.</p>\n<br/>\n<h3 id=\"깊은-복사를-하는-방법에는\" style=\"position:relative;\"><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\" aria-label=\"깊은 복사를 하는 방법에는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깊은 복사를 하는 방법에는</h3>\n<ol>\n<li>JSON.parse &#x26;&#x26; JSON.stringify</li>\n<li>재귀함수를 구현한 복사</li>\n<li>lodash의 cloneDeep를 사용한 복사(라이브러리 사용)</li>\n</ol>\n<br/>\n<h3 id=\"참조링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EB%A7%81%ED%81%AC\" aria-label=\"참조링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조링크</h3>\n<p><a href=\"https://velog.io/@th0566/Javascript-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC-%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC\">[Javascript] 얕은 복사, 깊은 복사</a></p>\n<p><a href=\"https://bbangson.tistory.com/78\">[JavaScript] 깊은 복사, 얕은 복사</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#shaloow-copy---%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\">Shaloow Copy - 얕은 복사란?</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B5%AD-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\">결국 얕은 복사란?</a></li>\n<li><a href=\"#%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\">얕은 복사를 하는 방법에는</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#deep-copy---%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\">Deep Copy - 깊은 복사란?</a></p>\n<ul>\n<li><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\">깊은 복사를 하는 방법에는</a></li>\n<li><a href=\"#%EC%B0%B8%EC%A1%B0%EB%A7%81%ED%81%AC\">참조링크</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2022","title":"얕은 복사와 깊은 복사","categories":"JavaScript","author":"JungSany","emoji":"🍊"},"fields":{"slug":"/javascript/shallow-deep-copy/"}},"prev":{"id":"13ee77c5-f84a-5296-8837-5e8b77b99fad","html":"<h3 id=\"promise란\" style=\"position:relative;\"><a href=\"#promise%EB%9E%80\" aria-label=\"promise란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise란?</h3>\n<ul>\n<li>“<strong><em><code class=\"language-text\">Promise</code>란 비동기 처리를 조금 더 수월하게 처리하게끔 도와주는 추상화된 소프트웨어 개념”</em></strong></li>\n<li>콜백지옥을 해결하기 위해 <code class=\"language-text\">ES6</code>에서 Promise로 지원하게 되었다.</li>\n<li><strong>Promise의 핵심은 비동기에서 성공과 실패를 분리해서 메소드를 수행하며, <code class=\"language-text\">에러핸들링이 가능</code>하다는 점이 있다.</strong></li>\n<li>Promise는 <code class=\"language-text\">두가지 인수를 받는데</code>, 비동기식이 정상적으로 실행된다면 <code class=\"language-text\">resolve</code>를 비정상적으로 실행된다면 두번째 인수인 <code class=\"language-text\">reject</code>를 호출한다.</li>\n</ul>\n<br/>\n<h3 id=\"promise를-호출한-이유-사용할-수-있는-메소드는-code-classlanguage-text3가지code\" style=\"position:relative;\"><a href=\"#promise%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%9C-%EC%9D%B4%EC%9C%A0-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C%EB%8A%94-code-classlanguage-text3%EA%B0%80%EC%A7%80code\" aria-label=\"promise를 호출한 이유 사용할 수 있는 메소드는 code classlanguage text3가지code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise를 호출한 이유 사용할 수 있는 메소드는 <code class=\"language-text\">3가지</code></h3>\n<ul>\n<li>then: reslove()를 통한 리턴 값</li>\n<li>catch: reject()를 통한 리턴 값</li>\n<li>finally: 실행 여부와 상관없이 이후 이벤트 실행</li>\n</ul>\n<br/>\n<h3 id=\"가장-큰-code-classlanguage-text장점code으로는\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5-%ED%81%B0-code-classlanguage-text%EC%9E%A5%EC%A0%90code%EC%9C%BC%EB%A1%9C%EB%8A%94\" aria-label=\"가장 큰 code classlanguage text장점code으로는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장 큰 <code class=\"language-text\">장점</code>으로는</h3>\n<ul>\n<li>코드의 가독성이 증가</li>\n<li>반복해서 재사용하는 예외처리 작업이 줄어듬</li>\n<li><code class=\"language-text\">throw</code>를 사용하면 <code class=\"language-text\">error</code> 상황을 쉽게 찾아내 <code class=\"language-text\">에러 핸들링이 한결 편해짐</code></li>\n</ul>\n<br/>\n<h3 id=\"한번에-비동기-처리를-해야되는-경우\" style=\"position:relative;\"><a href=\"#%ED%95%9C%EB%B2%88%EC%97%90-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%B4%EC%95%BC%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"한번에 비동기 처리를 해야되는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한번에 비동기 처리를 해야되는 경우</h3>\n<ul>\n<li><strong>Promise.all</strong>\n<ul>\n<li>프로미스가 담겨 있는 배열 등의 이터러블을 인자로 전달 받는다. 그리고 <code class=\"language-text\">전달받은 모든 프로미스를 병렬로 처리</code>하고 그 처리 결과를 resolve하는 새로운 프로미스를 반환한다.</li>\n<li><strong>전달받은 모든 프로미스를 병렬로 처리</strong>한다. 이때 모든 프로미스의 처리가 종료될 때까지 기다린 후 모든 처리 결과를 resolve 또는 reject 한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 3 ]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise - JavaScript | MDN</a></p>\n<p><a href=\"https://velog.io/@beberiche/promise-asyncawait\">promise, async/await</a></p>\n<p><a href=\"https://ko.javascript.info/promise-basics\">프라미스</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#promise%EB%9E%80\">Promise란?</a></li>\n<li><a href=\"#promise%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%9C-%EC%9D%B4%EC%9C%A0-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C%EB%8A%94-3%EA%B0%80%EC%A7%80\">Promise를 호출한 이유 사용할 수 있는 메소드는 <code class=\"language-text\">3가지</code></a></li>\n<li><a href=\"#%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%9E%A5%EC%A0%90%EC%9C%BC%EB%A1%9C%EB%8A%94\">가장 큰 <code class=\"language-text\">장점</code>으로는</a></li>\n<li><a href=\"#%ED%95%9C%EB%B2%88%EC%97%90-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%B4%EC%95%BC%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">한번에 비동기 처리를 해야되는 경우</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2022","title":"Promise","categories":"JavaScript","author":"JungSany","emoji":"🍍"},"fields":{"slug":"/javascript/promise/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/javascript/callback/","nextSlug":"/javascript/shallow-deep-copy/","prevSlug":"/javascript/promise/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}