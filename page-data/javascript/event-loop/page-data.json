{"componentChunkName":"component---src-templates-blog-template-js","path":"/javascript/event-loop/","result":{"data":{"cur":{"id":"bb0b7b1e-a2c9-584b-aa58-722b724d98f3","html":"<p><img src=\"https://miro.medium.com/max/2048/1*4lHHyfEhVB0LnQ3HlhSs8g.png\" alt=\"EventLoop 이미지\"></p>\n<p><strong><code class=\"language-text\">JS 엔진</code>은 Memory Heap / Call Stack로 구성되어 있으며, JS로 작성된 코드를 해석하고 실행하는 인터프리터(프로그래밍 언어의 소스 코드를 바로 샐행하는 컴퓨터 프로그램 또는 환경)다.</strong></p>\n<p><strong>JS는 단일 스레드(single thread)인데 즉, Call Stack이 한 개(single)라는 뜻이다.</strong></p>\n<p><strong>(가장 유명한 <code class=\"language-text\">JS 엔진</code>으로는 구글의 V8 Engine이 있다)</strong></p>\n<br/>\n<h3 id=\"memory-heap\" style=\"position:relative;\"><a href=\"#memory-heap\" aria-label=\"memory heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memory Heap</h3>\n<ul>\n<li>메모리 할당이 일어나는 곳 (변수, 함수 등)</li>\n</ul>\n<br/>\n<h3 id=\"call-stack\" style=\"position:relative;\"><a href=\"#call-stack\" aria-label=\"call stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Call Stack</h3>\n<ul>\n<li>코드가 실행될 때 쌓이는 곳. <strong>(stack : 자료구조 중 하나, 선입후출)</strong></li>\n</ul>\n<br/>\n<h3 id=\"web-api\" style=\"position:relative;\"><a href=\"#web-api\" aria-label=\"web api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web API</h3>\n<ul>\n<li>브라우저에서 제공하는 API (DOM, Ajax, Timeout 등)</li>\n<li>Call Stack에서 실행된 비동기 함수는 Web API를 호출하고, Web API는 콜백함수를 Callback Queue 안에 넣는다.</li>\n</ul>\n<br/>\n<h3 id=\"callback-queue\" style=\"position:relative;\"><a href=\"#callback-queue\" aria-label=\"callback queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback Queue</h3>\n<ul>\n<li>비동기적으로 실행된 콜백함수가 보관되는 곳 (setTimeout, addEventListener 등) <strong>(Queue : 자료구조 중 하나, 선입선출)</strong></li>\n</ul>\n<br/>\n<h3 id=\"event-loop\" style=\"position:relative;\"><a href=\"#event-loop\" aria-label=\"event loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Loop</h3>\n<ul>\n<li>Call Stack과 Callback Queue 상태를 체크하여, Callback이 빈 상태가 되면, Callback Queue의 첫번째 콜백을 Call Stack으로 넣는다.\n(이런 반복적인 작업을 틱(tick)이라 한다)</li>\n</ul>\n<br/>\n<h3 id=\"event-loop-동작원리\" style=\"position:relative;\"><a href=\"#event-loop-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"event loop 동작원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Loop 동작원리</h3>\n<ol>\n<li><strong>V8 엔진에서 코드가 실행되면, Call Stack이 쌓인다.</strong></li>\n<li><strong>Stack의 선입후출의 룰에 따라 제일 마지막에 들어온 함수가 먼저 실행되며, Stack에 쌓여진 함수가 모두 실행된다.</strong>\n<ul>\n<li>비동기 함수가 실행되면 Web API 호출되고</li>\n<li>Web API는 비동기 함수의 콜백함수를 Callback Queue에 넣는다.</li>\n<li>Event Loop는 Call Stack이 빈 상태가 되면, Callback Queue에 있는 첫번째 콜백을 Call Stack으로 이동시킨다. (이러한 반복 작업을 <code class=\"language-text\">틱</code>이라 한다.)</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"️-js가-씽글단일-스레드지만-멀티-스레드처럼-보여지는-이유는-web-apicallback-queueevent-loop의-작동원리-때문이다\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-js%EA%B0%80-%EC%94%BD%EA%B8%80%EB%8B%A8%EC%9D%BC-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%A7%80%EB%A7%8C-%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%B2%98%EB%9F%BC-%EB%B3%B4%EC%97%AC%EC%A7%80%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-web-apicallback-queueevent-loop%EC%9D%98-%EC%9E%91%EB%8F%99%EC%9B%90%EB%A6%AC-%EB%95%8C%EB%AC%B8%EC%9D%B4%EB%8B%A4\" aria-label=\"️ js가 씽글단일 스레드지만 멀티 스레드처럼 보여지는 이유는 web apicallback queueevent loop의 작동원리 때문이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ JS가 씽글(단일) 스레드지만 멀티 스레드처럼 보여지는 이유는, Web API∙Callback Queue∙Event Loop의 작동원리 때문이다.</h3>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">The event loop</a></p>\n<p><a href=\"https://medium.com/sjk5766/javascript-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%95%B5%EC%8B%AC-event-loop-%EC%A0%95%EB%A6%AC-422eb29231a8\">JavaScript 비동기 핵심 Event Loop 정리</a></p>\n<p><a href=\"https://velog.io/@thms200/Event-Loop-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84\">Event Loop (이벤트 루프)</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#memory-heap\">Memory Heap</a></li>\n<li><a href=\"#call-stack\">Call Stack</a></li>\n<li><a href=\"#web-api\">Web API</a></li>\n<li><a href=\"#callback-queue\">Callback Queue</a></li>\n<li><a href=\"#event-loop\">Event Loop</a></li>\n<li><a href=\"#event-loop-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\">Event Loop 동작원리</a></li>\n<li><a href=\"#%EF%B8%8F-js%EA%B0%80-%EC%94%BD%EA%B8%80%EB%8B%A8%EC%9D%BC-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%A7%80%EB%A7%8C-%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%B2%98%EB%9F%BC-%EB%B3%B4%EC%97%AC%EC%A7%80%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-web-apicallback-queueevent-loop%EC%9D%98-%EC%9E%91%EB%8F%99%EC%9B%90%EB%A6%AC-%EB%95%8C%EB%AC%B8%EC%9D%B4%EB%8B%A4\">⭐️ JS가 씽글(단일) 스레드지만 멀티 스레드처럼 보여지는 이유는, Web API∙Callback Queue∙Event Loop의 작동원리 때문이다.</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","excerpt":"EventLoop 이미지 은 Memory Heap / Call Stack로 구성되어 있으며, JS로 작성된 코드를 해석하고 실행하는 인터프리터(프로그래밍 언어의 소스 코드를 바로 샐행하는 컴퓨터 프로그램 또는 환경)다. JS는 단일 스레드(single thread)인데 즉, Call Stack이 한 개(single)라는 뜻이다. (가장 유명한 으로는 구글의 V8 Engine이 있다) Memory Heap 메모리 할당이 일어나는 곳 (변수, 함수 등) Call Stack 코드가 실행될 때 쌓이는 곳. (stack : 자료구조 중 하나, 선입후출) Web API 브라우저에서 제공하는 API (DOM, Ajax, Timeout 등) Call Stack에서 실행된 비동기 함수는 Web API를 호출하고, Web API는 콜백함수를 Callback Queue 안에 넣는다. Callback Queue 비동기적으로 실행된 콜백함수가 보관되는 곳 (setTimeout, addEventListen…","frontmatter":{"date":"December 25, 2022","title":"Event Loop에 대해서","categories":"개발지식 JavaScript","author":"JungSany","emoji":"🍭"},"fields":{"slug":"/javascript/event-loop/"}},"next":{"id":"7766ecfa-6504-5a86-8426-12eaea5d537f","html":"<br/>\n<h3 id=\"먼저-알아두면-좋은-멱등이란-단어\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EB%A9%B1%EB%93%B1%EC%9D%B4%EB%9E%80-%EB%8B%A8%EC%96%B4\" aria-label=\"먼저 알아두면 좋은 멱등이란 단어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저 알아두면 좋은 멱등이란 단어</h3>\n<p><strong>멱등의 사전적 정의는 <code class=\"language-text\">연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질</code>을 의미한다.</strong></p>\n<p><strong><code class=\"language-text\">동일한 요청</code>을 <code class=\"language-text\">한 번 보내는 것</code>과 <code class=\"language-text\">여러 번 연속으로 보내는 것</code>이 <code class=\"language-text\">같은 효과</code>를 지니고, 서버의 상태도 동일하게 남을 때, 해당 HTTP 메서드가 <code class=\"language-text\">멱등성</code>을 가졌다고 말합니다.</strong></p>\n<br/>\n<h2 id=\"각-메소드의-특징\" style=\"position:relative;\"><a href=\"#%EA%B0%81-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"각 메소드의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>각 메소드의 특징</h2>\n<table>\n<thead>\n<tr>\n<th>메소드 명</th>\n<th>메소드 용도</th>\n<th>정의</th>\n<th>메소드 특징</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>데이터 조회</td>\n<td>서버에 전달하고 싶은 데이터를 query(parameter, query string)을 통해 전달</td>\n<td>Query를 BODY에 담아서 조회가능하나 지원하지 않는 곳도 있기 때문에 권장하지 않는다.</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>다양한 요청 처리</td>\n<td>BODY에 리소스 데이터를 전달</td>\n<td>GET 방식 사용시 전달해야할 데이터가 많다면 POST를 사용하여 BODY에 조회할 데이터를 전달할 수 있지만 POST로 조회시 캐싱하기에 어려운 문제가 있기 때문에 권장하지 않는다.(기술적으로 캐싱은 가능하다.)</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>데이터 추가 or 덮어쓰기</td>\n<td>요청한 데이터가 없다면 추가하고 있으면 덮어쓰기</td>\n<td>POST와 PUT은 다르다. POST를 계속 요청하면 데이터가 계속 생성되지만 PUT은 여러번 요청하더라도 결과는 같다.(멱등성)</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>데이터 수정</td>\n<td>전달한 데이터로 수정</td>\n<td><strong>해당 기능을 지원하지 않는 경우도 있기 때문에 권장하는 방식이 아니다.</strong> 수정시에는 POST를 사용한다.</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>데이터 삭제</td>\n<td>특정 리소스의 삭제를 요청하는 데 사용</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h3 id=\"get의-특징\" style=\"position:relative;\"><a href=\"#get%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"get의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET의 특징</h3>\n<ul>\n<li><strong>클라이언트에서 서버로 어떠한 리소스로 부터 정보를 요청하기 위해 사용되는 메서드이다.</strong></li>\n<li><code class=\"language-text\">캐시</code>가 <code class=\"language-text\">가능</code>하다.(GET을 통해 서버에 리소스를 요청할 때 웹 캐시가 요청을 가로채 서버로부터 리소스를 다시 다운로드하는 대신 리소스의 복사본을 반환하며 HTTP 헤더에서 cache-control 헤더를 통해 캐시 옵션을 지정할 수 있다.)</li>\n<li><code class=\"language-text\">길이 제한</code>이 있다.(GET 요청의 길이 제한은 표준이 따로 있는건 아니고 브라우저마다 제한이 다르다고 한다.)</li>\n<li><code class=\"language-text\">중요한 정보</code>를 <code class=\"language-text\">다루면 안된다.</code>(보안, 파라미터에 다 노출되어 버린다.)</li>\n<li>GET을 통한 요청은 URL주소 끝에 파라미터로 포함되어 전송되며, 이 부분을 <code class=\"language-text\">쿼리 스트링(query string)</code>이라고 부른다.</li>\n<li><strong>멱등성을 가진다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"post의-특징\" style=\"position:relative;\"><a href=\"#post%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"post의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POST의 특징</h3>\n<ul>\n<li><strong>클라이언트에서 서버로 리소스를 생성하거나 업데이트하기 위해 데이터를 보낼 때 사용 되는 메서드다.</strong></li>\n<li><code class=\"language-text\">캐시되지 않는다</code>.</li>\n<li>POST는 전송할 데이터를 HTTP 메시지 body 부분에 담아서 서버로 보낸다. (body의 타입은 Content-Type 헤더에 따라 결정 된다.)</li>\n<li>데이터를 전송할때 길이 제한이 따로 없어 용량이 큰 데이터를 보낼 때 사용하거나 GET처럼 데이터가 외부적으로 드러나는건 아니라서 보안이 필요한 부분에 많이 사용된다.(하지만 데이터를 암호화하지 않으면 body의 데이터도 결국 볼 수 있는건 똑같다.)</li>\n<li>POST를 통한 데이터 전송은 보통 HTML form을 통해 서버로 전송된다.</li>\n</ul>\n<br/>\n<h3 id=\"put의-특징\" style=\"position:relative;\"><a href=\"#put%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"put의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PUT의 특징</h3>\n<ul>\n<li>요청한 URI에 이미 리소스가 존재한다면 PUT과 같이 전달된 body는 원본 서버에 수정된 버전으로 변경되어야 한다.</li>\n<li>만일 리소스가 존재하지 않는다면 서버로 요청된 데이터로 새 리소스를 생성할 수 있다.</li>\n<li>새 리소스가 생성된 경우 201(created) 응답을 사용자에게 알려준다.</li>\n<li>기존 리소스가 수정된 경우 200(확인) 혹은 204(내용 없음) 응답을 보내야 한다.</li>\n<li>리소스를 생성할 수 없거나 수정할 수 없는 경우 적절한 오류 응답을 제공해야 한다.</li>\n<li><strong>멱등성을 가진다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"patch의-특징\" style=\"position:relative;\"><a href=\"#patch%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"patch의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PATCH의 특징</h3>\n<ul>\n<li>리소스의 부분만을 수정하는 데 쓰인다.</li>\n</ul>\n<br/>\n<h3 id=\"delete의-특징\" style=\"position:relative;\"><a href=\"#delete%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"delete의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DELETE의 특징</h3>\n<ul>\n<li>데이터 삭제 특정 리소스의 삭제를 요청하는데 사용한다.</li>\n<li><strong>멱등성을 가진다.</strong></li>\n</ul>\n<h3 id=\"그-외-headconnectoptionstrace-추가적으로-한번-찾아서-보자\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8-headconnectoptionstrace-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%9C%EB%B2%88-%EC%B0%BE%EC%95%84%EC%84%9C-%EB%B3%B4%EC%9E%90\" aria-label=\"그 외 headconnectoptionstrace 추가적으로 한번 찾아서 보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외 HEAD∙CONNECT∙OPTIONS∙TRACE 추가적으로 한번 찾아서 보자!</h3>\n<br/>\n<h2 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h2>\n<h3 id=\"get과-post의-차이점\" style=\"position:relative;\"><a href=\"#get%EA%B3%BC-post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"get과 post의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>GET과 POST의 차이점</strong></h3>\n<ul>\n<li><strong>사용목적</strong> : <code class=\"language-text\">GET</code>은 서버의 리소스에서 데이터를 요청할 때, <code class=\"language-text\">POST</code>는 서버의 리소스를 새로 생성하거나 업데이트할 때 사용한다.\nDB로 따지면 <code class=\"language-text\">GET</code>은 Select에 가깝고, POST는 Create에 가깝다고 보면 된다.</li>\n<li><strong>요청에 body 유무</strong> : <code class=\"language-text\">GET</code>은 URL 파라미터에 요청하는 데이터를 담아 보내기 때문에 HTTP 메시지에 body가 없다. <code class=\"language-text\">POST</code>는 body 에 데이터를 담아 보내기 때문에 당연히 HTTP 메시지에 body가 존재한다.</li>\n<li><strong>멱등성 (idempotent)</strong> : <code class=\"language-text\">GET</code> 요청은 멱등이며, <code class=\"language-text\">POST</code>는 멱등이 아니다.</li>\n</ul>\n<br/>\n<h3 id=\"post와-put의-차이점\" style=\"position:relative;\"><a href=\"#post%EC%99%80-put%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"post와 put의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>POST와 PUT의 차이점</strong></h3>\n<p><code class=\"language-text\">POST</code>가 두번 실행된다면 리소스는 두개가 생기는 것이고 <code class=\"language-text\">PUT</code>이 두번 실행된다면 리소스가 두번 수정되거나 리소스가 하나 생기고 한번 수정되는 것이다.</p>\n<ul>\n<li><strong>POST는 새 리소스를 생성한다.</strong></li>\n<li><strong>PUT은 리소스를 수정 혹은 생성하는 역할을 한다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"put과-patch의-차이점\" style=\"position:relative;\"><a href=\"#put%EA%B3%BC-patch%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"put과 patch의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>PUT과 PATCH의 차이점</strong></h3>\n<p><code class=\"language-text\">PUT</code>은 요청 페이로드를 사용해 새로운 리소스를 생성하거나, 대상 리소스를 나타내는 데이터를 대체하는 것이고 <code class=\"language-text\">PATCH</code>는 리소스의 부분적인 수정을 할 때에 사용됩니다.</p>\n<p><code class=\"language-text\">PUT</code>은 가지고 있지 않은 리소스를 보내면 새로운 리소스를 생성하지만, <code class=\"language-text\">PATCH</code>는 에러를 유발한다.</p>\n<ul>\n<li><strong>PUT은 리소스의 모든 것을 업데이트 한다.</strong></li>\n<li><strong>POST는 리소스의 일부분을 업데이트 한다.</strong></li>\n</ul>\n<br/>\n<h2 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h2>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Methods\">HTTP 요청 메서드</a></p>\n<p><a href=\"https://velog.io/@yh20studio/CS-Http-Method-%EB%9E%80-GET-POST-PUT-DELETE\">Http Method 란? (GET, POST, PUT, DELETE)</a></p>\n<p><a href=\"https://velog.io/@songyouhyun/Get%EA%B3%BC-Post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%A5%BC-%EC%95%84%EC%8B%9C%EB%82%98%EC%9A%94\">Get과 Post의 차이를 아시나요?</a></p>\n<p><a href=\"https://velog.io/@vagabondms/%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%84%B0%EB%94%94-PUT%EA%B3%BC-PATCH-%EC%B0%A8%EC%9D%B4\">[ 기술 스터디 ] PUT과 PATCH 차이</a></p>\n<p><a href=\"https://atoz-developer.tistory.com/117\">[HTTP통신] HTTP 메소드 및 특징</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EB%A8%BC%EC%A0%80-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EB%A9%B1%EB%93%B1%EC%9D%B4%EB%9E%80-%EB%8B%A8%EC%96%B4\">먼저 알아두면 좋은 멱등이란 단어</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%81-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%ED%8A%B9%EC%A7%95\">각 메소드의 특징</a></p>\n<ul>\n<li><a href=\"#get%EC%9D%98-%ED%8A%B9%EC%A7%95\">GET의 특징</a></li>\n<li><a href=\"#post%EC%9D%98-%ED%8A%B9%EC%A7%95\">POST의 특징</a></li>\n<li><a href=\"#put%EC%9D%98-%ED%8A%B9%EC%A7%95\">PUT의 특징</a></li>\n<li><a href=\"#patch%EC%9D%98-%ED%8A%B9%EC%A7%95\">PATCH의 특징</a></li>\n<li><a href=\"#delete%EC%9D%98-%ED%8A%B9%EC%A7%95\">DELETE의 특징</a></li>\n<li><a href=\"#%EA%B7%B8-%EC%99%B8-headconnectoptionstrace-%EC%B6%94%EA%B0%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%9C%EB%B2%88-%EC%B0%BE%EC%95%84%EC%84%9C-%EB%B3%B4%EC%9E%90\">그 외 HEAD∙CONNECT∙OPTIONS∙TRACE 추가적으로 한번 찾아서 보자!</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></p>\n<ul>\n<li><a href=\"#get%EA%B3%BC-post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><strong>GET과 POST의 차이점</strong></a></li>\n<li><a href=\"#post%EC%99%80-put%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><strong>POST와 PUT의 차이점</strong></a></li>\n<li><a href=\"#put%EA%B3%BC-patch%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\"><strong>PUT과 PATCH의 차이점</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 24, 2022","title":"Http Method 란? (GET과 POST DELETE과 PUT 그리고 PATCH)","categories":"개발지식","author":"JungSany","emoji":"🗄️"},"fields":{"slug":"/knowledge/http-method/"}},"prev":{"id":"3054f4b6-47ab-524a-9420-04003d9c9a84","html":"<h3 id=\"프로세스process\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process\" aria-label=\"프로세스process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스(Process)</h3>\n<ul>\n<li>단순히 실행 중인 프로그램이라고 할 수 있다.</li>\n<li><strong>즉, 사용자가 작성한 프로그램이 운영체제에 의해 메모리 공간을 할당받아 실행 중인 것을 말함</strong></li>\n<li>이러한 프로세스는 프로그램에서 사용되는 데이터와 메모리 등의 자원 그리고 스레드로 구성됨</li>\n</ul>\n<br/>\n<h3 id=\"스레드thread\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9Cthread\" aria-label=\"스레드thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드(Thread)</h3>\n<ul>\n<li><code class=\"language-text\">프로세스 내에서 실제로 작업을 수행하는 주체</code>를 의미 또는 <code class=\"language-text\">프로세스 내에서 실행되는 실행 단위</code></li>\n<li>모든 프로세스에는 한 개 이상의 스레드가 존재하여 작업을 수행</li>\n<li>또한, 두 개 이상의 스레드를 가지는 프로세스를 멀티스레드 프로세스라고 한다.</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%A0%88%EB%93%9C_(%EC%BB%B4%ED%93%A8%ED%8C%85)\">스레드 (컴퓨팅) - 위키백과, 우리 모두의 백과사전</a></p>\n<p><a href=\"http://www.tcpschool.com/java/java_thread_concept\">코딩교육 티씨피스쿨</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process\">프로세스(Process)</a></li>\n<li><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9Cthread\">스레드(Thread)</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 25, 2022","title":"프로세스(Process)와 스레드(Thread)","categories":"개발지식","author":"JungSany","emoji":"🎥"},"fields":{"slug":"/knowledge/process-thread/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/javascript/event-loop/","nextSlug":"/knowledge/http-method/","prevSlug":"/knowledge/process-thread/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}