{"componentChunkName":"component---src-templates-blog-template-js","path":"/javascript/event-delegation/","result":{"data":{"cur":{"id":"ed1e59a8-73fe-5e1f-88f6-ad854e22fbde","html":"<h2 id=\"이벤트-위임이란\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84%EC%9D%B4%EB%9E%80\" aria-label=\"이벤트 위임이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 위임이란?</h2>\n<p><strong>상위 요소에서 하위 요소의 이벤트를 제어하는 방식</strong></p>\n<ul>\n<li><code class=\"language-text\">캡처링과 버블링</code>을 <code class=\"language-text\">활용</code>하면 강력한 이벤트 핸들링 패턴인 <code class=\"language-text\">이벤트 위임(event delegation)</code>을 <code class=\"language-text\">구현할 수 있다.</code></li>\n<li><code class=\"language-text\">비슷한 방식의 여러 하위 요소를 다루어야할 때</code> 이벤트 위임을 이용해 요소마다 핸들러를 할당하지 않고, <code class=\"language-text\">요소의 공통 조상(부모)</code>에 이벤트 핸들러를 <code class=\"language-text\">단 하나만 할당해 여러요소를 다룰수 있다.</code></li>\n<li>공통 조상에 할당한 핸들러에서 <code class=\"language-text\">event.target을 이용</code>하면 <code class=\"language-text\">실제 어디서 이벤트가 발생했는지 알 수 있다.</code></li>\n<li>사용자의 인터랙션을 통해 추가되는, 아직 만들어지지 않은 요소에 이벤트 핸들러를 할당해야 하는 경우 사용한다.</li>\n</ul>\n<br/>\n<h2 id=\"장점과-단점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90\" aria-label=\"장점과 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점과 단점</h2>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>많은 핸들러를 할당하지 않아도 되기 때문에 초기화가 단순해지고 메모리가 절약된다.</li>\n<li>요소를 추가하거나 제거할 때 해당 요소에 할당된 핸들러를 추가하거나 제거할 필요가 없기 때문에 코드가 짧아진다.</li>\n<li><code class=\"language-text\">innerHTML</code>이나 유사한 기능을 하는 스크립트로 요소 덩어리를 더하거나 뺄 수 있기 때문에 DOM 수정이 쉬워진다.</li>\n</ul>\n<br/>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>이벤트 위임을 사용하려면 이벤트가 반드시 버블링 되어야 합니다. 하지만 몇몇 이벤트는 버블링 되지 않습니다. 그리고 낮은 레벨에 할당한 핸들러엔 <code class=\"language-text\">event.stopPropagation()</code>를 쓸 수 없다.</li>\n<li>컨테이너 수준에 할당된 핸들러가 응답할 필요가 있는 이벤트이든 아니든 상관없이 모든 하위 컨테이너에서 발생하는 이벤트에 응답해야 하므로 CPU 작업 부하가 늘어날 수 있다. 그런데 이런 부하는 무시할만한 수준이므로 실제로는 잘 고려하지 않는다.</li>\n</ul>\n<br/>\n<h2 id=\"버블링bubbling과-캡처링capturing\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling%EA%B3%BC-%EC%BA%A1%EC%B2%98%EB%A7%81capturing\" aria-label=\"버블링bubbling과 캡처링capturing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블링(Bubbling)과 캡처링(Capturing)</h2>\n<p><img src=\"https://ko.javascript.info/article/bubbling-and-capturing/eventflow.svg\" alt=\"버블링과 캡처링\"></p>\n<h3 id=\"버블링bubbling\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling\" aria-label=\"버블링bubbling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블링(Bubbling)</h3>\n<ul>\n<li>특정 화면 요소에서 이벤트가 발생했을 때, 해당 <strong>이벤트가 더 상위의 화면 요소들로 전달</strong>되는 특징</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.html</span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"three\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndivs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">div</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> logEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>결과 : three → two → one</strong> 순으로 콘솔이 찍힘</p>\n<br/>\n<h3 id=\"캡쳐링capturing\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%B3%90%EB%A7%81capturing\" aria-label=\"캡쳐링capturing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡쳐링(Capturing)</h3>\n<ul>\n<li>버블링과 반대로 <strong>이벤트가 상위에서 하위 방향으로 전달</strong>되는 특징</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.html</span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"three\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndivs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">div</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> logEvent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">capture</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// -> 캡쳐링 (default 값은 false)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>결과 : one → two → three</strong> 순으로 콘솔이 찍힘</p>\n<br/>\n<h3 id=\"각-핸들러가-접근할-수-있는-event-객체의-프로퍼티\" style=\"position:relative;\"><a href=\"#%EA%B0%81-%ED%95%B8%EB%93%A4%EB%9F%AC%EA%B0%80-%EC%A0%91%EA%B7%BC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-event-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"각 핸들러가 접근할 수 있는 event 객체의 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>각 핸들러가 접근할 수 있는 Event 객체의 프로퍼티</h3>\n<ul>\n<li>event.target – 이벤트가 발생한 가장 안쪽의 요소</li>\n<li>event.currentTarget (=this) – 이벤트를 핸들링 하는 현재 요소 (핸들러가 실제 할당된 요소)</li>\n<li>event.eventPhase – 현재 이벤트 흐름 단계(캡처링=1, 타깃=2, 버블링=3)</li>\n</ul>\n<br/>\n<h3 id=\"적용-경험\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9-%EA%B2%BD%ED%97%98\" aria-label=\"적용 경험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 경험</h3>\n<ul>\n<li>간단한 적용 경험으로 TODO 리스트를 만들 때, 새로 리스트를 만들면 클릭 이벤트가 발생하지 않아 최상위 태그인 ul 태그에 이벤트 리스너를 적용하여 새로운 리스트(하위)에서 발생한 클릭 이벤트를 감지(버블링)할 수 있다.</li>\n</ul>\n<br/>\n<h3 id=\"stoppropagation와-eventpreventdefault의-차이\" style=\"position:relative;\"><a href=\"#stoppropagation%EC%99%80-eventpreventdefault%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"stoppropagation와 eventpreventdefault의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stopPropagation()와 event.preventDefault()의 차이</h3>\n<p>두개의 이벤트 메소드는 <code class=\"language-text\">이벤트 관련 동작에서 많이 사용</code>되는 코드이며, 알 필요가 있다.</p>\n<br/>\n<h4 id=\"eventstoppropagation\" style=\"position:relative;\"><a href=\"#eventstoppropagation\" aria-label=\"eventstoppropagation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event.stopPropagation()</h4>\n<ul>\n<li>복잡한 코드에서는 이벤트 전달 방식을 파악하기 다소 어려울 수 있다.</li>\n<li>이럴 경우, <code class=\"language-text\">event.stopPropagation()</code>을 사용하면 해당 이벤트가 <strong>상위 엘리먼트에 전달되지 않게 전달되는 것을 막는다.</strong></li>\n<li><strong>버블링</strong> → 클릭한 요소의 이벤트만 발생시키고 상위 요소로 영향 ❌</li>\n<li><strong>캡쳐링</strong> → 클릭한 요소의 최상위 요소만 이벤트를 발생시키고 하위 요소로 영향 ❌</li>\n</ul>\n<br/>\n<h4 id=\"eventpreventdefault\" style=\"position:relative;\"><a href=\"#eventpreventdefault\" aria-label=\"eventpreventdefault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event.preventDefault()</h4>\n<ul>\n<li>html에서 a 태그나 submit 태그는 고유의 동작이 있다. 페이지를 이동시킨다거나 form 안에 있는 input 등을 전송한다던가 그러한 동작이 있는데, <code class=\"language-text\">event.preventDefault()</code>는 그런 고유의 동작이 있는 태크의 <strong>고유 동작을 중단시킨다.</strong></li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.javascript.info/event-delegation\">이벤트 위임</a></p>\n<p><a href=\"https://ko.javascript.info/bubbling-and-capturing\">버블링과 캡처링</a></p>\n<p><a href=\"https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/\">캡틴판교 - 이벤트 버블링, 이벤트 캡처 그리고 이벤트 위임까지</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84%EC%9D%B4%EB%9E%80\">이벤트 위임이란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90\">장점과 단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling%EA%B3%BC-%EC%BA%A1%EC%B2%98%EB%A7%81capturing\">버블링(Bubbling)과 캡처링(Capturing)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B2%84%EB%B8%94%EB%A7%81bubbling\">버블링(Bubbling)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BA%A1%EC%B3%90%EB%A7%81capturing\">캡쳐링(Capturing)</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%81-%ED%95%B8%EB%93%A4%EB%9F%AC%EA%B0%80-%EC%A0%91%EA%B7%BC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-event-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">각 핸들러가 접근할 수 있는 Event 객체의 프로퍼티</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%81%EC%9A%A9-%EA%B2%BD%ED%97%98\">적용 경험</a></p>\n</li>\n<li>\n<p><a href=\"#stoppropagation%EC%99%80-eventpreventdefault%EC%9D%98-%EC%B0%A8%EC%9D%B4\">stopPropagation()와 event.preventDefault()의 차이</a></p>\n<ul>\n<li><a href=\"#eventstoppropagation\">event.stopPropagation()</a></li>\n<li><a href=\"#eventpreventdefault\">event.preventDefault()</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"이벤트 위임이란? 상위 요소에서 하위 요소의 이벤트를 제어하는 방식 을 하면 강력한 이벤트 핸들링 패턴인 을   이벤트 위임을 이용해 요소마다 핸들러를 할당하지 않고, 에 이벤트 핸들러를  공통 조상에 할당한 핸들러에서 하면  사용자의 인터랙션을 통해 추가되는, 아직 만들어지지 않은 요소에 이벤트 핸들러를 할당해야 하는 경우 사용한다. 장점과 단점 장점 많은 핸들러를 할당하지 않아도 되기 때문에 초기화가 단순해지고 메모리가 절약된다. 요소를 추가하거나 제거할 때 해당 요소에 할당된 핸들러를 추가하거나 제거할 필요가 없기 때문에 코드가 짧아진다. 이나 유사한 기능을 하는 스크립트로 요소 덩어리를 더하거나 뺄 수 있기 때문에 DOM 수정이 쉬워진다. 단점 이벤트 위임을 사용하려면 이벤트가 반드시 버블링 되어야 합니다. 하지만 몇몇 이벤트는 버블링 되지 않습니다. 그리고 낮은 레벨에 할당한 핸들러엔 를 쓸 수 없다. 컨테이너 수준에 할당된 핸들러가 응답할 필요가 있는 이벤트이든 아니든 …","frontmatter":{"date":"December 24, 2022","title":"이벤트 위임(버블링, 캡쳐링의 차이)이 무엇인지, 적용 경험 & 적용 이유","categories":"React JavaScript 개발지식","author":"JungSany","emoji":"🏂"},"fields":{"slug":"/javascript/event-delegation/"}},"next":{"id":"8ee84621-266c-5f4d-96c6-682bc3acfa53","html":"<h1 id=\"리액트란\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%9E%80\" aria-label=\"리액트란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트란?</h1>\n<p>Facebook에서 주도하여 개발한 <code class=\"language-text\">웹 어플리케이션의 UI를 효과적</code>으로 구축하기 위해 사용하는 <code class=\"language-text\">Javascript 기반</code> 라이브러리이다.</p>\n<p><code class=\"language-text\">React</code> 자체는 framework라 부를 수 있는 기준인 라우팅, 상태관리 기본 제공을 충족하지 못하기 때문에 <code class=\"language-text\">라이브러리이지만, React의 생태계는 framework</code>다.</p>\n<br/>\n<h2 id=\"react가-등장하게-된-이유는\" style=\"position:relative;\"><a href=\"#react%EA%B0%80-%EB%93%B1%EC%9E%A5%ED%95%98%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0%EB%8A%94\" aria-label=\"react가 등장하게 된 이유는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React가 등장하게 된 이유는</h2>\n<p>이전에는 어플리케이션의 UI를 제어하기 위해서는 DOM을 선택하고 어떤 이벤트가 발생하면 변화를 주도록 설정을 해야했다.</p>\n<p>유저와 상호작용이 많이 없는 웹 서비스에서는 상관이 크게 없었지만, 인터렉션이 자주 발생하고 변화가 많은 어플리케이션의 경우 힘들었고 코드 또한 난잡해지는 경우가 많이 생기게 되었다.</p>\n<br/>\n<h2 id=\"react의-특징은\" style=\"position:relative;\"><a href=\"#react%EC%9D%98-%ED%8A%B9%EC%A7%95%EC%9D%80\" aria-label=\"react의 특징은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React의 특징은</h2>\n<p><strong>1. 선언적(Declarative)</strong></p>\n<ul>\n<li>대화형 UI를 작성하기에 유리하다. 데이터가 변경되었을 때 효율적으로 렌더링을 수행할 수 있도록 한다.</li>\n</ul>\n<p><strong>2. 컴포넌트 기반(Component-based)</strong></p>\n<ul>\n<li>캡슐화된 컴포넌트가 스스로 상태를 관리하고 복잡한 UI도 효과적으로 구성할 수 있다.</li>\n</ul>\n<p><strong>3. 한 번 배워서 어디에서나 사용 가능(Learn Once, Write Anywhere)</strong></p>\n<ul>\n<li>기존 소스를 불필요하게 다시 작성하지 않고 새 기능을 개발할 수 있다.</li>\n<li>컴포넌트를 재사용할 수 있다.</li>\n</ul>\n<p><strong>4. Virtual DOM을 사용한다.</strong></p>\n<ul>\n<li>실제 DOM과 같은 내용을 담고 있는 복사본의 DOM을 사용한다.(복사본은 자바스크립트 객체 형태로 메모리상에 저장되어 있음)</li>\n<li>리엑트는 항상 두 개의 가상돔을 가지고 있다.(하나는 변경 이전의 내용을 담고 있고, 하나는 변경 이후에 보여질 내용을 담고 있음)</li>\n</ul>\n<br/>\n<h2 id=\"장단점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장단점</h2>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>\n<p>Component 하나로 관리가 가능하다.</p>\n</li>\n<li>\n<p>재사용성이 좋으며, 유지보수의 용이함, 그리고 코드 가독성을 높일 수 있다.</p>\n</li>\n<li>\n<p>성능이 뛰어난 가비지 컬랙터, 메모리 관리 기능을 지원한다.</p>\n</li>\n<li>\n<p>Component 단위로 UI 수정이 수월하다.</p>\n</li>\n<li>\n<p>다른 framework나 라이브러리와 병행하여 사용이 가능하다. (이미 개발이 완료된 프로젝트에도 적절히 녹여내어 사용할 수 있는 확장성을 가지고 있다.)</p>\n</li>\n<li>\n<p>Virtual DOM의 존재</p>\n<ul>\n<li>\n<p>React 컴포넌트가 리턴하는 값에 의해 만들어져 실제 보이고 있는 DOM과 비교해서 달라진 부위만 찾아내 바꾸게 된다.</p>\n<p>(컴포넌트 단위의 개발이 가능함)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>React Native의 앱 개발 가능</p>\n<ul>\n<li>웹과 앱이 엄청난 연관성이 있어, React의 하나의 프로젝트만 잘끝나도 React Native로 App을 만드는 리소스가 덜 든다.</li>\n</ul>\n</li>\n<li>\n<p>수 많은 커뮤니티 정보</p>\n<ul>\n<li>막히는 부분과 오류에 대한 내용을 많은 커뮤니티를 통해서 극복이 가능함(다른 웹 프레임워크보다 커뮤니티가 활성화 되어 있음)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>로딩시간이 길다.</li>\n<li>보여지는 부분에만 관여하기때문에 데이터 모델링, Routing, Ajax 등등의 기능을 제공하지 않는다.</li>\n<li>view 외 기능들은 직접 구현하거나 라이브러리를 사용하여 구현해야 하기 때문에 JavaScript 배경지식이 부족할 경우에는 사용이 힘들다.</li>\n<li>IE8 이하 버전들을 지원하지 않는다.</li>\n<li>SPA특성상 초기에 모든걸 렌더링 후에 웹페이지가 뜬다. 그 과정이 느리다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"작동원리-재조정reconciliation-일어나는-원리\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99%EC%9B%90%EB%A6%AC-%EC%9E%AC%EC%A1%B0%EC%A0%95reconciliation-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EC%9B%90%EB%A6%AC\" aria-label=\"작동원리 재조정reconciliation 일어나는 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동원리, 재조정(Reconciliation) 일어나는 원리</h2>\n<p><img src=\"https://miro.medium.com/max/1400/1*JCrDk-N-wpPnE9j0GObItg.webp\" alt=\"리액트 재조정 이미지\"></p>\n<p><strong>React는 컴포넌트에서 prop이나 state가 변경될 때, 직전에 렌더링된 요소(원본 가상DOM)와 새로 반환된 요소(변경된 가상 DOM)를 비교하여 실제 DOM을 업데이트 할지 말지 결정해야 한다. 이 때 두 요소가 일치하지 않으면, React는 새로운 요소로 DOM을 업데이트 하는데, 이러한 <code class=\"language-text\">프로세스를 재조정(Reconciliation)</code>이라고 한다.</strong></p>\n<p><strong>React는 <code class=\"language-text\">Virtual DOM을 사용</code>하여 효과적인 방법으로 UI를 빠르게 랜더링한다. 또 <a href=\"https://rnfltpgus.github.io/react/flux-architecture/\">단반향 데이터 흐름(Flux)</a>를 갖는다.</strong></p>\n<p><strong>상태가 변경된 부분은 Diffing 알고리즘을 통해 파악하고, <code class=\"language-text\">Batch Update를 수행한다.</code> (16버전 이후로 부터는 Fiber 알고리즘을 통해 상태의 변경을 파악한다.)</strong></p>\n<ol>\n<li>Virtual Dom이 리렌더링 된다.</li>\n<li>이전 Virtual Dom과 현재의 Virtual Dom을 비교를 한다.</li>\n<li>Diffing 알고리즘(Fibar)을 이용하여 DOM 트리를 순회하며, 변화한 곳을 체크하는데 체크가 될 경우 아래 자식요소는 <code class=\"language-text\">휴리스틱 알고리즘</code>에 의해 판단을 하지않고 전부 변화되었다고 간주한다.</li>\n<li>변화된 곳이 모두 파악되면, 리액트는 효율적인 업데이트 방법인 <code class=\"language-text\">Batch Update</code>를 수행하여 변화된 데이터를 실제 DOM에 <code class=\"language-text\">한번에 적용</code>시킨다.</li>\n</ol>\n<br/>\n<h3 id=\"효과적인-code-classlanguage-text재조정code이-이루어지기-위해서는\" style=\"position:relative;\"><a href=\"#%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9D%B8-code-classlanguage-text%EC%9E%AC%EC%A1%B0%EC%A0%95code%EC%9D%B4-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A7%80%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C%EB%8A%94\" aria-label=\"효과적인 code classlanguage text재조정code이 이루어지기 위해서는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>효과적인 <code class=\"language-text\">재조정</code>이 이루어지기 위해서는?</h3>\n<ul>\n<li><strong>부모 노드의 타입이 <code class=\"language-text\">다르면</code> 자식 노드는 <code class=\"language-text\">비교하지 않는게 설정</code>하거나 노드에 <code class=\"language-text\">key를 부여</code>하면 일일이 탐색하지 않고도 접근할 수 있다.</strong></li>\n</ul>\n<br/>\n<h2 id=\"더-알면-좋을-것\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%95%8C%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83\" aria-label=\"더 알면 좋을 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 알면 좋을 것</h2>\n<ul>\n<li>우리가 자주 보는 instagram, facebook 같은 사이트의 <code class=\"language-text\">새로고침이 없이 변경</code>되는 모습, 마치 앱처럼 보이는 <code class=\"language-text\">동적인 웹 페이지</code> <code class=\"language-text\">SPA(Single Page Application)</code>, <code class=\"language-text\">CSR(Client Side Rendering)</code>을 사용한 페이지라고 할 수 있음</li>\n<li><code class=\"language-text\">정적인 페이지란</code>? 웹 서버에 이미 저장되어 있는 HTML 문서를 클라이언트에게 전달하여 받은 페이지</li>\n<li><code class=\"language-text\">동적인 페이지란</code>? 유저의 행동과 흐름에 따라 웹페이지의 구성을 달리해주어야 하는 페이지</li>\n<li><code class=\"language-text\">정적인 페이지</code>를 만드는 것이 목적이라면 <code class=\"language-text\">프레임워크의 도움은 필요하지 않을</code>텐데, <code class=\"language-text\">요즘 트렌드</code>는 웹이 정적이고 단순한 페이지에서 벗어나 <code class=\"language-text\">복잡하고 동적으로 이루어져 있음</code></li>\n</ul>\n<br/>\n<h3 id=\"dom-이란\" style=\"position:relative;\"><a href=\"#dom-%EC%9D%B4%EB%9E%80\" aria-label=\"dom 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 이란?</h3>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/DOM-model.svg/1200px-DOM-model.svg.png\" alt=\"DOM 이미지\"></p>\n<ul>\n<li>웹 페이지에 들어가있는 모든 엘리먼트를 트리형태로 작성한 것을 말함</li>\n</ul>\n<br/>\n<h3 id=\"virtual-dom이하-가상-dom이란\" style=\"position:relative;\"><a href=\"#virtual-dom%EC%9D%B4%ED%95%98-%EA%B0%80%EC%83%81-dom%EC%9D%B4%EB%9E%80\" aria-label=\"virtual dom이하 가상 dom이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual Dom(이하 가상 DOM)이란?</h3>\n<p><img src=\"https://elmprogramming.com/images/chapter-5/5.3-virtual-dom/elm-runtime-virtual-dom.svg\" alt=\"Virtual Dom 설멍 이미지\"></p>\n<ul>\n<li>실제 DOM에 접근하여 조작하는 대신에 HTML DOM을 추상화시켜, 자바스크립트 객체로 표현된 복사본</li>\n<li><code class=\"language-text\">수정사항이 여러 가지 있더라도</code>, <code class=\"language-text\">한 번만 렌더링을 일으킴</code></li>\n<li>객체를 <code class=\"language-text\">작은 단위로 쪼개어 작업</code>한다면, <code class=\"language-text\">렌더링 시</code> 발생하는 계산의 <code class=\"language-text\">연산비용을 줄일 수 있음</code></li>\n<li>하지만 <code class=\"language-text\">무조건 Virtual Dom이 빠른 것은 아니다.</code> <code class=\"language-text\">정보 제공만 하는 웹페이지라면</code> 인터랙션이 발생하지 않기 때문에 <code class=\"language-text\">일반 DOM의 성능이 더 좋을 수도 있음</code></li>\n</ul>\n<br/>\n<h2 id=\"용어사전\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%82%AC%EC%A0%84\" aria-label=\"용어사전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어사전</h2>\n<p><a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&#x26;blogId=kosoodream&#x26;logNo=220822811776\">Interaction(인터렉션)</a>: 둘 이상의 물체나 대상이 서로 영향을 주고 받는 일종의 행동, 즉 인터렉션은 단방향 서비스가 아니라 서로 교류가 있는 양방향 통신이나 서비스를 의미</p>\n<p>Batch Update: <code class=\"language-text\">변경된 모든 엘리먼트들</code>을 <code class=\"language-text\">집단으로 한번에 적용</code> 시키는 것을 말한다.</p>\n<p>Diffing 알고리즘: <code class=\"language-text\">변경된 내용이 화면에 새롭게 그려지기 이전</code>(실제 DOM이 변경되기 이전)에 리액트는 두 개의 가상돔을 <code class=\"language-text\">비교해서 정확히 어떤 부분이 바뀌었는지</code> 효율적으로 비교하여 <code class=\"language-text\">파악</code>하는 알고리즘</p>\n<br/>\n<h2 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h2>\n<p><a href=\"https://ko.reactjs.org/docs/reconciliation.html\">리엑트 재조정</a></p>\n<p><a href=\"https://ui.toast.com/weekly-pick/ko_20210819\">Incremental DOM과 Virtual DOM 비교</a></p>\n<p><a href=\"https://velog.io/@jeromecheon/React%EB%9E%80-%ED%8A%B9%EC%A7%95%EA%B3%BC-%EC%9E%A5%EB%8B%A8%EC%A0%90-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0\">React란? 특징과 장단점 파헤치기</a></p>\n<p><a href=\"https://gurtn.tistory.com/96\">[React] 리액트를 사용하는 이유</a></p>\n<p><a href=\"https://velog.io/@dbfudgudals/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90\">리액트의 장점과 단점</a></p>\n<p><a href=\"https://www.howdy-mj.me/dom/what-is-dom\">DOM과 Virtual Dom이란?</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=gc-kXt0tjTM&#x26;list=PLZ5oZ2KmQEYjVH2ie-sZJnbEE6B-uCVIh&#x26;index=4&#x26;t=7s\">별코딩 - 버츄얼돔</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#react%EA%B0%80-%EB%93%B1%EC%9E%A5%ED%95%98%EA%B2%8C-%EB%90%9C-%EC%9D%B4%EC%9C%A0%EB%8A%94\">React가 등장하게 된 이유는</a></p>\n</li>\n<li>\n<p><a href=\"#react%EC%9D%98-%ED%8A%B9%EC%A7%95%EC%9D%80\">React의 특징은</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%A5%EB%8B%A8%EC%A0%90\">장단점</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%91%EB%8F%99%EC%9B%90%EB%A6%AC-%EC%9E%AC%EC%A1%B0%EC%A0%95reconciliation-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EC%9B%90%EB%A6%AC\">작동원리, 재조정(Reconciliation) 일어나는 원리</a></p>\n<ul>\n<li><a href=\"#%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9D%B8-%EC%9E%AC%EC%A1%B0%EC%A0%95%EC%9D%B4-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A7%80%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C%EB%8A%94\">효과적인 <code class=\"language-text\">재조정</code>이 이루어지기 위해서는?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8D%94-%EC%95%8C%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83\">더 알면 좋을 것</a></p>\n<ul>\n<li><a href=\"#dom-%EC%9D%B4%EB%9E%80\">DOM 이란?</a></li>\n<li><a href=\"#virtual-dom%EC%9D%B4%ED%95%98-%EA%B0%80%EC%83%81-dom%EC%9D%B4%EB%9E%80\">Virtual Dom(이하 가상 DOM)이란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EC%96%B4%EC%82%AC%EC%A0%84\">용어사전</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 23, 2022","title":"React란? 그리고 사용하는 이유와 단점","categories":"React","author":"JungSany","emoji":"🚨"},"fields":{"slug":"/react/react-use-reasons/"}},"prev":{"id":"98e3f2fc-e9d5-5878-964f-0d9490f1d77a","html":"<p><img src=\"https://velog.velcdn.com/images/gomuzom/post/4d78ca3b-d4ee-4723-b55b-6a12d5566e30/image.png\" alt=\"restful 이미지\"></p>\n<h1 id=\"restful이란\" style=\"position:relative;\"><a href=\"#restful%EC%9D%B4%EB%9E%80\" aria-label=\"restful이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>RESTful이란?</strong></h1>\n<p><strong>두 컴퓨터 시스템이 인터넷을 통해 <code class=\"language-text\">정보를 안전하게 교환</code>하기 위해 사용하는 인터페이스이다.</strong></p>\n<p><strong>대부분의 비즈니스 애플리케이션은 다양한 태스크를 수행하기 위해 다른 내부 애플리케이션 및 <a href=\"https://rnfltpgus.github.io/knowledge/3rd-party/\">서드 파티</a> 애플리케이션과 통신해야 하는데, <code class=\"language-text\">RESTful API</code>는 <code class=\"language-text\">안전하고 신뢰</code>할 수 있으며 <code class=\"language-text\">효율적인 소프트웨어 통신 표준</code>을 따르므로 이러한 <code class=\"language-text\">정보 교환을 지원</code>합니다.</strong></p>\n<br/>\n<h2 id=\"restful을-알아가기-전-알아두어야-할-rest란\" style=\"position:relative;\"><a href=\"#restful%EC%9D%84-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-%EC%A0%84-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-rest%EB%9E%80\" aria-label=\"restful을 알아가기 전 알아두어야 할 rest란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful을 알아가기 전 알아두어야 할 <strong>REST</strong>란?</h2>\n<p><strong><code class=\"language-text\">HTTP URI</code>를 통해 자원을 명시하고, <a href=\"https://rnfltpgus.github.io/knowledge/http-method/\">HTTP Method(POST, GET, PUT, DELETE)</a>를 통해 해당 자원에 대한 CRUD OPERATION을 적용하는 것을 의미한다.</strong></p>\n<p><strong>즉, <code class=\"language-text\">REST</code>는 <code class=\"language-text\">자원 기반의 구조(ROA: Resource Oriented Architecture) 설계의 중심</code>에 Resource가 있고 <code class=\"language-text\">HTTP Method</code>를 통해\nResource를 처리하도록 설계된 <code class=\"language-text\">아키텍쳐</code>를 의미한다.</strong></p>\n<p><strong>웹의 모든 자원에 고유한 ID인 <code class=\"language-text\">HTTP URI</code>를 부여한다.</strong></p>\n<br/>\n<h3 id=\"rest의-구성\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%EA%B5%AC%EC%84%B1\" aria-label=\"rest의 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 구성</h3>\n<p><strong>1. 자원(Resource) - URI</strong></p>\n<ul>\n<li>모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.</li>\n<li>자원을 구별하는 ID는 <code class=\"language-text\">/Developer/id/sany</code>와 같은 <code class=\"language-text\">HTTP URI</code>이다.</li>\n</ul>\n<p><strong>2. 행위 (Verb) - Http Method</strong></p>\n<ul>\n<li>HTTP 프로토콜의 <code class=\"language-text\">Method</code>를 사용한다.</li>\n<li>HTTP 프로토콜은 GET, POST, PUT, DELETE와 같은 메서드를 제공한다.</li>\n</ul>\n<p><strong>3. 표현 (Representation of Resource)</strong></p>\n<ul>\n<li><code class=\"language-text\">Client</code>가 자원의 상태(정보)에 대한 조작을 <code class=\"language-text\">요청(Request)</code>하면 <code class=\"language-text\">Server</code>는 이에 적절한 <code class=\"language-text\">응답(Representation)</code>을 보낸다.</li>\n<li>REST에서 하나의 자원은 JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타낼 수 있다.</li>\n<li>현재는 <code class=\"language-text\">JSON으로 주고 받는 것이 대부분</code>이다.</li>\n</ul>\n<br/>\n<h3 id=\"rest의-특징\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"rest의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 특징</h3>\n<p><strong>1. Server-Client(서버-클라이언트 구조)</strong></p>\n<p><strong>2. Stateless(무상태)</strong></p>\n<p><strong>3. Cacheable(캐시 처리 가능)</strong></p>\n<p><strong>4. Layered System(계층화)</strong></p>\n<p><strong>5. Uniform Interface(인터페이스 일관성)</strong></p>\n<br/>\n<h3 id=\"rest의-장단점\" style=\"position:relative;\"><a href=\"#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"rest의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 장단점</h3>\n<h4 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<ul>\n<li><code class=\"language-text\">HTTP 프로토콜의 인프라를 그대로 사용</code>하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없다.</li>\n<li>HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해 준다.</li>\n<li><code class=\"language-text\">HTTP 표준 프로토콜에 따르는</code> 모든 플랫폼에서 <code class=\"language-text\">사용이 가능</code>하다.</li>\n<li>Hypermedia API의 기본을 충실히 지키면서 <code class=\"language-text\">범용성을 보장</code>한다.</li>\n<li>REST API 메시지가 의도하는 바를 명확하게 나타내므로 <code class=\"language-text\">쉽게 파악</code>할 수 있다.</li>\n<li>여러 가지 서비스 디자인에서 생길 수 있는 <code class=\"language-text\">문제를 최소화</code>한다.</li>\n<li>서버와 클라이언트의 <code class=\"language-text\">역할을 명확하게 분리</code>한다.</li>\n</ul>\n<br/>\n<h4 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h4>\n<ul>\n<li>표준이 자체가 존재하지 않아 <code class=\"language-text\">정의가 필요</code>하다.</li>\n<li>HTTP Method <code class=\"language-text\">형태가 제한적</code>이다.</li>\n<li>브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 정보의 값을 처리해야 하므로 <code class=\"language-text\">전문성이 요구</code>된다.</li>\n<li><code class=\"language-text\">구형 브라우저</code>에서 <code class=\"language-text\">호환이 되지 않아</code> 지원해주지 못하는 동작이 많다.(익스폴로어)</li>\n</ul>\n<br/>\n<h2 id=\"restful의-목적\" style=\"position:relative;\"><a href=\"#restful%EC%9D%98-%EB%AA%A9%EC%A0%81\" aria-label=\"restful의 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful의 목적</h2>\n<ul>\n<li>\n<p><strong>이해하기 쉽고 사용하기 쉬운 REST API를 만드는 것이다.</strong></p>\n</li>\n<li>\n<p><strong>RESTful한 API를 구현하는 근본적인 목적은 <code class=\"language-text\">일관적인 컨벤션을 통한 API의 이해도 및 호환성을 높이는 것</code>이니, 성능이 중요한 상황에서는 굳이 RESTful한 API를 구현할 필요는 없다.</strong></p>\n</li>\n</ul>\n<br/>\n<h2 id=\"restful-하지-못한-경우\" style=\"position:relative;\"><a href=\"#restful-%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-label=\"restful 하지 못한 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful 하지 못한 경우</h2>\n<ul>\n<li>Ex1) CRUD 기능을 모두 POST로만 처리하는 API</li>\n<li>Ex2) route에 resource, id 외의 정보가 들어가는 경우(/students/updateName)</li>\n</ul>\n<br/>\n<h2 id=\"restful-api를-사용하면-어떤-이점이-있나\" style=\"position:relative;\"><a href=\"#restful-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%9D%B4%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%82%98\" aria-label=\"restful api를 사용하면 어떤 이점이 있나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API를 사용하면 어떤 이점이 있나?</h2>\n<h3 id=\"확장성\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장성</h3>\n<p>REST API를 구현하는 시스템은 REST가 클라이언트-서버 <code class=\"language-text\">상호 작용</code>을 <code class=\"language-text\">최적화</code>하기 때문에 <code class=\"language-text\">효율적으로 크기 조정할 수 있다.</code></p>\n<p><code class=\"language-text\">무상태</code>는 서버가 과거 클라이언트 요청 정보를 유지할 필요가 없기 때문에 서버 로드를 제거한다.</p>\n<p>잘 관리된 <code class=\"language-text\">캐싱</code>은 일부 클라이언트-서버 상호 작용을 부분적으로 또는 완전히 제거한다. 이러한 모든 기능은 성능을 저하시키는 <code class=\"language-text\">통신 병목 현상을 일으키지 않</code>으면서 <code class=\"language-text\">확장성을 지원</code>한다.</p>\n<br/>\n<h3 id=\"유연성\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\" aria-label=\"유연성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유연성</h3>\n<p>RESTful 웹 서비스는 완전한 클라이언트-서버 분리를 지원한다.</p>\n<p>각 부분이 독립적으로 발전할 수 있도록 다양한 서버 <code class=\"language-text\">구성 요소</code>를 <code class=\"language-text\">단순화</code>하고 <code class=\"language-text\">분리</code>한다.</p>\n<p>서버 애플리케이션의 플랫폼 또는 기술 변경은 클라이언트 애플리케이션에 영향을 주지 않는다.</p>\n<p>애플리케이션 함수를 <code class=\"language-text\">계층화</code>하는 기능은 <code class=\"language-text\">유연성을 더욱 향상</code>시킨다.(Ex1 개발자는 애플리케이션 로직을 다시 작성하지 않고도 데이터베이스 계층을 변경할 수 있다.)</p>\n<br/>\n<h3 id=\"독립성\" style=\"position:relative;\"><a href=\"#%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-label=\"독립성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>독립성</h3>\n<p>REST API는 사용되는 기술과 독립적이다.</p>\n<p>API 설계에 영향을 주지 않고 다양한 프로그래밍 언어로 클라이언트 및 서버 애플리케이션을 모두 작성할 수 있다.</p>\n<p>또한 통신에 영향을 주지 않고 양쪽의 기본 기술을 변경할 수 있다.</p>\n<br/>\n<h2 id=\"rest-api-설계규칙\" style=\"position:relative;\"><a href=\"#rest-api-%EC%84%A4%EA%B3%84%EA%B7%9C%EC%B9%99\" aria-label=\"rest api 설계규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API 설계규칙</h2>\n<ol>\n<li>URI는 동사보다는 명사를, 대문자보다는 소문자를 사용하여야 한다.</li>\n<li>슬래시( / )로 계층 관계를 표현한다.</li>\n<li>URI의 마지막에는 슬래시( / )를 붙이지 않는다.</li>\n<li>언더바( _ ) 대신 하이폰( - )을 사용한다.</li>\n<li>가독성이 떨어지는 경우 하이픈( - )을 사용한다.</li>\n<li>대문자와 소문자로 URI를 정의하면 기억하기 어려우며 잘못 적을 가능성이 높아진다.</li>\n<li>파일확장자는 URI에 포함하지 않는다</li>\n</ol>\n<br/>\n<h2 id=\"끝말\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EB%A7%90\" aria-label=\"끝말 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝말</h2>\n<p><strong>REST API 설계규칙을 따라 RESTful한 API를 만들수 있도록 추가적으로 실습을 진행해 보는 글을 작성해 보아야 겠다.</strong></p>\n<p><strong>REST API는 동사로 작성하는 것보다는 명사로 작성해 주는 것이 좋다.</strong></p>\n<br/>\n<h2 id=\"용어정리\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\" aria-label=\"용어정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어정리</h2>\n<p><strong>API</strong>: 다른 소프트웨어 시스템과 통신하기 위해 따라야 하는 규칙</p>\n<p><strong>REST(Representational State Transfer)</strong>: API 작동 방식에 대한 조건을 부과하는 소프트웨어 아키텍처 -> <code class=\"language-text\">REST API</code>와 <code class=\"language-text\">RESTful API</code>는 같은 의미로 사용할 수 있다.</p>\n<p><strong>CRUD Operation</strong>: CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말로 REST에서의 CRUD Operation 동작 예시는 다음과 같다. <a href=\"https://rnfltpgus.github.io/knowledge/http-method/\">Http Method에 대해서</a></p>\n<ul>\n<li>Create : 데이터 생성(POST)</li>\n<li>Read : 데이터 조회(GET)</li>\n<li>Update : 데이터 수정(PUT, PATCH)</li>\n<li>Delete : 데이터 삭제(DELETE)</li>\n<li>HEAD : header 정보 조회(HEAD)</li>\n</ul>\n<p><strong>로드밸런싱</strong>: 서버가 처리해야 할 업무 혹은 요청(Load)을 여러 대의 서버로 나누어(Balancing) 처리하는 것을 의미</p>\n<p><a href=\"https://rnfltpgus.github.io/knowledge/proxy/\"><strong>PROXY 서버</strong></a>: 보안상의 문제로 직접 통신 할 수 없을때 중계 해주는 서버</p>\n<p><strong>게이트웨이</strong>: 한 네트워크(segment)에서 다른 네트워크로 이동하기 위하여 거쳐야 하는 지점, 서로 다른 네트워크(기종이 다른 네트워크)를 연결</p>\n<br/>\n<h2 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h2>\n<p><a href=\"https://aws.amazon.com/ko/what-is/restful-api/\">RESTful API란 무엇입니까?</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\">Day1, 2-2. 그런 REST API로 괜찮은가</a></p>\n<p><a href=\"https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html\">[Network] REST란? REST API란? RESTful이란?</a></p>\n<p><a href=\"https://velog.io/@gomuzom/RESTful-Api\">RESTful Api란</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#restful%EC%9D%84-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-%EC%A0%84-%EC%95%8C%EC%95%84%EB%91%90%EC%96%B4%EC%95%BC-%ED%95%A0-rest%EB%9E%80\">RESTful을 알아가기 전 알아두어야 할 <strong>REST</strong>란?</a></p>\n<ul>\n<li>\n<p><a href=\"#rest%EC%9D%98-%EA%B5%AC%EC%84%B1\">REST의 구성</a></p>\n</li>\n<li>\n<p><a href=\"#rest%EC%9D%98-%ED%8A%B9%EC%A7%95\">REST의 특징</a></p>\n</li>\n<li>\n<p><a href=\"#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">REST의 장단점</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#restful%EC%9D%98-%EB%AA%A9%EC%A0%81\">RESTful의 목적</a></p>\n</li>\n<li>\n<p><a href=\"#restful-%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EA%B2%BD%EC%9A%B0\">RESTful 하지 못한 경우</a></p>\n</li>\n<li>\n<p><a href=\"#restful-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%9D%B4%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%82%98\">RESTful API를 사용하면 어떤 이점이 있나?</a></p>\n<ul>\n<li><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\">확장성</a></li>\n<li><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\">유연성</a></li>\n<li><a href=\"#%EB%8F%85%EB%A6%BD%EC%84%B1\">독립성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#rest-api-%EC%84%A4%EA%B3%84%EA%B7%9C%EC%B9%99\">REST API 설계규칙</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%81%9D%EB%A7%90\">끝말</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC\">용어정리</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 24, 2022","title":"RESTful API란?","categories":"개발지식","author":"JungSany","emoji":"🪄"},"fields":{"slug":"/knowledge/restful-api/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/javascript/event-delegation/","nextSlug":"/react/react-use-reasons/","prevSlug":"/knowledge/restful-api/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}