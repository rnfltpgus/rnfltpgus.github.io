{"componentChunkName":"component---src-templates-blog-template-js","path":"/javascript/promise/","result":{"data":{"cur":{"id":"9859aad1-c0dd-5cc6-b5d8-4caa26896342","html":"<h3 id=\"promise란\" style=\"position:relative;\"><a href=\"#promise%EB%9E%80\" aria-label=\"promise란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise란?</h3>\n<ul>\n<li>“<strong><em><code class=\"language-text\">Promise</code>란 비동기 처리를 조금 더 수월하게 처리하게끔 도와주는 추상화된 소프트웨어 개념”</em></strong></li>\n<li>콜백지옥을 해결하기 위해 <code class=\"language-text\">ES6</code>에서 Promise로 지원하게 되었다.</li>\n<li><strong>Promise의 핵심은 비동기에서 성공과 실패를 분리해서 메소드를 수행하며, <code class=\"language-text\">에러핸들링이 가능</code>하다는 점이 있다.</strong></li>\n<li>Promise는 <code class=\"language-text\">두가지 인수를 받는데</code>, 비동기식이 정상적으로 실행된다면 <code class=\"language-text\">resolve</code>를 비정상적으로 실행된다면 두번째 인수인 <code class=\"language-text\">reject</code>를 호출한다.</li>\n</ul>\n<br/>\n<h3 id=\"promise를-호출한-이유-사용할-수-있는-메소드는-code-classlanguage-text3가지code\" style=\"position:relative;\"><a href=\"#promise%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%9C-%EC%9D%B4%EC%9C%A0-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C%EB%8A%94-code-classlanguage-text3%EA%B0%80%EC%A7%80code\" aria-label=\"promise를 호출한 이유 사용할 수 있는 메소드는 code classlanguage text3가지code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise를 호출한 이유 사용할 수 있는 메소드는 <code class=\"language-text\">3가지</code></h3>\n<ul>\n<li>then: reslove()를 통한 리턴 값</li>\n<li>catch: reject()를 통한 리턴 값</li>\n<li>finally: 실행 여부와 상관없이 이후 이벤트 실행</li>\n</ul>\n<br/>\n<h3 id=\"가장-큰-code-classlanguage-text장점code으로는\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5-%ED%81%B0-code-classlanguage-text%EC%9E%A5%EC%A0%90code%EC%9C%BC%EB%A1%9C%EB%8A%94\" aria-label=\"가장 큰 code classlanguage text장점code으로는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장 큰 <code class=\"language-text\">장점</code>으로는</h3>\n<ul>\n<li>코드의 가독성이 증가</li>\n<li>반복해서 재사용하는 예외처리 작업이 줄어듬</li>\n<li><code class=\"language-text\">throw</code>를 사용하면 <code class=\"language-text\">error</code> 상황을 쉽게 찾아내 <code class=\"language-text\">에러 핸들링이 한결 편해짐</code></li>\n</ul>\n<br/>\n<h3 id=\"한번에-비동기-처리를-해야되는-경우\" style=\"position:relative;\"><a href=\"#%ED%95%9C%EB%B2%88%EC%97%90-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%B4%EC%95%BC%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"한번에 비동기 처리를 해야되는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한번에 비동기 처리를 해야되는 경우</h3>\n<ul>\n<li><strong>Promise.all</strong>\n<ul>\n<li>프로미스가 담겨 있는 배열 등의 이터러블을 인자로 전달 받는다. 그리고 <code class=\"language-text\">전달받은 모든 프로미스를 병렬로 처리</code>하고 그 처리 결과를 resolve하는 새로운 프로미스를 반환한다.</li>\n<li><strong>전달받은 모든 프로미스를 병렬로 처리</strong>한다. 이때 모든 프로미스의 처리가 종료될 때까지 기다린 후 모든 처리 결과를 resolve 또는 reject 한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 3 ]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise - JavaScript | MDN</a></p>\n<p><a href=\"https://velog.io/@beberiche/promise-asyncawait\">promise, async/await</a></p>\n<p><a href=\"https://ko.javascript.info/promise-basics\">프라미스</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#promise%EB%9E%80\">Promise란?</a></li>\n<li><a href=\"#promise%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%9C-%EC%9D%B4%EC%9C%A0-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C%EB%8A%94-3%EA%B0%80%EC%A7%80\">Promise를 호출한 이유 사용할 수 있는 메소드는 <code class=\"language-text\">3가지</code></a></li>\n<li><a href=\"#%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%9E%A5%EC%A0%90%EC%9C%BC%EB%A1%9C%EB%8A%94\">가장 큰 <code class=\"language-text\">장점</code>으로는</a></li>\n<li><a href=\"#%ED%95%9C%EB%B2%88%EC%97%90-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%B4%EC%95%BC%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">한번에 비동기 처리를 해야되는 경우</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","excerpt":"Promise란? “란 비동기 처리를 조금 더 수월하게 처리하게끔 도와주는 추상화된 소프트웨어 개념” 콜백지옥을 해결하기 위해 에서 Promise로 지원하게 되었다. Promise의 핵심은 비동기에서 성공과 실패를 분리해서 메소드를 수행하며, 하다는 점이 있다. Promise는 , 비동기식이 정상적으로 실행된다면 를 비정상적으로 실행된다면 두번째 인수인 를 호출한다. Promise를 호출한 이유 사용할 수 있는 메소드는  then: reslove()를 통한 리턴 값 catch: reject()를 통한 리턴 값 finally: 실행 여부와 상관없이 이후 이벤트 실행 가장 큰 으로는 코드의 가독성이 증가 반복해서 재사용하는 예외처리 작업이 줄어듬 를 사용하면  상황을 쉽게 찾아내  한번에 비동기 처리를 해야되는 경우 Promise.all 프로미스가 담겨 있는 배열 등의 이터러블을 인자로 전달 받는다. 그리고 하고 그 처리 결과를 resolve하는 새로운 프로미스를 반환한다. 전달받은 …","frontmatter":{"date":"December 21, 2022","title":"Promise","categories":"JavaScript","author":"JungSany","emoji":"🍍"},"fields":{"slug":"/javascript/promise/"}},"next":{"id":"79a422ed-7110-5de5-b83f-03f040831d0a","html":"<h3 id=\"콜백이란\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%B4%EB%9E%80\" aria-label=\"콜백이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백이란?</h3>\n<ul>\n<li>비동기처리방식에 속하며, 함수가 끝나고 난 뒤에 실행되는 함수</li>\n<li>자바스크립트에서 함수는 객체이다. 따라서 <strong>함수는 함수를 인자로 받고 다른 함수를 통해 반환될 수 있는데, 인자로 대입되는 함수</strong>를 <code class=\"language-text\">콜백함수</code>라고 부름</li>\n<li>아래의 예시처럼 다른 코드가 특정 코드가 마무리되기 전에 실행되지 않도록, 즉 비동기 처리를 위한 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<details>\n<summary>정답</summary>\n<div markdown=\"1\">\n<p>출력 순서는 2 → 1</p>\n</div>\n</details>\n<br/>\n<h3 id=\"콜백의-불편사항\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%B6%88%ED%8E%B8%EC%82%AC%ED%95%AD\" aria-label=\"콜백의 불편사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백의 불편사항</h3>\n<ul>\n<li>\n<p>비동기 처리에 콜백 함수를 이용하게 되면 코드를 중첩시켜 작성하게 되기 때문에 에러, 예외처리가 어렵고 복잡도가 증가하게 되어 콜백지옥을 맛볼 수 있다.</p>\n</li>\n<li>\n<p>콜백함수의 중첩은 에러처리가 힘듬다.</p>\n<p><img src=\"https://velog.velcdn.com/images/yj05037/post/9c47656d-edd0-4318-81b3-52f2244172cb/image.png\" alt=\"callback 지옥 이미지\"></p>\n</li>\n</ul>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%B4%EB%9E%80\">콜백이란?</a></li>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%B6%88%ED%8E%B8%EC%82%AC%ED%95%AD\">콜백의 불편사항</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2022","title":"콜백(CallBack)이란?","categories":"JavaScript","author":"JungSany","emoji":"🥥"},"fields":{"slug":"/javascript/callback/"}},"prev":{"id":"c4dfa664-133e-59d0-a0e2-286938cf6974","html":"<p><strong>Callback 지옥을 유발하는 처리방식보다 비동기 프로그래밍을 동기방식처럼 직관적으로 표현할 수 있다.</strong></p>\n<br/>\n<h2 id=\"async--await란\" style=\"position:relative;\"><a href=\"#async--await%EB%9E%80\" aria-label=\"async  await란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async &#x26; await란?</h2>\n<ul>\n<li><code class=\"language-text\">Async</code>를 함수(Function) 앞에 붙이면 promise를 반환한다.</li>\n<li><code class=\"language-text\">Async</code>는 평범한 함수를 프라미스를 리턴하는 비동기적인 함수로 만들어주는 키워드고</li>\n<li><code class=\"language-text\">Async 함수</code> 안에서 <code class=\"language-text\">await</code>는 코드의 순서를 기다리며 자신의 차례가 올때까지 기다렸다가 자신의 차례가 오면 결과를 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'완료!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 프라미스가 이행될 때까지 치례를 기다림 (*)</span>\n\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"완료!\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"async--await-이전에-promise를-사용할-경우\" style=\"position:relative;\"><a href=\"#async--await-%EC%9D%B4%EC%A0%84%EC%97%90-promise%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"async  await 이전에 promise를 사용할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async &#x26; await 이전에 Promise를 사용할 경우</h3>\n<ul>\n<li>promise는 접근할때 .then()을 사용하고 error처리는 .catch()로 한다.</li>\n<li>단어의 의미 약속 ‘미래’ 시점의 데이터를 위한 것이긴 하지만 ‘promise’를 갖고 있기만 하면, 그 데이터가 미래시점에 있는지?, 이미 받았는지? 에 대해서는 상관없다.</li>\n<li>프로미스는 일관된 비동기를 강제한다.</li>\n</ul>\n<br/>\n<h3 id=\"promise와-async--await-차이\" style=\"position:relative;\"><a href=\"#promise%EC%99%80-async--await-%EC%B0%A8%EC%9D%B4\" aria-label=\"promise와 async  await 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise와 Async &#x26; await 차이</h3>\n<ul>\n<li>프로미스 .then()과 await는 쓰는 방법이 거의 똑같다. <code class=\"language-text\">다른 점이 있다면 콜백함수를 요구하지 않는다는 점은 다르다.</code></li>\n</ul>\n<p><strong>예외처리하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token operator\">*</span><span class=\"token comment\">//* 예외발생할 **가능성이 **있는 **문장**</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception1 e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token operator\">*</span><span class=\"token comment\">// Exception1*이 **발생했을 **경우*,* 이를 **처리하지 **위한 **문장적는다*.*</span>\n\n<span class=\"token operator\">*</span><span class=\"token comment\">//* 보통 **이곳에 **예외메세지를 **출력하고 **로그로 **남김*.*</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception2 e2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token operator\">*</span><span class=\"token comment\">// Exception2*이 **발생했을 **경우*,* 이를 **처리하지 **위한 **문장적는다*.*</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ExceptionN eN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token operator\">*</span><span class=\"token comment\">// ExceptionN*이 **발생했을 **경우*,* 이를 **처리하지 **위한 **문장적는다*.*</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token operator\">*</span><span class=\"token comment\">//* 예외발생여부에 **관계없이 **상항 **수행되어야 **하는 **문장적는다*.*</span>\n\n<span class=\"token operator\">*</span><span class=\"token comment\">//* 보통은 **자원이나 *DB*에 **커넥션 **한 **경우*,* 파일 **닫기*,* 연결 **닫기 **등과 **같은 *“*정리*”*코드를 **넣는데 **사용한다*.*</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>try-catch문 플로우 (예외가 try 블럭에서 발생한 경우)</strong></p>\n<ol>\n<li>발생한 예외와 일치하는 catch 문이 있는지 확인.</li>\n<li>일치하는 catch 문이 있다면 catch 블럭 내의 문장을 모두 실행하고 try catch 문을 빠져나가서 그다음 문장을 수행.</li>\n<li>일치하는 catch 문이 없다면 예외는 처리되지 못하고 에러 발생.</li>\n</ol>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.javascript.info/async-await\">async await란?</a></p>\n<p><a href=\"https://medium.com/@la.place/async-await%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94%EA%B0%80-fa08a3157647\">Async-await는 어떻게 구현하는가</a></p>\n<p><a href=\"https://kiwanjung.medium.com/%EB%B2%88%EC%97%AD-async-await-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-promise%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-955dbac2c4a4\">[번역] async/await 를 사용하기 전에 promise를 이해하기</a></p>\n<p><a href=\"https://velog.io/@beberiche/promise-asyncawait\">promise, async/await</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#async--await%EB%9E%80\">Async &#x26; await란?</a></p>\n<ul>\n<li><a href=\"#async--await-%EC%9D%B4%EC%A0%84%EC%97%90-promise%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EA%B2%BD%EC%9A%B0\">Async &#x26; await 이전에 Promise를 사용할 경우</a></li>\n<li><a href=\"#promise%EC%99%80-async--await-%EC%B0%A8%EC%9D%B4\">Promise와 Async &#x26; await 차이</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2022","title":"Async & await","categories":"JavaScript","author":"JungSany","emoji":"🍈"},"fields":{"slug":"/javascript/async-await/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/javascript/promise/","nextSlug":"/javascript/callback/","prevSlug":"/javascript/async-await/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}