{"componentChunkName":"component---src-templates-blog-template-js","path":"/javascript/object/","result":{"data":{"cur":{"id":"38428210-28c5-52c9-b0fb-92d2a383a182","html":"<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>자바스크립트에는 여덟 가지 자료형이 있다.</p>\n<p>이 중 일곱 개는 오직 하나의 데이터(문자열, 숫자 등)만 담을 수 있어 ‘원시형(primitive type)’라고 부른다.</p>\n<p>그런데 객체형은</p>\n<ol>\n<li>원시형과 달리 다양한 데이터를 담을 수 있다.</li>\n<li>키로 구분된 데이터 집합이나 복잡한 개체(entity)를 저장할 수 있다.</li>\n</ol>\n<p><code class=\"language-text\">즉 객체는 자바스크립트의 거의 모든 면에 녹아있는 개념이므로 자바스크립트를 잘 다루려면 객체를 잘 이해하고 있어야 한다.</code></p>\n<p>객체를 만들기 위해서는 중괄호 {}를 이용해 만들 수 있는데, 중괄호 안에는 ‘키(key): 값(value)’ 쌍으로 구성된 프로퍼티(property)를 여러 개 넣을 수 있는데, 아래와 같이 허용할 수 있으며, 프로퍼티 키는 ‘프로퍼티 이름’ 이라고도 부른다.</p>\n<p>그리고 프로퍼티 값엔 모든 자료형이 올 수 있다.</p>\n<ul>\n<li>키에는 문자형</li>\n<li>값에는 자료형</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 객체 user라는 obj를 생성하는데, 안에 프로퍼티로 name과 age를 생성한 샘이다.</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'JungSeaHyun'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 키: \"name\",  값: \"JungSeHyun\"</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 키: \"age\", 값: 33</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"그래서-객체란\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EA%B0%9D%EC%B2%B4%EB%9E%80\" aria-label=\"그래서 객체란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 객체란?</h3>\n<ol>\n<li>객체는 몇 가지 특수한 기능을 가진 연관 배열(associative array)이다.</li>\n<li>객체는 프로퍼티(키-값 쌍)를 저장한다.</li>\n</ol>\n<ul>\n<li>프로퍼티 키는 문자열이나 심볼이여야 한다. (보통은 문자열)</li>\n<li>값은 어떤 자료형도 가능하다.</li>\n</ul>\n<ol>\n<li>프로퍼티 접근 방식은 점, 대괄호 표기법이 있다.</li>\n<li>자바스크립트는 일반 객체 이외에도 다양한 종류의 객체가 있다. (추가로, ‘Array타입’이나 ‘Date 타입’은 독립적인 자료형이 아니라 ‘<strong>객체</strong>‘형에 속한다.)</li>\n</ol>\n<ul>\n<li>Array : 정렬된 데이터 컬렉션을 저장할 때 쓰임</li>\n<li>Date : 날짜와 시간 정보를 저장할 때 쓰임</li>\n<li>Error : 에러 정보를 저장할 때 쓰임</li>\n<li>기타 등등</li>\n</ul>\n<br/>\n<h3 id=\"객체를-생성하는-방법으로는\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9C%BC%EB%A1%9C%EB%8A%94\" aria-label=\"객체를 생성하는 방법으로는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체를 생성하는 방법으로는?</h3>\n<ol>\n<li>\n<p><strong>객체 생성자:</strong></p>\n<p>빈 객체를 만드는 가장 간단한 방법은 Object 생성자를 사용하는 것인데, 현재 이 접근 방식은 권장되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>\n<p><strong>객체의 생성 방법:</strong></p>\n<p>Object의 create 메소드는 프로토타입 객체를 매개변수로 전달하여 새 객체를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"3\">\n<li>\n<p><strong>객체 리터럴 구문: 개체를 만드는 방법 중 가장 쉬운 방법</strong></p>\n<p>개체 리터럴 구문(또는 개체 이니셜라이저)은 중괄호로 묶인 쉼표로 구분된 이름-값 쌍 집합이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Sudheer'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Object literal property values can be of any data type, including array, function, and nested object.</li>\n<li>개체 리터럴 속성 값은 배열, 함수 및 중첩된 개체를 포함한 모든 데이터 유형일 수 있다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<ol start=\"4\">\n<li>\n<p><strong>함수 생성자:</strong></p>\n<p>함수를 생성하고 new 연산자를 적용하여 객체 인스턴스를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Sudheer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"5\">\n<li>\n<p><strong>프로토타입이 있는 함수 생성자:</strong></p>\n<p>이것은 함수 생성자와 유사하지만 속성 및 메서드에 대해 프로토타입을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Sudheer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이것은 함수 프로토타입이 있는 객체 생성 메소드로 생성된 인스턴스와 인스턴스 및 매개변수를 인수로 사용하여 해당 함수를 호출하는 것과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">func</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>`\n\n<span class=\"token operator\">**</span><span class=\"token punctuation\">(</span>또는<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// Create a new instance using function prototype.</span>\n<span class=\"token keyword\">const</span> newInstance <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Call the function</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>newInstance<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// If the result is a non-null object then use it otherwise just use the new instance.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> newInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"6\">\n<li>\n<p><strong>ES6 클래스 구문:</strong></p>\n<p>ES6에는 객체를 생성하는 클래스 기능이 도입되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Sudheer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"7\">\n<li>\n<p><strong>싱글톤 패턴:</strong></p>\n<p>Singleton은 한 번만 인스턴스화할 수 있는 개체인데, 생성자에 대한 반복된 호출은 동일한 인스턴스를 반환하고 이러한 방식으로 여러 인스턴스를 실수로 생성하지 않도록 할 수 있다.</p>\n</li>\n</ol>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.javascript.info/object\">객체</a></p>\n<p><a href=\"https://poiemaweb.com/js-object\">Object</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Basics\">JavaScript 객체 기본</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EA%B0%9D%EC%B2%B4%EB%9E%80\">그래서 객체란?</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9C%BC%EB%A1%9C%EB%8A%94\">객체를 생성하는 방법으로는?</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","excerpt":"개요 자바스크립트에는 여덟 가지 자료형이 있다. 이 중 일곱 개는 오직 하나의 데이터(문자열, 숫자 등)만 담을 수 있어 ‘원시형(primitive type)’라고 부른다. 그런데 객체형은 원시형과 달리 다양한 데이터를 담을 수 있다. 키로 구분된 데이터 집합이나 복잡한 개체(entity)를 저장할 수 있다.  객체를 만들기 위해서는 중괄호 {}를 이용해 만들 수 있는데, 중괄호 안에는 ‘키(key): 값(value)’ 쌍으로 구성된 프로퍼티(property)를 여러 개 넣을 수 있는데, 아래와 같이 허용할 수 있으며, 프로퍼티 키는 ‘프로퍼티 이름’ 이라고도 부른다. 그리고 프로퍼티 값엔 모든 자료형이 올 수 있다. 키에는 문자형 값에는 자료형 그래서 객체란? 객체는 몇 가지 특수한 기능을 가진 연관 배열(associative array)이다. 객체는 프로퍼티(키-값 쌍)를 저장한다. 프로퍼티 키는 문자열이나 심볼이여야 한다. (보통은 문자열) 값은 어떤 자료형도 가능하다. 프로…","frontmatter":{"date":"December 20, 2022","title":"객체(Object)란?","categories":"JavaScript","author":"JungSany","emoji":"🍇"},"fields":{"slug":"/javascript/object/"}},"next":{"id":"85467ef4-9011-55a0-ab7b-9509e967d8e5","html":"<h2 id=\"webrtcweb-real-time-communications란\" style=\"position:relative;\"><a href=\"#webrtcweb-real-time-communications%EB%9E%80\" aria-label=\"webrtcweb real time communications란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebRTC(Web Real-Time Communications)란?</h2>\n<ul>\n<li><strong>WebRTC</strong>는 서버를 최대한 거치지 않고 P2P로 브라우저나 단말 간에 데이터를 주고받는 기술의 웹 표준이다.</li>\n<li>웹에서 실시간 미디어 스트림을 송수신할 수 있는 유일한 표준이고 또 유일한 P2P 표준이기도 하다.</li>\n<li><strong>쉽게 말하자면</strong> 웹 어플리케이션(최근에는 Android 및 IOS도 지원) 및 사이트들이 별도의 소프트웨어 없이 음성, 영상 미디어 혹은 텍스트, 파일 같은 데이터를 브라우져끼리 주고 받을 수 있게 만든 기술이다.</li>\n</ul>\n<p><img src=\"https://cdn.ttgtmedia.com/rms/onlineimages/how_webrtc_works-f.png\" alt=\"WebRTC 통신 원리\"></p>\n<br/>\n<h2 id=\"위의-그림을-통한-설명\" style=\"position:relative;\"><a href=\"#%EC%9C%84%EC%9D%98-%EA%B7%B8%EB%A6%BC%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"위의 그림을 통한 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위의 그림을 통한 설명</h2>\n<p>보통 두 기기가 실시간으로 소통하기 위해서는 WebRTC에서 제공하는 <code class=\"language-text\">MediaStream, RTPeerConnection, RTCDataChannel</code> 등의 API와 API들을 적절하게 데이터를 교환할 수 있도록 처리해 주는 과정인 <code class=\"language-text\">Signaling</code>이라는 프로세스를 통해 통신을 조정해야하며, 네트워크 주소 변환기(NAT) 및 방화벽에 대처하기 위해 메타데이터를 교환할 수 있는 <code class=\"language-text\">Signaling 서버</code> 역시 필요하다. 또 P2P 연결이 불가능한 상황을 대비한 릴레이 서버(TURN)가 필요하다.</p>\n<ul>\n<li><strong>WebRTC</strong>를 사용해 연결을 맺고, peer의 기기에서 미디어를 가져와 교환한다.</li>\n<li><strong>Signaling</strong>을 통해 통신할 peer간 정보를 교환할 수 있다.(네트워크 정보, capability 정보, 세션 수립 등)\n<ul>\n<li><strong>Signaling의 구성하는 방법</strong>은 <code class=\"language-text\">XHR와 Channel API</code>를 이용하거나 node 서버에서 <code class=\"language-text\">Socket.io</code>를 이용하는 방법 등이 있다.</li>\n<li>Session control messages: 통신의 초기화, 종료, 그리고 에러 리포트</li>\n<li>Network configuration : ICE 프레임워크를 사용해서 서로의 IP 와 포트를 찾는 과정</li>\n<li>Media capabilites : 내 브라우저와 상대 브라우저가 사용 가능한 코덱, 해상도 등’</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"webrtc-활용-분야\" style=\"position:relative;\"><a href=\"#webrtc-%ED%99%9C%EC%9A%A9-%EB%B6%84%EC%95%BC\" aria-label=\"webrtc 활용 분야 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebRTC 활용 분야</h2>\n<p>기본적으로 P2P 스트리밍 기술에서 출발하였지만, 최근에는 다양한 언택트 서비스들로 발전하였다.\n<img src=\"https://blog.kakaocdn.net/dn/cRzhzu/btriFtRzxui/g8YtExcv3hTHyH2xIIKL6k/img.png\" alt=\"WebRTC로 가능한 언택트 서비스들\"></p>\n<br/>\n<h3 id=\"용어사전\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%82%AC%EC%A0%84\" aria-label=\"용어사전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어사전</h3>\n<ul>\n<li>P2P(동등 계층간 통신망): peer-to-peer network의 줄임말로 소수의 서버에 집중하기보다는 망구성에 참여하는 기계들의 계산과 대역폭 성능에 의존하여 구성되는 통신망</li>\n<li>MediaStream: 카메라와 마이크 등의 데이터 스트림 접근</li>\n<li>RTCPeerConnection: 암호화 및 대역폭 관리 및 오디오, 비디오의 연결</li>\n<li>RTCDataChannel: 일반적인 데이터의 P2P 통신</li>\n<li>Signaling:통신을 조율할 메시지를 주고 받는 일련의 프로세스 or RTCPeerConnection들이 적절하게 데이터를 교환할 수 있게 처리해 주는 프로세스</li>\n<li>Caller: 요청을 받거나 주는 대상? (기기의 앱, 브라우저 간에, 단말기기 간)</li>\n<li><a href=\"https://webrtc.org/getting-started/turn-server\">TURN 서버</a>: NAT 주위의 릴레이를 사용한 순회를 의미하며, 네트워크 트래픽을 중계하는 프로토콜</li>\n</ul>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://webrtc.org/\">WebRTC 공홈</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Protocols\">WebRTC mdn</a></p>\n<p><a href=\"https://tech.kakaoenterprise.com/121\">WebRTC 응용 서비스를 개발하는 2가지 방법</a></p>\n<p><a href=\"https://medium.com/@hyun.sang/webrtc-webrtc%EB%9E%80-43df68cbe511\">WebRTC란?</a></p>\n<p><a href=\"https://web.dev/webrtc-infrastructure/\">Build the backend services needed for a WebRTC app</a></p>\n<p><a href=\"https://juneyr.dev/webrtc-basics\">실시간 통화 어떻게 하는 거지 : WebRTC 기초</a></p>\n<p><a href=\"https://www.techtarget.com/searchunifiedcommunications/definition/WebRTC-Web-Real-Time-Communications\">WebRTC (Web Real-Time Communications)</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/P2P\">p2p</a></p>\n<p><a href=\"https://gh402.tistory.com/45\">NAT, ICE, STUN, TURN 이란?</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#webrtcweb-real-time-communications%EB%9E%80\">WebRTC(Web Real-Time Communications)란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9C%84%EC%9D%98-%EA%B7%B8%EB%A6%BC%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%84%A4%EB%AA%85\">위의 그림을 통한 설명</a></p>\n</li>\n<li>\n<p><a href=\"#webrtc-%ED%99%9C%EC%9A%A9-%EB%B6%84%EC%95%BC\">WebRTC 활용 분야</a></p>\n<ul>\n<li><a href=\"#%EC%9A%A9%EC%96%B4%EC%82%AC%EC%A0%84\">용어사전</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 19, 2022","title":"WebRTC에 대해서","categories":"개발지식","author":"JungSany","emoji":"🗞️"},"fields":{"slug":"/knowledge/webrtc/"}},"prev":{"id":"b456d586-2be1-575d-b7bc-88ffeb2b8dc8","html":"<h3 id=\"destructuring구조-분해-할당이란\" style=\"position:relative;\"><a href=\"#destructuring%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9%EC%9D%B4%EB%9E%80\" aria-label=\"destructuring구조 분해 할당이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Destructuring(구조 분해 할당)이란?</h3>\n<p><code class=\"language-text\">객체</code>와 <code class=\"language-text\">배열</code>은 자바스크립트에서 가장 많이 쓰이는 자료 구조이다.</p>\n<ul>\n<li>키를 가진 데이터 여러 개를 하나의 엔티티에 저장할 땐 객체</li>\n<li>컬렉션에 데이터를 순서대로 저장할 땐 배열</li>\n</ul>\n<p>개발을 하다 보면 함수에 객체나 배열을 전달해야 하는 경우가 생기곤 하는데, 객체나 배열에 저장된 데이터 전체가 아닌 일부만 필요한 경우가 생긴다.</p>\n<p>이때 객체나 배열을 변수로 ‘분해’할 수 있게 해주는 특별한 문법인 <code class=\"language-text\">구조 분해 할당(destructuring assignment)</code>을 사용할 수 있다. 그 외에도 함수의 매개변수가 많거나 매개변수 기본값이 필요한 경우 등에서 <code class=\"language-text\">구조 분해(destructuring)</code>는 그 진가를 발휘한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 이름과 성을 요소로 가진 배열</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Jung'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Youn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 구조 분해 할당을 이용해</span>\n<span class=\"token comment\">// firstName엔 arr[0]을</span>\n<span class=\"token comment\">// surname엔 arr[1]을 할당하였습니다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jung</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Youn</span>\n\n<span class=\"token comment\">// 두 번째 요소는 필요하지 않으면 쉼표를 사용하여 배열 요소를 버릴 수 있다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Julius'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Caesar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Consul'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'of the Roman Republic'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Consul</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'JungSeaHyun'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for ...of 문과 Object.entries(obj)를 이용하면 객체의 키와 값을 순회해 변수로 분해 할당할 수 있다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name:JungSeaHyun, age:33이 차례대로 출력</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 같이 구조 분해를 하게 되면 인덱스를 이용해 배열에 접근하지 않고도 변수로 이름과 성을 사용할 수 있게된다.</p>\n<br/>\n<h3 id=\"code-classlanguage-textcode로-나머지-요소-가져오기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcode%EB%A1%9C-%EB%82%98%EB%A8%B8%EC%A7%80-%EC%9A%94%EC%86%8C-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"code classlanguage textcode로 나머지 요소 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‘<code class=\"language-text\">...</code>‘로 나머지 요소 가져오기</h3>\n<p>배열 앞쪽에 위치한 값 몇 개만 필요하고 그 이후 이어지는 나머지 값들은 한데 모아서 저장하고 싶을 때가 있습니다. 이럴 때는 점 세 개 <code class=\"language-text\">...</code>를 붙인 매개변수 하나를 추가하면 ‘나머지(rest)’ 요소를 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Julius'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Caesar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Consul'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'of the Roman Republic'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Julius</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Caesar</span>\n\n<span class=\"token comment\">// `rest`는 배열입니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Consul</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// of the Roman Republic</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<br/>\n<h3 id=\"기본값default-value\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92default-value\" aria-label=\"기본값default value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본값(Default value)</h3>\n<p>할당하고자 하는 변수의 개수가 분해하고자 하는 배열의 길이보다 크더라도 에러가 발생하지 않습니다. 할당할 값이 없으면 undefined로 취급되기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// = 을 이용하면 할당할 값이 없을 때 기본으로 할당해 줄 값인 기본값을 설정할 수 있다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 구조 분행 할당으로 객체를 분해할 수 있다.</span>\n<span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Menu'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Menu</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200</span></code></pre></div>\n<br/>\n<h3 id=\"중첨-구조-분해nested-destructuring\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A8-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4nested-destructuring\" aria-label=\"중첨 구조 분해nested destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첨 구조 분해(nested destructuring)</h3>\n<p>객체나 배열이 다른 객체나 배열을 포함하는 경우, 좀 더 복잡한 패턴을 사용하면 중첩 배열이나 객체의 정보를 추출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 중첩 객체와 콜론을 조합하면 좀 더 복잡한 구조 분해도 가능하다.</span>\n<span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'My menu'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Item2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title <span class=\"token operator\">=</span> <span class=\"token string\">'Untitled'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> w <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// width는 w에,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> h <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// height는 h에,</span>\n  <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>item1<span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// items의 첫 번째 요소는 item1에, 두 번째 요소는 item2에 할당함</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>w<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>h<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// My Menu 100 200</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Item1</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Item2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showMenu</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.javascript.info/destructuring-assignment#ref-410\">구조 분해 할당</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%EB%B0%B0%EC%97%B4_%EA%B5%AC%EC%A1%B0_%EB%B6%84%ED%95%B4\">구조 분해 할당 - JavaScript | MDN</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#destructuring%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9%EC%9D%B4%EB%9E%80\">Destructuring(구조 분해 할당)이란?</a></li>\n<li><a href=\"#%EB%A1%9C-%EB%82%98%EB%A8%B8%EC%A7%80-%EC%9A%94%EC%86%8C-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\">‘<code class=\"language-text\">...</code>‘로 나머지 요소 가져오기</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92default-value\">기본값(Default value)</a></li>\n<li><a href=\"#%EC%A4%91%EC%B2%A8-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4nested-destructuring\">중첨 구조 분해(nested destructuring)</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2022","title":"구조 분해 할당","categories":"JavaScript","author":"JungSany","emoji":"🍉"},"fields":{"slug":"/javascript/destructuring/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/javascript/object/","nextSlug":"/knowledge/webrtc/","prevSlug":"/javascript/destructuring/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}