{"componentChunkName":"component---src-templates-blog-template-js","path":"/javascript/shallow-deep-copy/","result":{"data":{"cur":{"id":"9309f23f-f54f-5386-96cb-c09dff87f071","html":"<p><img src=\"https://t1.daumcdn.net/cfile/tistory/993F09445A6DA15516\" alt=\"깊은복사와 얕은 복사\"></p>\n<h2 id=\"shaloow-copy---얕은-복사란\" style=\"position:relative;\"><a href=\"#shaloow-copy---%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\" aria-label=\"shaloow copy   얕은 복사란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shaloow Copy - 얕은 복사란?</h2>\n<p><strong>복사할 때 원래값과 복사된 값이 같은 참조를 가리키고 있는 것을 말한다.</strong></p>\n<p>객체안에 객체가 있을 경우 한개의 객체라도 원본 객체를 참고 하고 있다면 이를 얕은 복사라고 한다.</p>\n<p>객체를 가르키는 변수(원본)을 다른 변수(사본)에 할당하면 원본 의 참조 값이 복사되어 전달된다. 이를 참조에 의한 전달이라하며, 얕은 복사이다.</p>\n<p>또 얕은 복사는 <code class=\"language-text\">한단계 뎁스만 복사</code>한다.</p>\n<br/>\n<h3 id=\"결국-얕은-복사란\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B5%AD-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\" aria-label=\"결국 얕은 복사란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결국 얕은 복사란?</h3>\n<p><code class=\"language-text\">두개의 식별자가 하나의 객체를 바라보게 되어</code>, 원본 또는 사본 중 어느 한쪽에서 객체를 변경(변수에 새로운 객체를 재할당하는 것이 아니라 객체의 프로퍼티 값을 변경하거나 프로퍼티를 추가, 삭제)하면 <code class=\"language-text\">서로 영향을 주고 받는다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> per1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> per2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체를 생성할떄는 새로운 평가를 받기때문에 펄스가 뜨는데</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>per1 <span class=\"token operator\">===</span> per2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 아래 콘솔은 프로퍼티 값을 참조하는 값으로 평가될 수 있는 표현식이다. 그래서 두 표현식 모두 원시값으로 평가되어 트루다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>per1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> per2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"얕은-복사를-하는-방법에는\" style=\"position:relative;\"><a href=\"#%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\" aria-label=\"얕은 복사를 하는 방법에는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>얕은 복사를 하는 방법에는</h3>\n<ol>\n<li>Object.assign()</li>\n<li>Array.Slice()</li>\n<li>Spread 연산자 (전개연산자)</li>\n</ol>\n<br/>\n<h2 id=\"deep-copy---깊은-복사란\" style=\"position:relative;\"><a href=\"#deep-copy---%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\" aria-label=\"deep copy   깊은 복사란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deep Copy - 깊은 복사란?</h2>\n<p>깊은 복사된 객체는 객체안에 객체가 있을 경우에도 원본과의 참조가 완전히 끈헝진 객체를 말한다.</p>\n<p>깊은 복사는 <code class=\"language-text\">중첩된 부분까지 모두 복사</code>하는 경우를 말한다.</p>\n<br/>\n<h3 id=\"깊은-복사를-하는-방법에는\" style=\"position:relative;\"><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\" aria-label=\"깊은 복사를 하는 방법에는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깊은 복사를 하는 방법에는</h3>\n<ol>\n<li>JSON.parse &#x26;&#x26; JSON.stringify</li>\n<li>재귀함수를 구현한 복사</li>\n<li>lodash의 cloneDeep를 사용한 복사(라이브러리 사용)</li>\n</ol>\n<br/>\n<h3 id=\"참조링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EB%A7%81%ED%81%AC\" aria-label=\"참조링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조링크</h3>\n<p><a href=\"https://velog.io/@th0566/Javascript-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC-%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC\">[Javascript] 얕은 복사, 깊은 복사</a></p>\n<p><a href=\"https://bbangson.tistory.com/78\">[JavaScript] 깊은 복사, 얕은 복사</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#shaloow-copy---%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\">Shaloow Copy - 얕은 복사란?</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B5%AD-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\">결국 얕은 복사란?</a></li>\n<li><a href=\"#%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\">얕은 복사를 하는 방법에는</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#deep-copy---%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%9E%80\">Deep Copy - 깊은 복사란?</a></p>\n<ul>\n<li><a href=\"#%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94\">깊은 복사를 하는 방법에는</a></li>\n<li><a href=\"#%EC%B0%B8%EC%A1%B0%EB%A7%81%ED%81%AC\">참조링크</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"깊은복사와 얕은 복사 Shaloow Copy - 얕은 복사란? 복사할 때 원래값과 복사된 값이 같은 참조를 가리키고 있는 것을 말한다. 객체안에 객체가 있을 경우 한개의 객체라도 원본 객체를 참고 하고 있다면 이를 얕은 복사라고 한다. 객체를 가르키는 변수(원본)을 다른 변수(사본)에 할당하면 원본 의 참조 값이 복사되어 전달된다. 이를 참조에 의한 전달이라하며, 얕은 복사이다. 또 얕은 복사는 한다. 결국 얕은 복사란? , 원본 또는 사본 중 어느 한쪽에서 객체를 변경(변수에 새로운 객체를 재할당하는 것이 아니라 객체의 프로퍼티 값을 변경하거나 프로퍼티를 추가, 삭제)하면  얕은 복사를 하는 방법에는 Object.assign() Array.Slice() Spread 연산자 (전개연산자) Deep Copy - 깊은 복사란? 깊은 복사된 객체는 객체안에 객체가 있을 경우에도 원본과의 참조가 완전히 끈헝진 객체를 말한다. 깊은 복사는 하는 경우를 말한다. 깊은 복사를 하는 방법에는 J…","frontmatter":{"date":"December 20, 2022","title":"얕은 복사와 깊은 복사","categories":"JavaScript","author":"JungSany","emoji":"🍊"},"fields":{"slug":"/javascript/shallow-deep-copy/"}},"next":{"id":"9c73b19f-e73f-5750-891a-91d62d4218c8","html":"<h3 id=\"destructuring구조-분해-할당이란\" style=\"position:relative;\"><a href=\"#destructuring%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9%EC%9D%B4%EB%9E%80\" aria-label=\"destructuring구조 분해 할당이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Destructuring(구조 분해 할당)이란?</h3>\n<p><code class=\"language-text\">객체</code>와 <code class=\"language-text\">배열</code>은 자바스크립트에서 가장 많이 쓰이는 자료 구조이다.</p>\n<ul>\n<li>키를 가진 데이터 여러 개를 하나의 엔티티에 저장할 땐 객체</li>\n<li>컬렉션에 데이터를 순서대로 저장할 땐 배열</li>\n</ul>\n<p>개발을 하다 보면 함수에 객체나 배열을 전달해야 하는 경우가 생기곤 하는데, 객체나 배열에 저장된 데이터 전체가 아닌 일부만 필요한 경우가 생긴다.</p>\n<p>이때 객체나 배열을 변수로 ‘분해’할 수 있게 해주는 특별한 문법인 <code class=\"language-text\">구조 분해 할당(destructuring assignment)</code>을 사용할 수 있다. 그 외에도 함수의 매개변수가 많거나 매개변수 기본값이 필요한 경우 등에서 <code class=\"language-text\">구조 분해(destructuring)</code>는 그 진가를 발휘한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 이름과 성을 요소로 가진 배열</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Jung'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Youn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 구조 분해 할당을 이용해</span>\n<span class=\"token comment\">// firstName엔 arr[0]을</span>\n<span class=\"token comment\">// surname엔 arr[1]을 할당하였습니다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jung</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Youn</span>\n\n<span class=\"token comment\">// 두 번째 요소는 필요하지 않으면 쉼표를 사용하여 배열 요소를 버릴 수 있다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Julius'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Caesar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Consul'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'of the Roman Republic'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Consul</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'JungSeaHyun'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for ...of 문과 Object.entries(obj)를 이용하면 객체의 키와 값을 순회해 변수로 분해 할당할 수 있다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name:JungSeaHyun, age:33이 차례대로 출력</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 같이 구조 분해를 하게 되면 인덱스를 이용해 배열에 접근하지 않고도 변수로 이름과 성을 사용할 수 있게된다.</p>\n<br/>\n<h3 id=\"code-classlanguage-textcode로-나머지-요소-가져오기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcode%EB%A1%9C-%EB%82%98%EB%A8%B8%EC%A7%80-%EC%9A%94%EC%86%8C-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"code classlanguage textcode로 나머지 요소 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‘<code class=\"language-text\">...</code>‘로 나머지 요소 가져오기</h3>\n<p>배열 앞쪽에 위치한 값 몇 개만 필요하고 그 이후 이어지는 나머지 값들은 한데 모아서 저장하고 싶을 때가 있습니다. 이럴 때는 점 세 개 <code class=\"language-text\">...</code>를 붙인 매개변수 하나를 추가하면 ‘나머지(rest)’ 요소를 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Julius'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Caesar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Consul'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'of the Roman Republic'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Julius</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Caesar</span>\n\n<span class=\"token comment\">// `rest`는 배열입니다.</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Consul</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// of the Roman Republic</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<br/>\n<h3 id=\"기본값default-value\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92default-value\" aria-label=\"기본값default value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본값(Default value)</h3>\n<p>할당하고자 하는 변수의 개수가 분해하고자 하는 배열의 길이보다 크더라도 에러가 발생하지 않습니다. 할당할 값이 없으면 undefined로 취급되기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// = 을 이용하면 할당할 값이 없을 때 기본으로 할당해 줄 값인 기본값을 설정할 수 있다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 구조 분행 할당으로 객체를 분해할 수 있다.</span>\n<span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Menu'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Menu</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200</span></code></pre></div>\n<br/>\n<h3 id=\"중첨-구조-분해nested-destructuring\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A8-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4nested-destructuring\" aria-label=\"중첨 구조 분해nested destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첨 구조 분해(nested destructuring)</h3>\n<p>객체나 배열이 다른 객체나 배열을 포함하는 경우, 좀 더 복잡한 패턴을 사용하면 중첩 배열이나 객체의 정보를 추출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 중첩 객체와 콜론을 조합하면 좀 더 복잡한 구조 분해도 가능하다.</span>\n<span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'My menu'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Item2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title <span class=\"token operator\">=</span> <span class=\"token string\">'Untitled'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> w <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// width는 w에,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> h <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// height는 h에,</span>\n  <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>item1<span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// items의 첫 번째 요소는 item1에, 두 번째 요소는 item2에 할당함</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>w<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>h<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// My Menu 100 200</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Item1</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Item2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showMenu</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"참고링크\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\" aria-label=\"참고링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고링크</h3>\n<p><a href=\"https://ko.javascript.info/destructuring-assignment#ref-410\">구조 분해 할당</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%EB%B0%B0%EC%97%B4_%EA%B5%AC%EC%A1%B0_%EB%B6%84%ED%95%B4\">구조 분해 할당 - JavaScript | MDN</a></p>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#destructuring%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9%EC%9D%B4%EB%9E%80\">Destructuring(구조 분해 할당)이란?</a></li>\n<li><a href=\"#%EB%A1%9C-%EB%82%98%EB%A8%B8%EC%A7%80-%EC%9A%94%EC%86%8C-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\">‘<code class=\"language-text\">...</code>‘로 나머지 요소 가져오기</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92default-value\">기본값(Default value)</a></li>\n<li><a href=\"#%EC%A4%91%EC%B2%A8-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4nested-destructuring\">중첨 구조 분해(nested destructuring)</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EB%A7%81%ED%81%AC\">참고링크</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2022","title":"구조 분해 할당","categories":"JavaScript","author":"JungSany","emoji":"🍉"},"fields":{"slug":"/javascript/destructuring/"}},"prev":{"id":"756a27a4-4090-5ab8-bba3-bb70221b372f","html":"<h3 id=\"콜백이란\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%B4%EB%9E%80\" aria-label=\"콜백이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백이란?</h3>\n<ul>\n<li>비동기처리방식에 속하며, 함수가 끝나고 난 뒤에 실행되는 함수</li>\n<li>자바스크립트에서 함수는 객체이다. 따라서 <strong>함수는 함수를 인자로 받고 다른 함수를 통해 반환될 수 있는데, 인자로 대입되는 함수</strong>를 <code class=\"language-text\">콜백함수</code>라고 부름</li>\n<li>아래의 예시처럼 다른 코드가 특정 코드가 마무리되기 전에 실행되지 않도록, 즉 비동기 처리를 위한 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<details>\n<summary>정답</summary>\n<div markdown=\"1\">\n<p>출력 순서는 2 → 1</p>\n</div>\n</details>\n<br/>\n<h3 id=\"콜백의-불편사항\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%B6%88%ED%8E%B8%EC%82%AC%ED%95%AD\" aria-label=\"콜백의 불편사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백의 불편사항</h3>\n<ul>\n<li>\n<p>비동기 처리에 콜백 함수를 이용하게 되면 코드를 중첩시켜 작성하게 되기 때문에 에러, 예외처리가 어렵고 복잡도가 증가하게 되어 콜백지옥을 맛볼 수 있다.</p>\n</li>\n<li>\n<p>콜백함수의 중첩은 에러처리가 힘듬다.</p>\n<p><img src=\"https://velog.velcdn.com/images/yj05037/post/9c47656d-edd0-4318-81b3-52f2244172cb/image.png\" alt=\"callback 지옥 이미지\"></p>\n</li>\n</ul>\n<br/>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%B4%EB%9E%80\">콜백이란?</a></li>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%B6%88%ED%8E%B8%EC%82%AC%ED%95%AD\">콜백의 불편사항</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2022","title":"콜백(CallBack)이란?","categories":"JavaScript","author":"JungSany","emoji":"🥥"},"fields":{"slug":"/javascript/callback/"}},"site":{"siteMetadata":{"siteUrl":"https://rnfltpgus.github.io","comments":{"utterances":{"repo":"rnfltpgus/rnfltpgus.github.io"}}}}},"pageContext":{"slug":"/javascript/shallow-deep-copy/","nextSlug":"/javascript/destructuring/","prevSlug":"/javascript/callback/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}